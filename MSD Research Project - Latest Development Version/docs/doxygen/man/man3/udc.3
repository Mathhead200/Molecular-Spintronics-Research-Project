.TH "udc" 3 "Wed Nov 30 2022" "Version 6.2.1" "MSD" \" -*- nroff -*-
.ad l
.nh
.SH NAME
udc
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBMolecule\fP"
.br
.RI "An abstract molecule\&. "
.ti -1c
.RI "class \fBMSD\fP"
.br
.RI "An abstract Molecular Spintronic Device\&. "
.ti -1c
.RI "class \fBSparseArray\fP"
.br
.ti -1c
.RI "struct \fBSparseArrayValue\fP"
.br
.ti -1c
.RI "class \fBUDCException\fP"
.br
.ti -1c
.RI "class \fBVector\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &out, const \fBMSD::Parameters\fP &p)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &out, const \fBMSD::Results\fP &r)"
.br
.ti -1c
.RI "template<typename T > T \fBparseline\fP (istream &in)"
.br
.ti -1c
.RI "template<> string \fBparseline\fP (istream &in)"
.br
.ti -1c
.RI "template<> istringstream \fBparseline\fP (istream &in)"
.br
.ti -1c
.RI "template<> void \fBparseline\fP (istream &in)"
.br
.ti -1c
.RI "template<typename T > T \fBparseline\fP (const string &str)"
.br
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &in, \fBudc::Vector\fP &v)"
.br
.ti -1c
.RI "\fBMSD::MolProto\fP \fBreadMMT\fP (istream &src)"
.br
.RI "Parses MMT file data from the given text istream, and saves it as a \fBMSD::MolProto\fP object\&. "
.ti -1c
.RI "double \fBsq\fP (double x)"
.br
.RI "square a number fast "
.ti -1c
.RI "double \fBcube\fP (double x)"
.br
.RI "cube a number fast "
.ti -1c
.RI "void \fBbread\fP (void *destination, size_t dSize, const unsigned char *&buffer)"
.br
.RI "Buffer/Binary Read: "
.ti -1c
.RI "template<typename T > void \fBbread\fP (T &destination, const unsigned char *&buffer)"
.br
.RI "Templated version: determines the approprate number of bytes by calling 'sizeof(T)'\&. "
.ti -1c
.RI "void \fBbwrite\fP (const void *source, size_t sSize, unsigned char *&buffer)"
.br
.RI "Buffer/Binary Write: "
.ti -1c
.RI "template<typename T > void \fBbwrite\fP (const T &source, unsigned char *&buffer)"
.br
.RI "Templated version: determines the approprate number of bytes by calling 'sizeof(T)'\&. "
.ti -1c
.RI "\fBVector\fP \fBoperator*\fP (double k, const \fBVector\fP &v)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &out, const \fBVector\fP &v)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const double \fBE\fP = 2\&.71828182845904523536"
.br
.RI "Mathematical constant: Euler's Number\&. "
.ti -1c
.RI "const double \fBPI\fP = 3\&.14159265358979323846"
.br
.RI "Mathematical constant\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T > void udc::bread (T & destination, const unsigned char *& buffer)\fC [inline]\fP"

.PP
Templated version: determines the approprate number of bytes by calling 'sizeof(T)'\&. 
.SS "void udc::bread (void * destination, size_t dSize, const unsigned char *& buffer)\fC [inline]\fP"

.PP
Buffer/Binary Read: Reads the given number of bytes from the buffer and stores it into the destination, advancing the buffer pointer in the process\&. 
.SS "template<typename T > void udc::bwrite (const T & source, unsigned char *& buffer)\fC [inline]\fP"

.PP
Templated version: determines the approprate number of bytes by calling 'sizeof(T)'\&. 
.SS "void udc::bwrite (const void * source, size_t sSize, unsigned char *& buffer)\fC [inline]\fP"

.PP
Buffer/Binary Write: Writes the given number of bytes from the source and stores it into the buffer, advancing the buffer pointer in the process\&. 
.SS "double udc::cube (double x)\fC [inline]\fP"

.PP
cube a number fast 
.SS "\fBVector\fP udc::operator* (double k, const \fBVector\fP & v)"

.SS "ostream & udc::operator<< (ostream & out, const \fBMSD::Parameters\fP & p)"

.SS "ostream & udc::operator<< (ostream & out, const \fBMSD::Results\fP & r)"

.SS "ostream & udc::operator<< (ostream & out, const \fBVector\fP & v)"

.SS "istream & udc::operator>> (istream & in, \fBudc::Vector\fP & v)"

.SS "template<typename T > T udc::parseline (const string & str)"

.SS "template<typename T > T udc::parseline (istream & in)"

.SS "template<> string udc::parseline (istream & in)"

.SS "template<> istringstream udc::parseline (istream & in)"

.SS "template<> void udc::parseline (istream & in)"

.SS "\fBMSD::MolProto\fP udc::readMMT (istream & src)"

.PP
Parses MMT file data from the given text istream, and saves it as a \fBMSD::MolProto\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP The source data (or file) as a text stream\&. 
.RE
.PP
\fBReturns\fP
.RS 4
\fBMSD::MolProto\fP 
.RE
.PP

.SS "double udc::sq (double x)\fC [inline]\fP"

.PP
square a number fast 
.SH "Variable Documentation"
.PP 
.SS "const double udc::E = 2\&.71828182845904523536"

.PP
Mathematical constant: Euler's Number\&. 
.SS "const double udc::PI = 3\&.14159265358979323846"

.PP
Mathematical constant\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for MSD from the source code\&.
