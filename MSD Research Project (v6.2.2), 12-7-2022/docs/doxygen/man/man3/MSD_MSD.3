.TH "MSD.MSD" 3 "Wed Nov 30 2022" "Version 6.2.1" "MSD" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MSD.MSD
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Iterator\fP"
.br
.ti -1c
.RI "class \fBParameters\fP"
.br
.ti -1c
.RI "class \fBResults\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP (self, \fBwidth\fP, \fBheight\fP, \fBdepth\fP, Optional[\fBMolProto\fP] \fBmolProto\fP=None, Optional[c_void_p] molType=None, \fBmolPosL\fP=None, \fBmolPosR\fP=None, \fBtopL\fP=None, \fBbottomL\fP=None, \fBfrontR\fP=None, \fBbackR\fP=None, \fBmolPos\fP=None, molLen=None, heightL=None, depthR=None)"
.br
.ti -1c
.RI "def \fB__del__\fP (self)"
.br
.ti -1c
.RI "def \fBrecord\fP (self)"
.br
.ti -1c
.RI "def \fBrecord\fP (self, record)"
.br
.ti -1c
.RI "def \fBgetParameters\fP (self)"
.br
.ti -1c
.RI "def \fBsetParameters\fP (self, \fBparameters\fP)"
.br
.ti -1c
.RI "def \fBgetResults\fP (self)"
.br
.ti -1c
.RI "def \fBset_kT\fP (self, \fBkT\fP)"
.br
.ti -1c
.RI "def \fBsetB\fP (self, \fBB\fP)"
.br
.ti -1c
.RI "def \fBgetMolProto\fP (self)"
.br
.ti -1c
.RI "def \fBsetMolProto\fP (self, \fBMolecule\fP mol)"
.br
.ti -1c
.RI "def \fBsetMolParameters\fP (self, nodeParams=\fBMolecule\&.NodeParameters\fP(), edgeParams=\fBMolecule\&.EdgeParameters\fP())"
.br
.ti -1c
.RI "def \fBgetSpin\fP (self, x, y=None, z=None)"
.br
.ti -1c
.RI "def \fBgetFlux\fP (self, x, y=None, z=None)"
.br
.ti -1c
.RI "def \fBgetLocalM\fP (self, x, y=None, z=None)"
.br
.ti -1c
.RI "def \fBsetSpin\fP (self, x, y=None, z=None, spin=None)"
.br
.RI "Version 1: setSpin(a, spin) Version 2: setSpin(x, y, z, spin) "
.ti -1c
.RI "def \fBsetFlux\fP (self, x, y=None, z=None, flux=None)"
.br
.RI "Version 1: setFlux(a, flux) Version 2: setFlux(x, y, z, flux) "
.ti -1c
.RI "def \fBsetLocalM\fP (self, x, y=None, z=None, spin=None, flux=None)"
.br
.RI "Version 1: setLocalM(a, spin, flux) Version 2: setLocalM(x, y, z, spin, flux) "
.ti -1c
.RI "def \fB__getitem__\fP (self, idx)"
.br
.ti -1c
.RI "def \fB__setitem__\fP (self, idx, localM)"
.br
.ti -1c
.RI "def \fBreinitialize\fP (self, reseed=True)"
.br
.ti -1c
.RI "def \fBrandomize\fP (self, reseed=True)"
.br
.ti -1c
.RI "def \fBmetropolis\fP (self, N, freq=None)"
.br
.ti -1c
.RI "def \fB__iter__\fP (self)"
.br
.ti -1c
.RI "def \fB__reversed__\fP (self)"
.br
.ti -1c
.RI "def \fB__len__\fP (self)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "\fBMolProto\fP = \fBMolecule\fP"
.br
.ti -1c
.RI "\fBLINEAR_MOL\fP = c_void_p\&.in_dll(\fBmsd_clib\fP, 'LINEAR_MOL')"
.br
.ti -1c
.RI "\fBCIRCULAR_MOL\fP = c_void_p\&.in_dll(\fBmsd_clib\fP, 'CIRCULAR_MOL')"
.br
.ti -1c
.RI "\fBUP_DOWN_MODEL\fP = c_void_p\&.in_dll(\fBmsd_clib\fP, 'UP_DOWN_MODEL')"
.br
.ti -1c
.RI "\fBCONTINUOUS_SPIN_MODEL\fP = c_void_p\&.in_dll(\fBmsd_clib\fP, 'CONTINUOUS_SPIN_MODEL')"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBflippingAlgorithm\fP = property(fset = lambda self, algo: msd_clib\&.setFlippingAlgorithm(self\&._msd, algo))"
.br
.ti -1c
.RI "\fBparameters\fP = property(fset = \fBsetParameters\fP)"
.br
.ti -1c
.RI "\fBresults\fP = property(fget = \fBgetResults\fP)"
.br
.ti -1c
.RI "\fBkT\fP = property(fset = \fBset_kT\fP)"
.br
.ti -1c
.RI "\fBB\fP = property(fset = \fBsetB\fP)"
.br
.ti -1c
.RI "\fBmolProto\fP = property(fset = \fBsetMolProto\fP)"
.br
.ti -1c
.RI "\fBmolParameters\fP = property(fset = lambda self, params: self\&.setMolParameters(*params))"
.br
.ti -1c
.RI "\fBn\fP = property(fget = lambda self: msd_clib\&.getN(self\&._msd))"
.br
.ti -1c
.RI "\fBnL\fP = property(fget = lambda self: msd_clib\&.getNL(self\&._msd))"
.br
.ti -1c
.RI "\fBnR\fP = property(fget = lambda self: msd_clib\&.getNR(self\&._msd))"
.br
.ti -1c
.RI "\fBn_m\fP = property(fget = lambda self: msd_clib\&.getNm(self\&._msd))"
.br
.ti -1c
.RI "\fBn_mL\fP = property(fget = lambda self: msd_clib\&.getNmL(self\&._msd))"
.br
.ti -1c
.RI "\fBn_mR\fP = property(fget = lambda self: msd_clib\&.getNmR(self\&._msd))"
.br
.ti -1c
.RI "\fBnLR\fP = property(fget = lambda self: msd_clib\&.getNLR(self\&._msd))"
.br
.ti -1c
.RI "\fBwidth\fP = property(fget = lambda self: msd_clib\&.getWidth(self\&._msd))"
.br
.ti -1c
.RI "\fBheight\fP = property(fget = lambda self: msd_clib\&.getHeight(self\&._msd))"
.br
.ti -1c
.RI "\fBdepth\fP = property(fget = lambda self: msd_clib\&.getDepth(self\&._msd))"
.br
.ti -1c
.RI "\fBdimensions\fP = property(fget = lambda self : _tupler(msd_clib\&.getDimensions, self\&._msd, 3 * [c_uint]))"
.br
.ti -1c
.RI "\fBmolPosL\fP = property(fget = lambda self: msd_clib\&.getMolPosL(self\&._msd))"
.br
.ti -1c
.RI "\fBmolPosR\fP = property(fget = lambda self: msd_clib\&.getMolPosR(self\&._msd))"
.br
.ti -1c
.RI "\fBmolPos\fP = property(fget = lambda self: _tupler(msd_clib\&.getMolPos, self\&._msd, 2 * [c_uint]))"
.br
.ti -1c
.RI "\fBtopL\fP = property(fget = lambda self: msd_clib\&.getTopL(self\&._msd))"
.br
.ti -1c
.RI "\fBbottomL\fP = property(fget = lambda self: msd_clib\&.getBottomL(self\&._msd))"
.br
.ti -1c
.RI "\fBfrontR\fP = property(fget = lambda self: msd_clib\&.getFrontR(self\&._msd))"
.br
.ti -1c
.RI "\fBbackR\fP = property(fget = lambda self: msd_clib\&.getBackR(self\&._msd))"
.br
.ti -1c
.RI "\fBinnerBounds\fP = property(fget = lambda self: _tupler(msd_clib\&.getInnerBounds, self\&._msd, 4 * [c_uint]))"
.br
.ti -1c
.RI "\fBFM_L_exists\fP = property(fget = lambda self: msd_clib\&.getFM_L_exists(self\&._msd))"
.br
.ti -1c
.RI "\fBFM_R_exists\fP = property(fget = lambda self: msd_clib\&.getFM_R_exists(self\&._msd))"
.br
.ti -1c
.RI "\fBmol_exists\fP = property(fget = lambda self: msd_clib\&.getMol_exists(self\&._msd))"
.br
.ti -1c
.RI "\fBregions\fP = property(fget = lambda self: _tupler(msd_clib\&.getRegions, self\&._msd, 3 * [c_bool]))"
.br
.ti -1c
.RI "\fBseed\fP"
.br
.ti -1c
.RI "\fBspecificHeat\fP = property(fget = lambda self : msd_clib\&.specificHeat(self\&._msd))"
.br
.ti -1c
.RI "\fBspecificHeat_L\fP = property(fget = lambda self : msd_clib\&.specificHeat_L(self\&._msd))"
.br
.ti -1c
.RI "\fBspecificHeat_R\fP = property(fget = lambda self : msd_clib\&.specificHeat_R(self\&._msd))"
.br
.ti -1c
.RI "\fBspecificHeat_m\fP = property(fget = lambda self : msd_clib\&.specificHeat_m(self\&._msd))"
.br
.ti -1c
.RI "\fBspecificHeat_mL\fP = property(fget = lambda self : msd_clib\&.specificHeat_mL(self\&._msd))"
.br
.ti -1c
.RI "\fBspecificHeat_mR\fP = property(fget = lambda self : msd_clib\&.specificHeat_mR(self\&._msd))"
.br
.ti -1c
.RI "\fBspecificHeat_LR\fP = property(fget = lambda self : msd_clib\&.specificHeat_LR(self\&._msd))"
.br
.ti -1c
.RI "\fBmagneticSusceptibility\fP = property(fget = lambda self: msd_clib\&.magneticSusceptibility(self\&._msd))"
.br
.ti -1c
.RI "\fBmagneticSusceptibility_L\fP = property(fget = lambda self: msd_clib\&.magneticSusceptibility_L(self\&._msd))"
.br
.ti -1c
.RI "\fBmagneticSusceptibility_R\fP = property(fget = lambda self: msd_clib\&.magneticSusceptibility_R(self\&._msd))"
.br
.ti -1c
.RI "\fBmagneticSusceptibility_m\fP = property(fget = lambda self: msd_clib\&.magneticSusceptibility_m(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanM\fP = property(fget = lambda self : msd_clib\&.meanM(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanML\fP = property(fget = lambda self : msd_clib\&.meanML(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMR\fP = property(fget = lambda self : msd_clib\&.meanMR(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMm\fP = property(fget = lambda self : msd_clib\&.meanMm(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMS\fP = property(fget = lambda self : msd_clib\&.meanMS(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMSL\fP = property(fget = lambda self : msd_clib\&.meanMSL(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMSR\fP = property(fget = lambda self : msd_clib\&.meanMSR(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMSm\fP = property(fget = lambda self : msd_clib\&.meanMSm(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMF\fP = property(fget = lambda self : msd_clib\&.meanMF(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMFL\fP = property(fget = lambda self : msd_clib\&.meanMFL(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMFR\fP = property(fget = lambda self : msd_clib\&.meanMFR(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanMFm\fP = property(fget = lambda self : msd_clib\&.meanMFm(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanU\fP = property(fget = lambda self : msd_clib\&.meanU(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanUL\fP = property(fget = lambda self : msd_clib\&.meanUL(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanUR\fP = property(fget = lambda self : msd_clib\&.meanUR(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanUm\fP = property(fget = lambda self : msd_clib\&.meanUm(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanUmL\fP = property(fget = lambda self : msd_clib\&.meanUmL(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanUmR\fP = property(fget = lambda self : msd_clib\&.meanUmR(self\&._msd))"
.br
.ti -1c
.RI "\fBmeanULR\fP = property(fget = lambda self : msd_clib\&.meanULR(self\&._msd))"
.br
.ti -1c
.RI "\fBbegin\fP = property(fget = lambda self: \fBMSD\&._Iterator\fP(msd = self))"
.br
.ti -1c
.RI "\fBend\fP = property(fget = lambda self: \fBMSD\&._Iterator\fP(msd = self, start = (self\&._end, len(self))))"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def MSD\&.MSD\&.__init__ ( self,  width,  height,  depth, Optional[\fBMolProto\fP]  molProto = \fCNone\fP, Optional[c_void_p]  molType = \fCNone\fP,  molPosL = \fCNone\fP,  molPosR = \fCNone\fP,  topL = \fCNone\fP,  bottomL = \fCNone\fP,  frontR = \fCNone\fP,  backR = \fCNone\fP,  molPos = \fCNone\fP,  molLen = \fCNone\fP,  heightL = \fCNone\fP,  depthR = \fCNone\fP)"

.SS "def MSD\&.MSD\&.__del__ ( self)"

.SH "Member Function Documentation"
.PP 
.SS "def MSD\&.MSD\&.__getitem__ ( self,  idx)"

.SS "def MSD\&.MSD\&.__iter__ ( self)"

.SS "def MSD\&.MSD\&.__len__ ( self)"

.SS "def MSD\&.MSD\&.__reversed__ ( self)"

.SS "def MSD\&.MSD\&.__setitem__ ( self,  idx,  localM)"

.SS "def MSD\&.MSD\&.getFlux ( self,  x,  y = \fCNone\fP,  z = \fCNone\fP)"

.SS "def MSD\&.MSD\&.getLocalM ( self,  x,  y = \fCNone\fP,  z = \fCNone\fP)"

.SS "def MSD\&.MSD\&.getMolProto ( self)"

.SS "def MSD\&.MSD\&.getParameters ( self)"

.SS "def MSD\&.MSD\&.getResults ( self)"

.SS "def MSD\&.MSD\&.getSpin ( self,  x,  y = \fCNone\fP,  z = \fCNone\fP)"

.SS "def MSD\&.MSD\&.metropolis ( self,  N,  freq = \fCNone\fP)"

.SS "def MSD\&.MSD\&.randomize ( self,  reseed = \fCTrue\fP)"

.SS "def MSD\&.MSD\&.record ( self)"

.SS "def MSD\&.MSD\&.record ( self,  record)"

.SS "def MSD\&.MSD\&.reinitialize ( self,  reseed = \fCTrue\fP)"

.SS "def MSD\&.MSD\&.set_kT ( self,  kT)"

.SS "def MSD\&.MSD\&.setB ( self,  B)"

.SS "def MSD\&.MSD\&.setFlux ( self,  x,  y = \fCNone\fP,  z = \fCNone\fP,  flux = \fCNone\fP)"

.PP
Version 1: setFlux(a, flux) Version 2: setFlux(x, y, z, flux) Note: flux can be passed as a positional argument or a named argument 
.SS "def MSD\&.MSD\&.setLocalM ( self,  x,  y = \fCNone\fP,  z = \fCNone\fP,  spin = \fCNone\fP,  flux = \fCNone\fP)"

.PP
Version 1: setLocalM(a, spin, flux) Version 2: setLocalM(x, y, z, spin, flux) Note: spin and flux can be passed as positional arguments or named arguments 
.SS "def MSD\&.MSD\&.setMolParameters ( self,  nodeParams = \fC\fBMolecule\&.NodeParameters\fP()\fP,  edgeParams = \fC\fBMolecule\&.EdgeParameters\fP()\fP)"

.SS "def MSD\&.MSD\&.setMolProto ( self, \fBMolecule\fP mol)"

.SS "def MSD\&.MSD\&.setParameters ( self,  parameters)"

.SS "def MSD\&.MSD\&.setSpin ( self,  x,  y = \fCNone\fP,  z = \fCNone\fP,  spin = \fCNone\fP)"

.PP
Version 1: setSpin(a, spin) Version 2: setSpin(x, y, z, spin) Note: spin can be passed as a positional argument or a named argument 
.SH "Member Data Documentation"
.PP 
.SS "MSD\&.MSD\&.CIRCULAR_MOL = c_void_p\&.in_dll(\fBmsd_clib\fP, 'CIRCULAR_MOL')\fC [static]\fP"

.SS "MSD\&.MSD\&.CONTINUOUS_SPIN_MODEL = c_void_p\&.in_dll(\fBmsd_clib\fP, 'CONTINUOUS_SPIN_MODEL')\fC [static]\fP"

.SS "MSD\&.MSD\&.LINEAR_MOL = c_void_p\&.in_dll(\fBmsd_clib\fP, 'LINEAR_MOL')\fC [static]\fP"

.SS "MSD\&.MSD\&.MolProto = \fBMolecule\fP\fC [static]\fP"

.SS "MSD\&.MSD\&.UP_DOWN_MODEL = c_void_p\&.in_dll(\fBmsd_clib\fP, 'UP_DOWN_MODEL')\fC [static]\fP"

.SH "Property Documentation"
.PP 
.SS "MSD\&.MSD\&.B = property(fset = \fBsetB\fP)\fC [static]\fP"

.SS "MSD\&.MSD\&.backR = property(fget = lambda self: msd_clib\&.getBackR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.begin = property(fget = lambda self: \fBMSD\&._Iterator\fP(msd = self))\fC [static]\fP"

.SS "MSD\&.MSD\&.bottomL = property(fget = lambda self: msd_clib\&.getBottomL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.depth = property(fget = lambda self: msd_clib\&.getDepth(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.dimensions = property(fget = lambda self : _tupler(msd_clib\&.getDimensions, self\&._msd, 3 * [c_uint]))\fC [static]\fP"

.SS "MSD\&.MSD\&.end = property(fget = lambda self: \fBMSD\&._Iterator\fP(msd = self, start = (self\&._end, len(self))))\fC [static]\fP"

.SS "MSD\&.MSD\&.flippingAlgorithm = property(fset = lambda self, algo: msd_clib\&.setFlippingAlgorithm(self\&._msd, algo))\fC [static]\fP"

.SS "MSD\&.MSD\&.FM_L_exists = property(fget = lambda self: msd_clib\&.getFM_L_exists(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.FM_R_exists = property(fget = lambda self: msd_clib\&.getFM_R_exists(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.frontR = property(fget = lambda self: msd_clib\&.getFrontR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.height = property(fget = lambda self: msd_clib\&.getHeight(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.innerBounds = property(fget = lambda self: _tupler(msd_clib\&.getInnerBounds, self\&._msd, 4 * [c_uint]))\fC [static]\fP"

.SS "MSD\&.MSD\&.kT = property(fset = \fBset_kT\fP)\fC [static]\fP"

.SS "MSD\&.MSD\&.magneticSusceptibility = property(fget = lambda self: msd_clib\&.magneticSusceptibility(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.magneticSusceptibility_L = property(fget = lambda self: msd_clib\&.magneticSusceptibility_L(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.magneticSusceptibility_m = property(fget = lambda self: msd_clib\&.magneticSusceptibility_m(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.magneticSusceptibility_R = property(fget = lambda self: msd_clib\&.magneticSusceptibility_R(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanM = property(fget = lambda self : msd_clib\&.meanM(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMF = property(fget = lambda self : msd_clib\&.meanMF(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMFL = property(fget = lambda self : msd_clib\&.meanMFL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMFm = property(fget = lambda self : msd_clib\&.meanMFm(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMFR = property(fget = lambda self : msd_clib\&.meanMFR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanML = property(fget = lambda self : msd_clib\&.meanML(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMm = property(fget = lambda self : msd_clib\&.meanMm(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMR = property(fget = lambda self : msd_clib\&.meanMR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMS = property(fget = lambda self : msd_clib\&.meanMS(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMSL = property(fget = lambda self : msd_clib\&.meanMSL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMSm = property(fget = lambda self : msd_clib\&.meanMSm(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanMSR = property(fget = lambda self : msd_clib\&.meanMSR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanU = property(fget = lambda self : msd_clib\&.meanU(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanUL = property(fget = lambda self : msd_clib\&.meanUL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanULR = property(fget = lambda self : msd_clib\&.meanULR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanUm = property(fget = lambda self : msd_clib\&.meanUm(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanUmL = property(fget = lambda self : msd_clib\&.meanUmL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanUmR = property(fget = lambda self : msd_clib\&.meanUmR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.meanUR = property(fget = lambda self : msd_clib\&.meanUR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.mol_exists = property(fget = lambda self: msd_clib\&.getMol_exists(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.molParameters = property(fset = lambda self, params: self\&.setMolParameters(*params))\fC [static]\fP"

.SS "MSD\&.MSD\&.molPos = property(fget = lambda self: _tupler(msd_clib\&.getMolPos, self\&._msd, 2 * [c_uint]))\fC [static]\fP"

.SS "MSD\&.MSD\&.molPosL = property(fget = lambda self: msd_clib\&.getMolPosL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.molPosR = property(fget = lambda self: msd_clib\&.getMolPosR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.molProto = property(fset = \fBsetMolProto\fP)\fC [static]\fP"

.SS "MSD\&.MSD\&.n = property(fget = lambda self: msd_clib\&.getN(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.n_m = property(fget = lambda self: msd_clib\&.getNm(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.n_mL = property(fget = lambda self: msd_clib\&.getNmL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.n_mR = property(fget = lambda self: msd_clib\&.getNmR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.nL = property(fget = lambda self: msd_clib\&.getNL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.nLR = property(fget = lambda self: msd_clib\&.getNLR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.nR = property(fget = lambda self: msd_clib\&.getNR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.parameters = property(fset = \fBsetParameters\fP)\fC [static]\fP"

.SS "MSD\&.MSD\&.regions = property(fget = lambda self: _tupler(msd_clib\&.getRegions, self\&._msd, 3 * [c_bool]))\fC [static]\fP"

.SS "MSD\&.MSD\&.results = property(fget = \fBgetResults\fP)\fC [static]\fP"

.SS "MSD\&.MSD\&.seed\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=  property(
        fget = lambda self : msd_clib\&.getSeed(self\&._msd),
        fset = lambda self, seed: msd_clib\&.setSeed(self\&._msd, seed)
        )
.fi
.SS "MSD\&.MSD\&.specificHeat = property(fget = lambda self : msd_clib\&.specificHeat(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.specificHeat_L = property(fget = lambda self : msd_clib\&.specificHeat_L(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.specificHeat_LR = property(fget = lambda self : msd_clib\&.specificHeat_LR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.specificHeat_m = property(fget = lambda self : msd_clib\&.specificHeat_m(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.specificHeat_mL = property(fget = lambda self : msd_clib\&.specificHeat_mL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.specificHeat_mR = property(fget = lambda self : msd_clib\&.specificHeat_mR(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.specificHeat_R = property(fget = lambda self : msd_clib\&.specificHeat_R(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.topL = property(fget = lambda self: msd_clib\&.getTopL(self\&._msd))\fC [static]\fP"

.SS "MSD\&.MSD\&.width = property(fget = lambda self: msd_clib\&.getWidth(self\&._msd))\fC [static]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for MSD from the source code\&.
