<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__m_s_d_8h_source" xml:lang="en-US">
<title>MSD.h</title>
<indexterm><primary>C:/Users/mathh/GitHub/Molecular-Spintronics-Research-Project/MSD Research Project - Latest Development Version/src/MSD.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
12 <emphasis role="preprocessor">#ifndef&#32;UDC_MSD</emphasis>
13 <emphasis role="preprocessor">#define&#32;UDC_MSD</emphasis>
14 
15 <emphasis role="preprocessor">#define&#32;UDC_MSD_VERSION&#32;&quot;6.2&quot;</emphasis>
16 
17 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
23 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
24 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
25 <emphasis role="preprocessor">#include&#32;&lt;random&gt;</emphasis>
26 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
27 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
28 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
29 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__vector_8h">Vector.h</link>&quot;</emphasis>
30 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_udc_8h">udc.h</link>&quot;</emphasis>
31 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__sparse_array_8h">SparseArray.h</link>&quot;</emphasis>
32 
33 
34 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceudc">udc</link>&#32;{
35 
36 <emphasis role="keyword">using&#32;</emphasis>std::bind;
37 <emphasis role="keyword">using&#32;</emphasis>std::function;
38 <emphasis role="keyword">using&#32;</emphasis>std::invalid_argument;
39 <emphasis role="keyword">using&#32;</emphasis>std::mt19937_64;
40 <emphasis role="keyword">using&#32;</emphasis>std::istream;
41 <emphasis role="keyword">using&#32;</emphasis>std::ostream;
42 <emphasis role="keyword">using&#32;</emphasis>std::streampos;
43 <emphasis role="keyword">using&#32;</emphasis>std::out_of_range;
44 <emphasis role="keyword">using&#32;</emphasis>std::ref;
45 <emphasis role="keyword">using&#32;</emphasis>std::string;
46 <emphasis role="keyword">using&#32;</emphasis>std::uniform_int_distribution;
47 <emphasis role="keyword">using&#32;</emphasis>std::uniform_real_distribution;
48 <emphasis role="keyword">using&#32;</emphasis>std::shared_ptr;
49 <emphasis role="keyword">using&#32;</emphasis>std::exception;
50 <emphasis role="keyword">using&#32;</emphasis>std::strcmp;
51 
52 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespaceudc_1aa4b4d55516f1e34de5dc8b228f160597">udc::E</link>;
53 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespaceudc_1a1757f9fc50446243658974977dd95e7c">udc::PI</link>;
54 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">udc::sq</link>;
55 <emphasis role="keyword">using&#32;</emphasis><link linkend="_classudc_1_1_vector">udc::Vector</link>;
56 <emphasis role="keyword">using&#32;</emphasis><link linkend="_classudc_1_1_sparse_array">udc::SparseArray</link>;
57 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">udc::bread</link>;
58 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">udc::bwrite</link>;
59 
60 
66 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule">Molecule</link>&#32;{
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_namespace_m_s_d">MSD</link>;
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_node_iterable">NodeIterable</link>;
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>;
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>;
72 
73 &#32;<emphasis role="keyword">public</emphasis>:
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nearest-neighbor&#32;parameters</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1a888be7fafaea5cedfc9f59ce6291a5c8">Jm</link>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;spin&#32;*&#32;spin</emphasis>
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1afe9b27d63588d6f6066137961556274b">Je1m</link>;&#32;&#32;<emphasis role="comment">//&#32;spin&#32;*&#32;flux</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1a8e66fedceee8f6cbd949e2e39f68cb38">Jeem</link>;&#32;&#32;<emphasis role="comment">//&#32;flux&#32;*&#32;flux</emphasis>
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1ae10a09e2ff621f6427be2bb5a69ba595">bm</link>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Biquadratic&#32;Coupling</emphasis>
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1a7c1edcd9071395e3e894f12c03a2a8b2">Dm</link>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dzyaloshinskii-Moriya&#32;interaction&#32;(i.e.&#32;Skyrmions)</emphasis>
84 
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1afdea45614d2c2dafb5aedc4cecface74">EdgeParameters</link>();
86 &#32;&#32;&#32;&#32;};
87 
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters_1aa7b74cbea7b3cba87f57ad48232a3786">Sm</link>,&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters_1a0a56503fd7eb794ba63f04a1ec25238e">Fm</link>;&#32;&#32;<emphasis role="comment">//&#32;spin&#32;and&#32;spin&#32;fluctuation&#32;magnetude&#32;scalars</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters_1a297971abdfd713f536d590ef8feb7fbc">Je0m</link>;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;spin&#32;*&#32;flux&#32;(local)</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters_1a821f45a250dc5e42bd03ab91e377605f">Am</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Anisotropy</emphasis>
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters_1a4864f595737510a02a6cda276b3d8f33">NodeParameters</link>();
95 &#32;&#32;&#32;&#32;};
96 
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_deserialization_exception">DeserializationException</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classudc_1_1_u_d_c_exception">UDCException</link>&#32;{
98 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_deserialization_exception_1a48c7fdb254d2d146fcfa30ec5f5388ef">DeserializationException</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*message)&#32;:&#32;<link linkend="_classudc_1_1_u_d_c_exception">UDCException</link>(message)&#32;{}
100 &#32;&#32;&#32;&#32;};
101 
102 &#32;<emphasis role="keyword">private</emphasis>:
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Node;
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Edge;
105 
106 
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Edge&#32;{
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a1f271f489f903c0f87a909221e674a63">edgeIndex</link>,&#32;nodeIndex,&#32;selfIndex;
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;direction;
125 
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Edge(<emphasis role="keywordtype">size_t</emphasis>&#32;edgeIndex,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nodeIndex,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;selfIndex,&#32;<emphasis role="keywordtype">double</emphasis>&#32;direction);
127 &#32;&#32;&#32;&#32;};
128 
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Node&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__m_s_d-export_8cpp_1a3ff276dcf7d10876c4783799c899bfd9">NodeParameters</link>&#32;parameters;
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Edge&gt;&#32;neighbors;
132 
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Node(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a3ff276dcf7d10876c4783799c899bfd9">NodeParameters</link>&#32;&amp;parameters&#32;=&#32;<link linkend="__m_s_d-export_8cpp_1a3ff276dcf7d10876c4783799c899bfd9">NodeParameters</link>());
134 &#32;&#32;&#32;&#32;};
135 
136 &#32;<emphasis role="comment">//&#32;-----&#32;Molecule&#32;(prototype)&#32;fields&#32;and&#32;methods&#32;-----</emphasis>
137 &#32;<emphasis role="keyword">private</emphasis>:
138 &#32;&#32;&#32;&#32;std::vector&lt;EdgeParameters&gt;&#32;edgeParameters;&#32;&#32;&#32;<emphasis role="comment">//&#32;array&#32;of&#32;edges</emphasis>
139 &#32;&#32;&#32;&#32;std::vector&lt;Node&gt;&#32;nodes;&#32;&#32;<emphasis role="comment">//&#32;array&#32;of&#32;nodes&#32;(e.g.&#32;atoms)&#32;making&#32;up&#32;this&#32;Molecule</emphasis>
140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;leftLead,&#32;rightLead;&#32;&#32;<emphasis role="comment">//&#32;the&#32;position&#32;of&#32;the&#32;nodes&#32;connected&#32;to&#32;the&#32;left&#32;FM&#32;and&#32;right&#32;FM,&#32;respectively.</emphasis>
141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;sSize;&#32;&#32;<emphasis role="comment">//&#32;size&#32;of&#32;buffer&#32;(bytes)&#32;needed&#32;for&#32;serialization&#32;or&#32;deserizalization</emphasis>
142 
143 &#32;<emphasis role="keyword">public</emphasis>:
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a5d2f40b3d48330e1345c68b8b05a18ad">HEADER</link>;&#32;&#32;<emphasis role="comment">//&#32;safety&#32;header&#32;for&#32;(de)serizlization</emphasis>
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a5c178c3e3abe344b6019877b4e877dfa">HEADER_SIZE</link>;&#32;&#32;<emphasis role="comment">//&#32;size&#32;of&#32;HEADER&#32;string&#32;(not&#32;including&#32;null-terminator,&#32;&apos;\0&apos;):&#32;strlen(HEADER)</emphasis>
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a1b9d46a0051e4ddbb66f8b0322844dda">NOT_FOUND</link>&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;int)&#32;-1;&#32;&#32;<emphasis role="comment">//&#32;-1&#32;will&#32;be&#32;the&#32;maximum&#32;unsigned&#32;int</emphasis>
147 
148 &#32;<emphasis role="keyword">public</emphasis>:
153 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1a4a38e660030e37a46905b99fb87be886">Molecule</link>();
154 
162 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1a4a38e660030e37a46905b99fb87be886">Molecule</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>&#32;&amp;nodeParams&#32;=&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>());
163 
164 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Molecule(const&#32;Molecule&#32;&amp;other);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;use&#32;default&#32;copy-constructor</emphasis>
165 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;operator=(const&#32;Molecule&#32;&amp;other);&#32;&#32;//&#32;use&#32;default&#32;assignment&#32;operator</emphasis>
166 
167 &#32;<emphasis role="keyword">public</emphasis>:
168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a682c1855e517d0c2b68118b114d31d15">serialize</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer)&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;store&#32;this&#32;Molecule&#32;object&#32;into&#32;the&#32;given&#32;buffer</emphasis>
169 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ac8c39d99187f0dae0b0fe7ef7e935a0d">deserialize</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer);&#32;&#32;<emphasis role="comment">//&#32;reconstruct&#32;this&#32;Molecule&#32;object&#32;using&#32;the&#32;given&#32;buffer</emphasis>
170 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a9fc6cbb7d10939477c3abcefd319ae54">serializationSize</link>()&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;the&#32;size&#32;needed&#32;(in&#32;bytes)&#32;to&#32;serialize&#32;this&#32;Molecule&#32;object</emphasis>
171 
172 &#32;&#32;&#32;&#32;istream&amp;&#32;<link linkend="_classudc_1_1_molecule_1aedb314ce8b1dff4ecf156d6e739d170f">read</link>(istream&#32;&amp;in);&#32;&#32;<emphasis role="comment">//&#32;reads&#32;the&#32;serialized&#32;data&#32;from&#32;the&#32;given&#32;binary&#32;istream</emphasis>
173 &#32;&#32;&#32;&#32;ostream&amp;&#32;<link linkend="_classudc_1_1_molecule_1a59ea4534de4d263562db48eac48a68cc">write</link>(ostream&#32;&amp;out)&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;writes&#32;the&#32;serialized&#32;data&#32;to&#32;the&#32;given&#32;binary&#32;ostream</emphasis>
174 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;<link linkend="_classudc_1_1_molecule_1a97742a892262f853a7ec68d982d68fae">load</link>(istream&#32;&amp;in);&#32;&#32;<emphasis role="comment">//&#32;same&#32;as&#32;read,&#32;but&#32;constructs&#32;and&#32;returns&#32;a&#32;new&#32;Molecule&#32;(MSD::MolProto)&#32;object</emphasis>
175 
179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ab18585360b5c1577f6be8cc1f565b260">createNode</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>&#32;&amp;parameters&#32;=&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>());
180 
185 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>()&#32;<emphasis role="keyword">const</emphasis>;
186 
194 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ae1411a791a83503073a9dc8a7b1d3b33">connectNodes</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nodeA,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nodeB,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>&#32;&amp;parameters&#32;=&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>());
195 
200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a41ffa48f091303c3178c8e783cc3142e">edgeIndex</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nodeA,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nodeB)&#32;<emphasis role="keyword">const</emphasis>;
201 
202 &#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>&#32;<link linkend="_classudc_1_1_molecule_1a012b0e0a805476ae9e80673b9070db86">getEdgeParameters</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;<emphasis role="keyword">const</emphasis>;
203 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a303bb5e1cc934255220e58949e345065">setEdgeParameters</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>&#32;&amp;p);
204 &#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>&#32;<link linkend="_classudc_1_1_molecule_1aee4baa13cfc0b0584ec8e2c5000a76be">getNodeParameters</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;<emphasis role="keyword">const</emphasis>;
205 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ad13bc013a1031b8379ee7f134ce4724e">setNodeParameters</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>&#32;&amp;p);
206 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a401ed0509649570cc636b5a08735cbd6">setAllParameters</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">Molecule::NodeParameters</link>&#32;&amp;nodeParams,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">Molecule::EdgeParameters</link>&#32;&amp;edgeParams);
207 
208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a055eb97e7305e44ebb8a0d22a23f6752">setLeftLead</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;node);
209 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a549536b6815dd4ffcedb3ab3895a064f">setRightLead</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;node);
210 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a57552dd57e092b3d7bc5e2e13e2a419a">setLeads</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;left,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;right);
211 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ab2718d472f48420e4ae77827c2753f9a">getLeftLead</link>()&#32;<emphasis role="keyword">const</emphasis>;
212 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a09895cda60e964b18e0c38384e5f3a89">getRightLead</link>()&#32;<emphasis role="keyword">const</emphasis>;
213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a8eacb4f3318b2d68c571cafb56a956ba">getLeads</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;left,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;right)&#32;<emphasis role="keyword">const</emphasis>;
214 
215 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterators</emphasis>
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_node_iterable">NodeIterable</link>;
217 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>;
218 
219 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable">NodeIterable</link>&#32;<link linkend="_classudc_1_1_molecule_1a57560cc5b9d4d5971c16566f77e2e279">getNodes</link>()&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;iterates&#32;over&#32;all&#32;nodes&#32;in&#32;the&#32;Molecule&#32;</emphasis>
220 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>&#32;<link linkend="_classudc_1_1_molecule_1afc512c8f695a33e8918bd20912beb8cd">getEdges</link>()&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;iterates&#32;over&#32;all&#32;the&#32;edges&#32;in&#32;the&#32;entire&#32;Molecule</emphasis>
221 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>&#32;<link linkend="_classudc_1_1_molecule_1a48c40b90cb716c63b0a3c6b2a39d4805">getAdjacencyList</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nodeIndex)&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;iterates&#32;over&#32;the&#32;edges&#32;(i.e.&#32;adjacency&#32;list)&#32;of&#32;a&#32;given&#32;node</emphasis>
222 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;changes&#32;to&#32;the&#32;molecule&#32;invalidate&#32;all&#32;previously&#32;constructed&#32;Iterable&#32;or&#32;Iterator&#32;objects</emphasis>
223 
224 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_node_iterable">NodeIterable</link>;
226 
227 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable">NodeIterable</link>&#32;&amp;iterable;
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx;
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable">NodeIterable</link>&#32;&amp;nodes,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx);
232 &#32;&#32;&#32;&#32;
233 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1add4653d895f324444b7d295a35e6ca00">getIndex</link>()&#32;<emphasis role="keyword">const</emphasis>;
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a04119ad80998be7ebd7207d360e638c8">getParameters</link>()&#32;<emphasis role="keyword">const</emphasis>;
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a0acdd22957b069b97f55d993aa6e5829">getNeighbors</link>()&#32;<emphasis role="keyword">const</emphasis>;
237 
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a90229c78c03c1801f453149a9937bde3">operator*</link>()&#32;<emphasis role="keyword">const</emphasis>;
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1ac47692c114579ddc642d0b1c52b52131">operator[]</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;int()&#32;<emphasis role="keyword">const</emphasis>;
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a7e91c5498ef57076c1ae1fab987aad5d">operator++</link>();
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a7e91c5498ef57076c1ae1fab987aad5d">operator++</link>(<emphasis role="keywordtype">int</emphasis>);
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a8fa5a9c55ba31ba6764381dccf744d7d">operator--</link>();
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a8fa5a9c55ba31ba6764381dccf744d7d">operator--</link>(<emphasis role="keywordtype">int</emphasis>);
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a207d566d2d8896940834b2f31d9f1d06">operator+=</link>(<emphasis role="keywordtype">int</emphasis>);
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a304236b160397a0acafb9da86f11c35a">operator-=</link>(<emphasis role="keywordtype">int</emphasis>);
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a8772bf176b248dc6516aeb05d215b613">operator+</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a9d35b7c2a293de896beb459ef28bec3d">operator-</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1acdccb03fb3f35569ef320751b63e325d">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1aaf5e7cd3552fccdb68d144d5a1811875">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a963b18b0c35d0d571887387fc7934a51">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a9005e6f852dde85e408d2c82800dd01e">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a6188db396027c98c9df61689eaa7b16d">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a383142fbdb73230ae1351ebc344c6cc1">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
258 &#32;&#32;&#32;&#32;};
259 
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_node_iterable">NodeIterable</link>&#32;{
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule">Molecule</link>;
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>;
263 
264 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;mol;
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_begin;
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_end;
268 &#32;&#32;&#32;&#32;
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable">NodeIterable</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;mol);
270 &#32;&#32;&#32;&#32;
271 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable_1a93ca9f19d78899a40883db494030f979">begin</link>()&#32;<emphasis role="keyword">const</emphasis>;
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable_1a767f322c4ff11ee1186d25c7b7f9cbba">end</link>()&#32;<emphasis role="keyword">const</emphasis>;
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable_1ac011c126be9e17781413d20b3a948a80">size</link>()&#32;<emphasis role="keyword">const</emphasis>;
275 &#32;&#32;&#32;&#32;};
276 
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>;
279 
280 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>&#32;&amp;iterable;
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx;&#32;&#32;<emphasis role="comment">//&#32;idx&#32;of&#32;edges&#32;iterable.&#32;not&#32;nessesarily&#32;the&#32;same&#32;as&#32;the&#32;&quot;edgeIndex&quot;&#32;returned&#32;by&#32;Molecule::connectNodes</emphasis>
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>&#32;&amp;edges,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx);
285 
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Edge&amp;&#32;getEdge()&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;helper&#32;method</emphasis>
287 
288 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1ad88f7e40ebfe2511a137aa4c92e1d51a">getIndex</link>()&#32;<emphasis role="keyword">const</emphasis>;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a09e7bf9b99075469f710f08beea71685">getParameters</link>()&#32;<emphasis role="keyword">const</emphasis>;
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a72e95da607f48a728dd556cda7e207ae">src</link>()&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;(index&#32;of)&#32;source&#32;node</emphasis>
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1ab072345b8ea0ec27afc7772f9c0a7c1a">dest</link>()&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;(index&#32;of)&#32;destination&#32;node</emphasis>
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a30e4e4bd72065262b480647727a756f4">getDirection</link>()&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;direction&#32;of&#32;node:&#32;either&#32;1.0,&#32;-1.0,&#32;or&#32;0.0</emphasis>
294 
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a57789b552f047e491ef01f662f4cb0d3">operator*</link>()&#32;<emphasis role="keyword">const</emphasis>;
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a474258db92785d660b20d5199f2dad29">operator[]</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;int()&#32;<emphasis role="keyword">const</emphasis>;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a7f4f13887c99c74b0dbfdaac40d01472">operator++</link>();
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a7f4f13887c99c74b0dbfdaac40d01472">operator++</link>(<emphasis role="keywordtype">int</emphasis>);
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a68c1eea291e0a2b6e8240582366e2067">operator--</link>();
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a68c1eea291e0a2b6e8240582366e2067">operator--</link>(<emphasis role="keywordtype">int</emphasis>);
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1acbfe20ee73fe60d7dc5f9113184aa243">operator+=</link>(<emphasis role="keywordtype">int</emphasis>);
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a81a47567f40b2f2b59a00e623ae0ba7d">operator-=</link>(<emphasis role="keywordtype">int</emphasis>);
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a8eb84273f87c1ba1bdc95ed7a38bdb74">operator+</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1af2a54a5b128f4bce68c21aa3156df2e6">operator-</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a9caef518cfd1939e0fc1c054fdebc2fb">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a3308b9ac135787346d5068f6c73d3650">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a808406f7eac9b3b8502d0c89030b4e79">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1af0de103fa148c030788a5715f3c46b72">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1abcb719bc3b5ac22fa2a6b5895ec4070b">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1ac42d179444c1f9a7b47245cd3d472847">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
315 &#32;&#32;&#32;&#32;};
316 
317 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>&#32;{
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule">Molecule</link>;
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>;
320 &#32;&#32;&#32;&#32;
321 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;mol;
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Edge&gt;&#32;edges;
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;);
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;node);
327 &#32;&#32;&#32;&#32;
328 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable_1a6ad09c81e1ffd3a9d71ba1db9073e6cc">begin</link>()&#32;<emphasis role="keyword">const</emphasis>;
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable_1a25744b1ee7e22c419406eed7c40c8e29">end</link>()&#32;<emphasis role="keyword">const</emphasis>;
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable_1af058dfb0b3208a64abd7d1c5ace96783">size</link>()&#32;<emphasis role="keyword">const</emphasis>;
332 &#32;&#32;&#32;&#32;};
333 
334 &#32;<emphasis role="comment">//&#32;-----&#32;Molecule::Instance&#32;stuff&#32;-----</emphasis>
335 &#32;<emphasis role="keyword">private</emphasis>:
340 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Instance&#32;{
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_molecule">Molecule</link>;
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_namespace_m_s_d">MSD</link>;
343 &#32;&#32;&#32;&#32;
344 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;prototype;&#32;&#32;<emphasis role="comment">//&#32;contains&#32;a&#32;reference&#32;to&#32;the&#32;the&#32;Molecular&#32;structure&#32;and&#32;parameters</emphasis>
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;msd;&#32;&#32;<emphasis role="comment">//&#32;a&#32;reference&#32;to&#32;the&#32;MSD&#32;this&#32;Molecule::Instace&#32;is&#32;attached&#32;to</emphasis>
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;z;&#32;&#32;<emphasis role="comment">//&#32;the&#32;(x,y,z)&#32;position&#32;of&#32;this&#32;Molecule::Instance.&#32;Note:&#32;the&#32;mol&apos;s&#32;x&#32;position&#32;is&#32;determined&#32;by&#32;msd.molPosL,&#32;msd.molPosR.&#32;&#32;</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Vector&gt;&#32;spins;&#32;&#32;<emphasis role="comment">//&#32;states&#32;of&#32;each&#32;&quot;Node&quot;</emphasis>
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Vector&gt;&#32;fluxes;
350 
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Instance(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;prototype,&#32;<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;msd,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z,
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;initSpin&#32;=&#32;<link linkend="_classudc_1_1_vector_1a969618e05cff7f052ae3e9fcf7b49104">Vector::J</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;initFlux&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>);
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Instance(<emphasis role="keyword">const</emphasis>&#32;Instance&#32;&amp;other);
377 
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Instance&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;Instance&#32;&amp;other);&#32;&#32;<emphasis role="comment">//&#32;copies&#32;the&#32;spin/flux&#32;states</emphasis>
379 &#32;&#32;&#32;&#32;
380 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setLocalM(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux);
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setSpin(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin);
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setFlux(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux);
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;getSpin(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;<emphasis role="keyword">const</emphasis>;
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;getFlux(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;<emphasis role="keyword">const</emphasis>;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;getLocalM(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin,&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux)&#32;<emphasis role="keyword">const</emphasis>;
387 &#32;&#32;&#32;&#32;};
388 
392 &#32;&#32;&#32;&#32;Instance&#32;instantiate(<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;msd,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)&#32;<emphasis role="keyword">const</emphasis>;
393 };
394 
395 
399 <emphasis role="keyword">class&#32;</emphasis><link linkend="_namespace_m_s_d">MSD</link>&#32;{
400 &#32;<emphasis role="keyword">public</emphasis>:
401 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a7266f08d021d5a06960b152c95a9213e">MolProto</link>;
402 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Molecule::Instance&#32;<link linkend="_classudc_1_1_m_s_d_1ab3c0b3e8474e18cb213f79d66f221b67">Mol</link>;
403 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;function&lt;<link linkend="_classudc_1_1_m_s_d_1a7266f08d021d5a06960b152c95a9213e">MolProto</link>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&gt;&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MolProtoFactory</link>;
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;function&lt;<link linkend="_classudc_1_1_vector">Vector</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;,&#32;function&lt;<emphasis role="keywordtype">double</emphasis>()&gt;)&gt;&#32;<link linkend="_classudc_1_1_m_s_d_1a3d235795ecc459cc0c2069c3f05d089d">FlippingAlgorithm</link>;
405 &#32;&#32;&#32;&#32;
406 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;needed&#32;so&#32;these&#32;methods&#32;can&#32;update&#32;energy&#32;and&#32;magnetization&#32;of&#32;the&#32;MSD</emphasis>
407 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">Mol::setLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux);
408 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a4d4a91fd46eec66e753dfa2642c25068">Mol::setSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin);
409 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a0bb8c1e9fef1960578abc46446380dbf">Mol::setFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux);
410 
411 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structudc_1_1_m_s_d_1_1_parameters">Parameters</link>&#32;{
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aea19a4bd6b6b630bb5255c6f3206d67d">kT</link>;&#32;&#32;<emphasis role="comment">//&#32;Temperature</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a7df654a8138c850e64de4adea7c5776a">B</link>;&#32;&#32;<emphasis role="comment">//&#32;Magnetic&#32;field</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9347bd5ecace963e09c974e2e6236f40">SL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aad0f4bd2d0ba9b01de8f6830b4d77f09">SR</link>;&#32;&#32;<emphasis role="comment">//&#32;spin&#32;magnitudes</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a55712b42b9d9460519b2ffc4a24cdd96">FL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a3b84c7bdff2e5acbf7e2aee9f4f87380">FR</link>;&#32;&#32;<emphasis role="comment">//&#32;Spin&#32;fluctuation&#32;constants,&#32;flux.norm()&#32;=&#32;uniform&#32;random&#32;between&#32;[0,&#32;F)</emphasis>
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a4de534ffb37d66a609206ecfbc79a4a3">JL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a626eb888da1ae30b0fd04fd60bbf5b4a">JR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a570769f809bfc17b833b760025d54635">JmL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a11d9a80a263371635f53ad14232b7c10">JmR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a876665131291f40627d234de2636e7a5">JLR</link>;&#32;&#32;<emphasis role="comment">//&#32;Heisenberg&#32;exchange&#32;coupling&#32;between&#32;s_i&#32;and&#32;s_j:&#32;local&#32;spin&#32;and&#32;neighboring&#32;spins</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a38fbdb6de5465d21767e5acdd70e4e46">Je0L</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a0fd1a65ab83a4cfc0aed753762a71f1c">Je0R</link>;&#32;&#32;<emphasis role="comment">//&#32;Exchange&#32;coupling&#32;between&#32;s_i&#32;and&#32;f_i:&#32;local&#32;spin&#32;and&#32;local&#32;flux&#32;vector</emphasis>
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1adab3e0cfbf9f3c60b828d70e9a7853cd">Je1L</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a1f5a1b2902f4152f4027c9a6d66546dd">Je1R</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1acf66b51f1494866fe609eabf57790989">Je1mL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a6357fcbf8fe7d799c10bb33853fe5fd7">Je1mR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1afe51f061d0cda85616e3a04ecb34cb85">Je1LR</link>;&#32;&#32;<emphasis role="comment">//&#32;Exchange&#32;coupling&#32;between&#32;s_i&#32;and&#32;f_j:&#32;local&#32;spin&#32;and&#32;neighboring&#32;flux&#32;vectors</emphasis>
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a01e7b66d243045c1253a7f2e8c70ab03">JeeL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a4d3e4c3b64dfded7ac1c07c45f71fb6e">JeeR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aed49e5aed77920be09b8323a0cee2781">JeemL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aa2775ee2661215984de3caf7832c0f13">JeemR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a316117cf75ee335416c34e938960b8a1">JeeLR</link>;&#32;&#32;<emphasis role="comment">//&#32;Exchange&#32;coupling&#32;between&#32;f_i&#32;and&#32;f_j:&#32;local&#32;flux&#32;and&#32;neighboring&#32;flux&#32;vectors</emphasis>
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1afe3cfa8886ebb734fbe817c8dd254d8f">bL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9e807cec26c1219ef16f3e26f67a926a">bR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ac35c301b854f5d76621b39774776bf22">bmL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a0f4027af582ca01b7db0941641227ac5">bmR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a022b5b93636d04f81172635825796469">bLR</link>;&#32;&#32;<emphasis role="comment">//&#32;Biquadratic&#32;Coupling</emphasis>
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9d8c4ad2396d258736c0d5985feaca55">AL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aa97373f0348686a6f2c1abbbf35aeb1a">AR</link>;&#32;&#32;<emphasis role="comment">//&#32;Anisotropy</emphasis>
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1af8bbfb0d4941170abb9cb20874d37177">DL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a6c585701e1e89a881bbfe9d1eee5d64c">DR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1af0493729f1925de734f4d595643fa09f">DmL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a2bf4786615f44fd118d255aa59bf8190">DmR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ab293ea7698715b6f29b0c0b007a85a4e">DLR</link>;&#32;&#32;<emphasis role="comment">//&#32;Dzyaloshinskii-Moriya&#32;interaction&#32;(i.e.&#32;Skyrmions)</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ad972cfd353c72aa28063ac74d9bed3cf">Parameters</link>();
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a7a0a0b93af506366c206f39a8adabfa9">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">Parameters</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ae6d8e34b3fb5bf65b69b8fd7b870d71a">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">Parameters</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
428 &#32;&#32;&#32;&#32;};
429 &#32;&#32;&#32;&#32;
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;{
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;&#32;&#32;<emphasis role="comment">//&#32;time,&#32;i.e.&#32;current&#32;iteration</emphasis>
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>;&#32;&#32;<emphasis role="comment">//&#32;Magnetization</emphasis>
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1aeae2f7666be87f8d4499d612567fe71a">MS</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a020102ea8f3621b4791a75de90624ade">MSL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66823c7a278ea165067eadaf62c976d0">MSR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a42f24fd034f5acf41d415093def18fa5">MSm</link>;&#32;&#32;<emphasis role="comment">//&#32;Magnetization&#32;due&#32;to&#32;spin&#32;only&#32;(no&#32;flux)</emphasis>
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a789b09f14dc037a00b59733ef5e6b8fe">MF</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1a6be402d985814748b000dce6b983e9">MFL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66d2b20d7c955c704ce31b355419ee45">MFR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac3c2f0d86900c360181e14073842f9a5">MFm</link>;&#32;&#32;<emphasis role="comment">//&#32;Magnetization&#32;due&#32;to&#32;flux&#32;only&#32;(no&#32;spin)&#32;</emphasis>
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>,&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;Energy</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1acab69dbb27e71f71fd874272e036dcc6">Results</link>();
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab6fb2b0afd66ea58ae596c7d34bd42f0">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1aedd99e890f8609ae49464003794fd263">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
441 &#32;&#32;&#32;&#32;};
442 &#32;&#32;&#32;&#32;
443 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;{
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_namespace_m_s_d">MSD</link>;
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
446 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;msd;
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;&#32;&#32;<emphasis role="comment">//&#32;index&#32;in&#32;msd::indicies</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i);
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
452 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a8ad36deb75ea34c351470a210dc5f8df">getIndex</link>()&#32;<emphasis role="keyword">const</emphasis>;
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aff3d00d1f3d3abc57ab3e1708f22046e">getX</link>()&#32;<emphasis role="keyword">const</emphasis>;
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a74a04cdef90898fe9ecac8fe91a67cec">getY</link>()&#32;<emphasis role="keyword">const</emphasis>;
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a6b7cdba16db28e6b16dbf1f60361a83b">getZ</link>()&#32;<emphasis role="keyword">const</emphasis>;
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1afea68bb7dba79b2747964d9d1d52cdfe">getSpin</link>()&#32;<emphasis role="keyword">const</emphasis>;
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1abd996192129eb23f7679d731bb831e08">getFlux</link>()&#32;<emphasis role="keyword">const</emphasis>;
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a8c8ea6d938c5e7497e26d36bd603c7b3">getLocalM</link>()&#32;<emphasis role="keyword">const</emphasis>;
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1abb6e962e7a330c8a6deb53b4af1a33eb">operator*</link>()&#32;<emphasis role="keyword">const</emphasis>;
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a9d84bb256488be2f19c519c1edc94bf2">operator[]</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;int()&#32;<emphasis role="keyword">const</emphasis>;
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&amp;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aa2acdacfb5a3b245e86d52caf6ccee5b">operator++</link>();
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aa2acdacfb5a3b245e86d52caf6ccee5b">operator++</link>(<emphasis role="keywordtype">int</emphasis>);
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&amp;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a9b7068af2426eff599c7898cc556d80c">operator--</link>();
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a9b7068af2426eff599c7898cc556d80c">operator--</link>(<emphasis role="keywordtype">int</emphasis>);
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&amp;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1ae6a30558ca84c5c83e220f5f565c9337">operator+=</link>(<emphasis role="keywordtype">int</emphasis>);
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&amp;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1ae815a105b76ecd74ffbca42059dd66d5">operator-=</link>(<emphasis role="keywordtype">int</emphasis>);
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a36610ced86cca4e0b20b3cae881bc949">operator+</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1ad552ff63add04ee2f65ce2b635c82a3f">operator-</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aa5f4db2e3ab06026529de54a9c22b7a4">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1abfe94ce7e6d750efea5d32a705fe3cd3">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a066d2acce9354012cdbf70dcc7b4cc99">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aa1571de940e3cd6061568b26f6fd27c8">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a62aed3f164b19a1581de95ddee11cde9">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a7c6a05177dd8932f7baa9aa441a59096">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
482 &#32;&#32;&#32;&#32;};
483 
484 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classudc_1_1_m_s_d_1_1_molecule_exception">MoleculeException</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classudc_1_1_u_d_c_exception">UDCException</link>&#32;{
485 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_molecule_exception_1a368380a2e67e7ed48071a43c9dab6613">MoleculeException</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*message)&#32;:&#32;<link linkend="_classudc_1_1_u_d_c_exception">UDCException</link>(message)&#32;{}
487 &#32;&#32;&#32;&#32;};
488 &#32;&#32;&#32;&#32;
489 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3d235795ecc459cc0c2069c3f05d089d">FlippingAlgorithm</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a7010b43c1e96eca520bcefba7aa36ad3">UP_DOWN_MODEL</link>;
490 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3d235795ecc459cc0c2069c3f05d089d">FlippingAlgorithm</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a82cedfe873fa654afa32ab3d1b6f3ead">CONTINUOUS_SPIN_MODEL</link>;
491 &#32;&#32;&#32;&#32;
492 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MolProtoFactory</link>&#32;<link linkend="_classudc_1_1_m_s_d_1ac578f0076fce752e661058c648d88997">LINEAR_MOL</link>;
493 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MolProtoFactory</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a72708188b46e1ddffb7c6e2fec96c587">CIRCULAR_MOL</link>;
494 
495 &#32;<emphasis role="keyword">private</emphasis>:
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;initSpin;&#32;<emphasis role="comment">//initial&#32;spin&#32;of&#32;all&#32;atoms</emphasis>
497 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;initFlux;&#32;<emphasis role="comment">//initial&#32;spin&#32;fluctuation&#32;(direction&#32;only)&#32;for&#32;each&#32;atom</emphasis>
498 &#32;&#32;&#32;&#32;
499 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_sparse_array">SparseArray&lt;Vector&gt;</link>&#32;spins;
500 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_sparse_array">SparseArray&lt;Vector&gt;</link>&#32;fluxes;
501 &#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">Parameters</link>&#32;parameters;
502 &#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;results;
503 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;height,&#32;depth;
504 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosL,&#32;molPosR;
505 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;topL,&#32;bottomL,&#32;frontR,&#32;backR;&#32;&#32;<emphasis role="comment">//&#32;&quot;inner&#32;sizes/boundaries&quot;</emphasis>
506 &#32;&#32;&#32;&#32;
507 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule">MolProto</link>&#32;molProto;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contains&#32;the&#32;prototype&#32;for&#32;the&#32;molecule&#32;instances</emphasis>
508 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_sparse_array">SparseArray&lt;shared_ptr&lt;Mol&gt;</link>&gt;&#32;mols;&#32;&#32;<emphasis role="comment">//&#32;Contains&#32;the&#32;molecule&#32;instances.&#32;Uses&#32;the&#32;same&#32;indexing&#32;as&#32;spins&#32;and&#32;fluxes.</emphasis>
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;Mol&#32;the&#32;same&#32;Mol&#32;object&#32;is&#32;pointed&#32;for&#32;all&#32;x&#32;where&#32;y,z&#32;remain&#32;constant.</emphasis>
510 &#32;&#32;&#32;&#32;
511 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;number&#32;of&#32;atoms&#32;in&#32;both&#32;the&#32;entire&#32;device&#32;(n)&#32;and&#32;in&#32;each&#32;region&#32;(nL,&#32;nR,&#32;etc.)</emphasis>
512 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;n_mL,&#32;n_mR,&#32;mLR&#32;are&#32;defined&#32;as&#32;twice&#32;the&#32;number&#32;of&#32;bonds&#32;since&#32;these&#32;regions&#32;exist&#32;only&#32;as&#32;an&#32;interaction&#32;between&#32;two&#32;regions.</emphasis>
513 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;nL,&#32;nR,&#32;n_m,&#32;n_mL,&#32;n_mR,&#32;nLR;
514 
515 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;flags&#32;for&#32;each&#32;region&#32;to&#32;remember&#32;if&#32;they&#32;exist&#32;based&#32;on&#32;given&#32;dimensions&#32;and&#32;inner&#32;bounds</emphasis>
516 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;FM_L_exists,&#32;FM_R_exists,&#32;mol_exists;
517 &#32;&#32;&#32;&#32;
518 &#32;&#32;&#32;&#32;std::vector&lt;unsigned&#32;int&gt;&#32;indices;&#32;<emphasis role="comment">//&#32;valid&#32;indices</emphasis>
519 &#32;&#32;&#32;&#32;std::vector&lt;unsigned&#32;int&gt;&#32;unique_mol_indices;&#32;&#32;<emphasis role="comment">//&#32;valid&#32;indices&#32;for&#32;each&#32;unique&#32;mol.&#32;(x&#32;==&#32;molPosL)</emphasis>
520 &#32;&#32;&#32;&#32;
521 &#32;&#32;&#32;&#32;mt19937_64&#32;prng;&#32;<emphasis role="comment">//pseudo&#32;random&#32;number&#32;generator</emphasis>
522 &#32;&#32;&#32;&#32;uniform_real_distribution&lt;double&gt;&#32;rand;&#32;<emphasis role="comment">//uniform&#32;probability&#32;density&#32;function&#32;on&#32;the&#32;interval&#32;[0,&#32;1)</emphasis>
523 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;seed;&#32;<emphasis role="comment">//store&#32;seed&#32;so&#32;that&#32;every&#32;run&#32;can&#32;follow&#32;the&#32;same&#32;sequence</emphasis>
524 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;seed_count;&#32;<emphasis role="comment">//to&#32;help&#32;keep&#32;seeds&#32;from&#32;repeating&#32;because&#32;of&#32;temporal&#32;proximity</emphasis>
525 &#32;&#32;&#32;&#32;
526 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)&#32;<emphasis role="keyword">const</emphasis>;
527 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;<emphasis role="keyword">const</emphasis>;
528 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;<emphasis role="keyword">const</emphasis>;
529 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;<emphasis role="keyword">const</emphasis>;
530 &#32;&#32;&#32;&#32;
531 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;genSeed();&#32;<emphasis role="comment">//generates&#32;a&#32;new&#32;seed</emphasis>
532 &#32;&#32;&#32;&#32;
533 &#32;&#32;&#32;&#32;<link linkend="_namespace_m_s_d">MSD</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace_m_s_d">MSD</link>&amp;);&#32;<emphasis role="comment">//undefined,&#32;do&#32;not&#32;use!</emphasis>
534 &#32;&#32;&#32;&#32;<link linkend="_namespace_m_s_d">MSD</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;m);&#32;<emphasis role="comment">//undefined,&#32;do&#32;not&#32;use!</emphasis>
535 
536 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;init(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MolProtoFactory</link>&#32;*molProtoFactory&#32;=&#32;NULL);
537 &#32;&#32;&#32;&#32;
538 &#32;<emphasis role="keyword">public</emphasis>:
539 &#32;&#32;&#32;&#32;std::vector&lt;Results&gt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>;
540 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a3d235795ecc459cc0c2069c3f05d089d">FlippingAlgorithm</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a2ccd325cf09e82420004de9702894de5">flippingAlgorithm</link>;&#32;<emphasis role="comment">//algorithm&#32;used&#32;to&#32;&quot;flip&quot;&#32;an&#32;atom&#32;in&#32;metropolis</emphasis>
541 &#32;&#32;&#32;&#32;
542 &#32;&#32;&#32;&#32;<link linkend="_namespace_m_s_d">MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">MolProto</link>&#32;&amp;molProto,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosL,
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;topL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bottomL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;frontR,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;backR);
545 &#32;&#32;&#32;&#32;<link linkend="_namespace_m_s_d">MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MolProtoFactory</link>&#32;&amp;molType,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosR,
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;topL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bottomL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;frontR,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;backR);
548 &#32;&#32;&#32;&#32;<link linkend="_namespace_m_s_d">MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosR,
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;topL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bottomL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;frontR,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;backR);
551 &#32;&#32;&#32;&#32;<link linkend="_namespace_m_s_d">MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;heightL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;depthR);
553 &#32;&#32;&#32;&#32;<link linkend="_namespace_m_s_d">MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth);
554 &#32;&#32;&#32;&#32;
555 &#32;&#32;&#32;&#32;
556 &#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">Parameters</link>&#32;<link linkend="_classudc_1_1_m_s_d_1abfa4f6883d0b4677ab7b70c1adf06066">getParameters</link>()&#32;<emphasis role="keyword">const</emphasis>;
557 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa1513f639c10ca29773ea287ae104121">setParameters</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">Parameters</link>&#32;&amp;);
558 &#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;<link linkend="_classudc_1_1_m_s_d_1ae1bee2a207b40720156243ed19eed671">getResults</link>()&#32;<emphasis role="keyword">const</emphasis>;
559 &#32;&#32;&#32;&#32;
560 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a5c1d308f90d10072e5288685ba4d58db">set_kT</link>(<emphasis role="keywordtype">double</emphasis>&#32;kT);
561 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a18aa13537e0deda7d1263c1fd8d8228a">setB</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;B);
562 
563 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule">MolProto</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a77dce5d8c1a874c47acfbc69d5a867ab">getMolProto</link>()&#32;<emphasis role="keyword">const</emphasis>;
564 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa8ed0dab0705b810e4d14215b488fb43">setMolProto</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">MolProto</link>&#32;&amp;proto);&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;the&#32;new&#32;MolProto&#32;must&#32;have&#32;the&#32;same&#32;&quot;size&quot;&#32;(number&#32;of&#32;nodes)&#32;as&#32;the&#32;previous&#32;MolProto.</emphasis>
565 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aade85204d30f826444572e41f27613aa">setMolParameters</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">MolProto::NodeParameters</link>&#32;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">MolProto::EdgeParameters</link>&#32;&amp;);&#32;&#32;<emphasis role="comment">//&#32;uniformally&#32;updates&#32;all&#32;mol.&#32;parameters</emphasis>
566 
567 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;<emphasis role="keyword">const</emphasis>;
568 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)&#32;<emphasis role="keyword">const</emphasis>;
569 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;<emphasis role="keyword">const</emphasis>;
570 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)&#32;<emphasis role="keyword">const</emphasis>;
571 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1af0cad12dfc8de11dfbbb600672b94a53">getLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;<emphasis role="keyword">const</emphasis>;
572 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1af0cad12dfc8de11dfbbb600672b94a53">getLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)&#32;<emphasis role="keyword">const</emphasis>;
573 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a4d4a91fd46eec66e753dfa2642c25068">setSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;);
574 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a4d4a91fd46eec66e753dfa2642c25068">setSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;);
575 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a0bb8c1e9fef1960578abc46446380dbf">setFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;);
576 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a0bb8c1e9fef1960578abc46446380dbf">setFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;);
577 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">setLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;);
578 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">setLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;);
579 &#32;&#32;&#32;&#32;
580 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a762738c5f2b8e17f526c6138fcf89872">getN</link>()&#32;<emphasis role="keyword">const</emphasis>;
581 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1adc9f743ee13e82becfe0a2c50ee52ec1">getNL</link>()&#32;<emphasis role="keyword">const</emphasis>;
582 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ae18b1502712c3ac5314dbb6130c354ed">getNR</link>()&#32;<emphasis role="keyword">const</emphasis>;
583 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a100e8176f61523c520c546149d9014a6">getNm</link>()&#32;<emphasis role="keyword">const</emphasis>;
584 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3a90533d4764c960d421ccf254696133">getNmL</link>()&#32;<emphasis role="keyword">const</emphasis>;
585 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ad5c8743bd63fd3cdbb0361233e405c0b">getNmR</link>()&#32;<emphasis role="keyword">const</emphasis>;
586 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a7add4bc60686c62e73343afa6092b017">getNLR</link>()&#32;<emphasis role="keyword">const</emphasis>;
587 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3ece5c5f34abcc06fef11fc96189895d">getWidth</link>()&#32;<emphasis role="keyword">const</emphasis>;
588 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a536ab447508f890fd16272995c6fae8b">getHeight</link>()&#32;<emphasis role="keyword">const</emphasis>;
589 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aefb9f78944562ded126ec46485319557">getDepth</link>()&#32;<emphasis role="keyword">const</emphasis>;
590 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a939846baeed48015266b707a703ef15f">getDimensions</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;depth)&#32;<emphasis role="keyword">const</emphasis>;
591 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a2c5e7ed01ae1e5e5e6157e76748f88ab">getMolPosL</link>()&#32;<emphasis role="keyword">const</emphasis>;
592 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a158fcf1df8fc10e66257138df6e4a60e">getMolPosR</link>()&#32;<emphasis role="keyword">const</emphasis>;
593 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a52a344961c0464197bc0936e24ec1107">getMolPos</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;molPosL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;molPosR)&#32;<emphasis role="keyword">const</emphasis>;
594 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a9d5727849f685e6cccb5e5a0a3818cb3">getTopL</link>()&#32;<emphasis role="keyword">const</emphasis>;
595 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a66200786b332ed413fa3e29a7ecedad3">getBottomL</link>()&#32;<emphasis role="keyword">const</emphasis>;
596 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a7de138059fe647ec24a50d3b98ecdfe8">getFrontR</link>()&#32;<emphasis role="keyword">const</emphasis>;
597 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a368da5ea0c007b29f0c18a4415b2d1f6">getBackR</link>()&#32;<emphasis role="keyword">const</emphasis>;
598 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a54c6db2f1ffe3cb9de31b2e278ae2335">getInnerBounds</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;topL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;bottomL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;frontR,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;backR)&#32;<emphasis role="keyword">const</emphasis>;
599 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1af17782522b81ac6827d6874ae6aa5018">getFM_L_exists</link>()&#32;<emphasis role="keyword">const</emphasis>;
600 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ac7b197dca279f02512882dc173a70aaf">getFM_R_exists</link>()&#32;<emphasis role="keyword">const</emphasis>;
601 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a87c3cff4cf2db6a08fa6d7f184500eea">getMol_exists</link>()&#32;<emphasis role="keyword">const</emphasis>;
602 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a61db2cb3389641129ce97c0613917ec5">getRegions</link>(<emphasis role="keywordtype">bool</emphasis>&#32;&amp;FM_L_exists,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;FM_R_exists,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;mol_exists)&#32;<emphasis role="keyword">const</emphasis>;
603 &#32;&#32;&#32;&#32;
604 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3cb49ad4ca11278ed81998a8efd3ce68">setSeed</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;seed);&#32;&#32;<emphasis role="comment">//&#32;change&#32;the&#32;seed&#32;of&#32;the&#32;prng,&#32;and&#32;restart&#32;the&#32;pseudo-random&#32;sequence</emphasis>
605 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1adedd5f97461ea96c685923b45b49d91b">getSeed</link>()&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;get&#32;the&#32;seed&#32;currently&#32;being&#32;used</emphasis>
606 
607 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a82b75829d72149de1992f198ad3c73b6">reinitialize</link>(<emphasis role="keywordtype">bool</emphasis>&#32;reseed&#32;=&#32;<emphasis role="keyword">true</emphasis>);&#32;<emphasis role="comment">//reseed&#32;iff&#32;you&#32;want&#32;a&#32;new&#32;seed,&#32;true&#32;by&#32;default</emphasis>
608 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a9b89ead4fcfc2c0ead59dcb33538a334">randomize</link>(<emphasis role="keywordtype">bool</emphasis>&#32;reseed&#32;=&#32;<emphasis role="keyword">true</emphasis>);&#32;<emphasis role="comment">//similar&#32;to&#32;reinitialize,&#32;but&#32;initial&#32;state&#32;is&#32;random</emphasis>
609 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3da3a656fdd0a10f6bbc819935c9fa1d">metropolis</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;N);
610 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3da3a656fdd0a10f6bbc819935c9fa1d">metropolis</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;N,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;freq);
611 &#32;&#32;&#32;&#32;
612 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aca1fecf2568de928a441aa031280fc49">specificHeat</link>()&#32;<emphasis role="keyword">const</emphasis>;
613 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a0b14f09fe74231e5f9981b1571666ce5">specificHeat_L</link>()&#32;<emphasis role="keyword">const</emphasis>;
614 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a8c62ebc53fe5f1d620785ad492b27414">specificHeat_R</link>()&#32;<emphasis role="keyword">const</emphasis>;
615 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1abb96b180a4960bf101178aa01701b3cc">specificHeat_m</link>()&#32;<emphasis role="keyword">const</emphasis>;
616 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a2d9850c33757ced8ae7c7b4b5de5afb2">specificHeat_mL</link>()&#32;<emphasis role="keyword">const</emphasis>;
617 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a162b9154b562fb1f70e128eb9f0b9c46">specificHeat_mR</link>()&#32;<emphasis role="keyword">const</emphasis>;
618 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ab0205d423d26ab312fe9d612eb6b82e4">specificHeat_LR</link>()&#32;<emphasis role="keyword">const</emphasis>;
619 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ac8f8afe5da02b14af09b1b4861a274e1">magneticSusceptibility</link>()&#32;<emphasis role="keyword">const</emphasis>;
620 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3a7e3fa4340af6fe33cf2daceb37f656">magneticSusceptibility_L</link>()&#32;<emphasis role="keyword">const</emphasis>;
621 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1acb90487ccf1985ac1045c7762fa4f42f">magneticSusceptibility_R</link>()&#32;<emphasis role="keyword">const</emphasis>;
622 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a215acad84017f65c72a1abcb504b12ea">magneticSusceptibility_m</link>()&#32;<emphasis role="keyword">const</emphasis>;
623 &#32;&#32;&#32;&#32;
624 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a4b9e7018e4245eaf23d4e01d0b582cc3">meanM</link>()&#32;<emphasis role="keyword">const</emphasis>;
625 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a8fe5c6f539ba5f128d89f6c32e42a81b">meanML</link>()&#32;<emphasis role="keyword">const</emphasis>;
626 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a75a2a166c7a100d23729914893024e8b">meanMR</link>()&#32;<emphasis role="keyword">const</emphasis>;
627 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a7b1361f8f8a4c2782e16f4885860160d">meanMm</link>()&#32;<emphasis role="keyword">const</emphasis>;
628 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a4c23d2ce55dbe92303a93b0f04247d6a">meanMS</link>()&#32;<emphasis role="keyword">const</emphasis>;
629 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a6c769149852b83b104041036684cc3b5">meanMSL</link>()&#32;<emphasis role="keyword">const</emphasis>;
630 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1af32676ff5839b6a89cae38003cf392a5">meanMSR</link>()&#32;<emphasis role="keyword">const</emphasis>;
631 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a0d9c252051a14d75fbfdab2e3ba0f1e5">meanMSm</link>()&#32;<emphasis role="keyword">const</emphasis>;
632 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a195fcd710a651679837fe247ba037e65">meanMF</link>()&#32;<emphasis role="keyword">const</emphasis>;
633 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1aa996c134623e5f28bb2d599088f4cd56">meanMFL</link>()&#32;<emphasis role="keyword">const</emphasis>;
634 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1ab4b2b0695b3e6143c44b6ab391f9890d">meanMFR</link>()&#32;<emphasis role="keyword">const</emphasis>;
635 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a9aac2bad16a926cd6ac24e3c4291325f">meanMFm</link>()&#32;<emphasis role="keyword">const</emphasis>;
636 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a07edbbd70d154577745c22e5ec7bdee4">meanU</link>()&#32;<emphasis role="keyword">const</emphasis>;
637 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aec1081b7cc26892ee7bc9399f1fadbb2">meanUL</link>()&#32;<emphasis role="keyword">const</emphasis>;
638 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a250a0059dd38873b6efe85a4f5da8668">meanUR</link>()&#32;<emphasis role="keyword">const</emphasis>;
639 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a922653ef103119a00b0c808c62a7f9d3">meanUm</link>()&#32;<emphasis role="keyword">const</emphasis>;
640 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a41a86b85c83949242bcc602775ed136d">meanUmL</link>()&#32;<emphasis role="keyword">const</emphasis>;
641 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ad5c1cd7334fdd3ea7db7964f2e69a536">meanUmR</link>()&#32;<emphasis role="keyword">const</emphasis>;
642 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a215bb03467cc147f837cd3afe89a793a">meanULR</link>()&#32;<emphasis role="keyword">const</emphasis>;
643 &#32;&#32;&#32;&#32;
644 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1afb91b037de5315bfde0159ee591267a3">begin</link>()&#32;<emphasis role="keyword">const</emphasis>;
645 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a917317363ac8e2e78840845d6fc49f91">end</link>()&#32;<emphasis role="keyword">const</emphasis>;
646 };
647 
648 ostream&amp;&#32;<link linkend="_namespaceudc_1a6b685c21976ba81485ee5434b8a7ca41">operator &lt;&lt;</link>(ostream&#32;&amp;out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">MSD::Parameters</link>&#32;&amp;p);
649 ostream&amp;&#32;<link linkend="_namespaceudc_1a6b685c21976ba81485ee5434b8a7ca41">operator &lt;&lt;</link>(ostream&#32;&amp;out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">MSD::Results</link>&#32;&amp;r);
650 
651 
652 <emphasis role="comment">//--------------------------------------------------------------------------------</emphasis>
653 ostream&amp;&#32;<link linkend="_namespaceudc_1a6b685c21976ba81485ee5434b8a7ca41">operator &lt;&lt;</link>(ostream&#32;&amp;out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">MSD::Parameters</link>&#32;&amp;p)&#32;{
654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;kT&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aea19a4bd6b6b630bb5255c6f3206d67d">kT</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;B&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a7df654a8138c850e64de4adea7c5776a">B</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
656 
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;SL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9347bd5ecace963e09c974e2e6236f40">SL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;SR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aad0f4bd2d0ba9b01de8f6830b4d77f09">SR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;FL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a55712b42b9d9460519b2ffc4a24cdd96">FL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;FR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a3b84c7bdff2e5acbf7e2aee9f4f87380">FR</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JL&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a4de534ffb37d66a609206ecfbc79a4a3">JL</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JR&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a626eb888da1ae30b0fd04fd60bbf5b4a">JR</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JmL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a570769f809bfc17b833b760025d54635">JmL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JmR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a11d9a80a263371635f53ad14232b7c10">JmR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JLR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a876665131291f40627d234de2636e7a5">JLR</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Je0L&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a38fbdb6de5465d21767e5acdd70e4e46">Je0L</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Je0R&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a0fd1a65ab83a4cfc0aed753762a71f1c">Je0R</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Je1L&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1adab3e0cfbf9f3c60b828d70e9a7853cd">Je1L</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Je1R&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a1f5a1b2902f4152f4027c9a6d66546dd">Je1R</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Je1mL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1acf66b51f1494866fe609eabf57790989">Je1mL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Je1mR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a6357fcbf8fe7d799c10bb33853fe5fd7">Je1mR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Je1LR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1afe51f061d0cda85616e3a04ecb34cb85">Je1LR</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JeeL&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a01e7b66d243045c1253a7f2e8c70ab03">JeeL</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JeeR&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a4d3e4c3b64dfded7ac1c07c45f71fb6e">JeeR</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JeemL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aed49e5aed77920be09b8323a0cee2781">JeemL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JeemR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aa2775ee2661215984de3caf7832c0f13">JeemR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;JeeLR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a316117cf75ee335416c34e938960b8a1">JeeLR</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;bL&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1afe3cfa8886ebb734fbe817c8dd254d8f">bL</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;bR&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9e807cec26c1219ef16f3e26f67a926a">bR</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;bmL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ac35c301b854f5d76621b39774776bf22">bmL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;bmR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a0f4027af582ca01b7db0941641227ac5">bmR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;bLR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a022b5b93636d04f81172635825796469">bLR</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;AL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9d8c4ad2396d258736c0d5985feaca55">AL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;AR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aa97373f0348686a6f2c1abbbf35aeb1a">AR</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;DL&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1af8bbfb0d4941170abb9cb20874d37177">DL</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;DR&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a6c585701e1e89a881bbfe9d1eee5d64c">DR</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;DmL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1af0493729f1925de734f4d595643fa09f">DmL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;DmR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a2bf4786615f44fd118d255aa59bf8190">DmR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;DLR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ab293ea7698715b6f29b0c0b007a85a4e">DLR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
676 }
677 
678 ostream&amp;&#32;<link linkend="_namespaceudc_1a6b685c21976ba81485ee5434b8a7ca41">operator &lt;&lt;</link>(ostream&#32;&amp;out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">MSD::Results</link>&#32;&amp;r)&#32;{
679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;t&#32;&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;M&#32;&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;ML&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MR&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Mm&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MS&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1aeae2f7666be87f8d4499d612567fe71a">MS</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MSL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a020102ea8f3621b4791a75de90624ade">MSL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MSR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66823c7a278ea165067eadaf62c976d0">MSR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MSm&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a42f24fd034f5acf41d415093def18fa5">MSm</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MF&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a789b09f14dc037a00b59733ef5e6b8fe">MF</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MFL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1a6be402d985814748b000dce6b983e9">MFL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MFR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66d2b20d7c955c704ce31b355419ee45">MFR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MFm&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac3c2f0d86900c360181e14073842f9a5">MFm</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;U&#32;&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;UL&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;UR&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Um&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;UmL&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;UmR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;ULR&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
686 }
687 
688 
689 Molecule::EdgeParameters::EdgeParameters()
690 :&#32;Jm(1),&#32;Je1m(0),&#32;Jeem(0),&#32;bm(0),&#32;Dm(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>)
691 {}
692 
693 Molecule::NodeParameters::NodeParameters()
694 :&#32;Sm(1),&#32;Fm(0),&#32;Je0m(0),&#32;Am(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>)
695 {}
696 
697 Molecule::Edge::Edge(<emphasis role="keywordtype">size_t</emphasis>&#32;eIdx,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nIdx,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;sIdx,&#32;<emphasis role="keywordtype">double</emphasis>&#32;dir)
698 :&#32;<link linkend="_classudc_1_1_molecule_1a41ffa48f091303c3178c8e783cc3142e">edgeIndex</link>(eIdx),&#32;nodeIndex(nIdx),&#32;selfIndex(sIdx),&#32;direction(dir)
699 {}
700 
701 Molecule::Node::Node(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a3ff276dcf7d10876c4783799c899bfd9">NodeParameters</link>&#32;&amp;parameters)&#32;:&#32;parameters(parameters)&#32;{
702 }
703 
704 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a5d2f40b3d48330e1345c68b8b05a18ad">Molecule::HEADER</link>&#32;=&#32;<emphasis role="stringliteral">&quot;MMB&quot;</emphasis>;
705 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a5c178c3e3abe344b6019877b4e877dfa">Molecule::HEADER_SIZE</link>&#32;=&#32;3;&#32;&#32;<emphasis role="comment">//&#32;compile-time&#32;constant&#32;of&#32;strlen(HEADER)</emphasis>
706 
707 <emphasis role="comment">//&#32;2&#32;size_t&apos;s&#32;for&#32;the&#32;leads,&#32;and&#32;1&#32;for&#32;each&#32;block&#32;length&#32;(nodeParams,&#32;and&#32;edgeParams)</emphasis>
708 <link linkend="_classudc_1_1_molecule_1a4a38e660030e37a46905b99fb87be886">Molecule::Molecule</link>()&#32;:&#32;leftLead(0),&#32;rightLead(0),&#32;sSize(<link linkend="_classudc_1_1_molecule_1a5c178c3e3abe344b6019877b4e877dfa">HEADER_SIZE</link>&#32;+&#32;4&#32;*&#32;sizeof(size_t))&#32;{
709 }
710 
711 <link linkend="_classudc_1_1_molecule_1a4a38e660030e37a46905b99fb87be886">Molecule::Molecule</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>&#32;&amp;nodeParams)
712 :&#32;nodes(<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>),&#32;leftLead(0),&#32;rightLead(0),
713 &#32;&#32;sSize(<link linkend="__m_s_d-export_8cpp_1acdcc9c325c0ace2430455ec8aafd3406">HEADER_SIZE</link>&#32;+&#32;4&#32;*&#32;sizeof(size_t)&#32;+&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>&#32;*&#32;(6&#32;*&#32;sizeof(double)&#32;+&#32;sizeof(size_t)))
714 {
715 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Node&#32;&amp;node&#32;:&#32;nodes)
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node.parameters&#32;=&#32;nodeParams;
717 }
718 
719 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a682c1855e517d0c2b68118b114d31d15">Molecule::serialize</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer)<emphasis role="keyword">&#32;const&#32;</emphasis>{
720 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;MMB&quot;&#32;(MSD&#32;mol.&#32;binary)&#32;header&#32;(for&#32;safety)</emphasis>
721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_molecule_1a5c178c3e3abe344b6019877b4e877dfa">HEADER_SIZE</link>;&#32;i++)
722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(<link linkend="_classudc_1_1_molecule_1a5d2f40b3d48330e1345c68b8b05a18ad">HEADER</link>[i],&#32;buffer);
723 &#32;&#32;&#32;&#32;
724 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;write&#32;the&#32;edge-parameters&#32;section</emphasis>
725 &#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(edgeParameters.size(),&#32;buffer);
726 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>&#32;&amp;eParam&#32;:&#32;edgeParameters)&#32;{
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(eParam.Jm,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;order&#32;must&#32;be&#32;correct&#32;(must&#32;match&#32;Molecule::deserialize)</emphasis>
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(eParam.Je1m,&#32;buffer);
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(eParam.Jeem,&#32;buffer);
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(eParam.bm,&#32;buffer);
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(eParam.Dm.x,&#32;buffer);
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(eParam.Dm.y,&#32;buffer);
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(eParam.Dm.z,&#32;buffer);
734 &#32;&#32;&#32;&#32;}
735 
736 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Second,&#32;write&#32;the&#32;node-parameters&#32;section</emphasis>
737 &#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(nodes.size(),&#32;buffer);
738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Node&#32;&amp;node&#32;:&#32;nodes)&#32;{
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(node.parameters.Sm,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;Order&#32;must&#32;be&#32;correct&#32;(must&#32;match&#32;Molecule::deserialize)</emphasis>
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(node.parameters.Fm,&#32;buffer);
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(node.parameters.Je0m,&#32;buffer);
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(node.parameters.Am.x,&#32;buffer);
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(node.parameters.Am.y,&#32;buffer);
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(node.parameters.Am.z,&#32;buffer);
745 &#32;&#32;&#32;&#32;}
746 
747 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thridly,&#32;write&#32;the&#32;adjacency&#32;section</emphasis>
748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Node&#32;&amp;node&#32;:&#32;nodes)&#32;{
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(node.neighbors.size(),&#32;buffer);
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Edge&#32;&amp;edge&#32;:&#32;node.neighbors)&#32;{
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(edge.edgeIndex,&#32;buffer);
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(edge.nodeIndex,&#32;buffer);
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(edge.direction,&#32;buffer);
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
755 &#32;&#32;&#32;&#32;}
756 
757 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Lastly&#32;write&#32;&quot;extra&#32;stuff&quot;</emphasis>
758 &#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(leftLead,&#32;buffer);
759 &#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a1e040d8326f2ad3b600f8f66a8de6305">bwrite</link>(rightLead,&#32;buffer);
760 }
761 
762 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ac8c39d99187f0dae0b0fe7ef7e935a0d">Molecule::deserialize</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer)&#32;{
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer_start&#32;=&#32;buffer;
764 
765 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;&quot;MMB&quot;&#32;header&#32;(for&#32;saftey)</emphasis>
766 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;header[<link linkend="_classudc_1_1_molecule_1a5c178c3e3abe344b6019877b4e877dfa">HEADER_SIZE</link>&#32;+&#32;1];
767 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_molecule_1a5c178c3e3abe344b6019877b4e877dfa">HEADER_SIZE</link>;&#32;i++)
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(header[i],&#32;buffer);
769 &#32;&#32;&#32;&#32;header[<link linkend="_classudc_1_1_molecule_1a5c178c3e3abe344b6019877b4e877dfa">HEADER_SIZE</link>]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
770 &#32;&#32;&#32;&#32;
771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(<link linkend="_classudc_1_1_molecule_1a5d2f40b3d48330e1345c68b8b05a18ad">HEADER</link>,&#32;header)&#32;!=&#32;0)
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_deserialization_exception">DeserializationException</link>((<emphasis role="keywordtype">string</emphasis>(<emphasis role="stringliteral">&quot;Missing&#32;header:&#32;&quot;</emphasis>)&#32;+&#32;<emphasis role="keywordtype">string</emphasis>(<link linkend="_classudc_1_1_molecule_1a5d2f40b3d48330e1345c68b8b05a18ad">HEADER</link>)).c_str());
773 
774 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;read&#32;edges</emphasis>
775 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;edgeCount;
776 &#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(edgeCount,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;First&#32;the&#32;number&#32;of&#32;edges&#32;is&#32;read.</emphasis>
777 &#32;&#32;&#32;&#32;edgeParameters.erase(edgeParameters.begin(),&#32;edgeParameters.end());
778 &#32;&#32;&#32;&#32;edgeParameters.reserve(edgeCount);
779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;edgeCount;&#32;i++)&#32;{
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>&#32;eParam;
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(eParam.<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1a888be7fafaea5cedfc9f59ce6291a5c8">Jm</link>,&#32;buffer);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Then&#32;each&#32;edge&apos;s&#32;parameters&#32;are&#32;read.</emphasis>
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(eParam.<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1afe9b27d63588d6f6066137961556274b">Je1m</link>,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;(Take&#32;careful&#32;note&#32;of&#32;the&#32;order&#32;in&#32;which&#32;the&#32;fields&#32;are&#32;stored.)</emphasis>
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(eParam.<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1a8e66fedceee8f6cbd949e2e39f68cb38">Jeem</link>,&#32;buffer);
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(eParam.<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1ae10a09e2ff621f6427be2bb5a69ba595">bm</link>,&#32;buffer);
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(eParam.<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1a7c1edcd9071395e3e894f12c03a2a8b2">Dm</link>.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>,&#32;buffer);
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(eParam.<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1a7c1edcd9071395e3e894f12c03a2a8b2">Dm</link>.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>,&#32;buffer);
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(eParam.<link linkend="_structudc_1_1_molecule_1_1_edge_parameters_1a7c1edcd9071395e3e894f12c03a2a8b2">Dm</link>.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>,&#32;buffer);
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edgeParameters.push_back(eParam);
789 &#32;&#32;&#32;&#32;}
790 
791 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Then&#32;read&#32;nodes&#32;(in&#32;two&#32;&quot;sweeps&quot;)</emphasis>
792 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>;
793 &#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">udc::bread</link>(<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;Next&#32;the&#32;number&#32;of&#32;nodes&#32;is&#32;read.</emphasis>
794 &#32;&#32;&#32;&#32;nodes.erase(nodes.begin(),&#32;nodes.end());
795 &#32;&#32;&#32;&#32;nodes.reserve(<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>);
796 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>;&#32;i++)&#32;{
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Node&#32;node;
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(node.parameters.Sm,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;For&#32;each&#32;node,&#32;we&#32;read&#32;its&#32;(local)&#32;parameter&#32;fields.</emphasis>
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(node.parameters.Fm,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;(Take&#32;careful&#32;note&#32;of&#32;the&#32;order&#32;in&#32;which&#32;the&#32;fields&#32;are&#32;stored.)</emphasis>
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(node.parameters.Je0m,&#32;buffer);
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(node.parameters.Am.x,&#32;buffer);
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(node.parameters.Am.y,&#32;buffer);
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(node.parameters.Am.z,&#32;buffer);
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes.push_back(node);
805 &#32;&#32;&#32;&#32;}
806 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>;&#32;i++)&#32;{
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Node&#32;&amp;node&#32;=&#32;nodes[i];
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;neighborCount;
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(neighborCount,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;(&quot;Spweep&quot;&#32;2)&#32;Again&#32;for&#32;each&#32;node,&#32;get&#32;the&#32;number&#32;of&#32;neighbors&#32;this&#32;time.</emphasis>
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node.neighbors.reserve(neighborCount);
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;neighborCount;&#32;j++)&#32;{
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;eIndex,&#32;nIndex;
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;direction;
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(eIndex,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;Finally&#32;we&#32;read&#32;each&#32;(edge&#32;index,&#32;node&#32;index,&#32;direction)&#32;triplet&#32;for&#32;this&#32;node.</emphasis>
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(nIndex,&#32;buffer);
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(direction,&#32;buffer);
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Edge&#32;edge(eIndex,&#32;nIndex,&#32;i,&#32;direction);
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node.neighbors.push_back(edge);
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
820 &#32;&#32;&#32;&#32;}
821 
822 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Lastly,&#32;we&#32;read&#32;the&#32;leads&apos;&#32;positions</emphasis>
823 &#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(leftLead,&#32;buffer);&#32;&#32;<emphasis role="comment">//&#32;(Left&#32;lead&#32;first,&#32;then&#32;right&#32;lead.)</emphasis>
824 &#32;&#32;&#32;&#32;<link linkend="_namespaceudc_1a51cb94811213523405b27e375b7a1b33">bread</link>(rightLead,&#32;buffer);
825 
826 &#32;&#32;&#32;&#32;sSize&#32;=&#32;buffer&#32;-&#32;buffer_start;
827 }
828 
829 <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a9fc6cbb7d10939477c3abcefd319ae54">Molecule::serializationSize</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
830 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sSize;
831 }
832 
833 istream&amp;&#32;<link linkend="_classudc_1_1_molecule_1aedb314ce8b1dff4ecf156d6e739d170f">Molecule::read</link>(istream&#32;&amp;in)&#32;{
834 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;file&#32;size</emphasis>
835 &#32;&#32;&#32;&#32;in.seekg(0,&#32;in.end);
836 &#32;&#32;&#32;&#32;streampos&#32;size&#32;=&#32;in.tellg();
837 &#32;&#32;&#32;&#32;in.seekg(0,&#32;in.beg);
838 
839 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;data&#32;into&#32;buffer</emphasis>
840 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*data&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[size];
841 &#32;&#32;&#32;&#32;in.read(data,&#32;size);
842 
843 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;deserialize&#32;buffer</emphasis>
844 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1ac8c39d99187f0dae0b0fe7ef7e935a0d">deserialize</link>((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;data);
845 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;data;
846 
847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;in;
848 }
849 
850 ostream&amp;&#32;<link linkend="_classudc_1_1_molecule_1a59ea4534de4d263562db48eac48a68cc">Molecule::write</link>(ostream&#32;&amp;out)<emphasis role="keyword">&#32;const&#32;</emphasis>{
851 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size&#32;=&#32;<link linkend="_classudc_1_1_molecule_1a9fc6cbb7d10939477c3abcefd319ae54">serializationSize</link>();
852 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;&#32;--&#32;Allocating...\n&quot;;&#32;&#32;//&#32;DEBUG</emphasis>
853 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*data&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[size];
854 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;&#32;--&#32;Serializing...\n&quot;;&#32;&#32;//&#32;DEBUG</emphasis>
855 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1a682c1855e517d0c2b68118b114d31d15">serialize</link>(data);
856 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;&#32;--&#32;Writing...\n&quot;;&#32;&#32;//&#32;DEBUG</emphasis>
857 &#32;&#32;&#32;&#32;out.write((<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;data,&#32;size);
858 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;data;
859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
860 }
861 
862 <link linkend="_classudc_1_1_molecule">Molecule</link>&#32;<link linkend="_classudc_1_1_molecule_1a97742a892262f853a7ec68d982d68fae">Molecule::load</link>(istream&#32;&amp;in)&#32;{
863 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;mol;
864 &#32;&#32;&#32;&#32;mol.<link linkend="_classudc_1_1_molecule_1aedb314ce8b1dff4ecf156d6e739d170f">read</link>(in);
865 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mol;
866 }
867 
868 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ab18585360b5c1577f6be8cc1f565b260">Molecule::createNode</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">NodeParameters</link>&#32;&amp;parameters)&#32;{
869 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;nodes.size();
870 
871 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&gt;=&#32;<link linkend="_classudc_1_1_molecule_1a1b9d46a0051e4ddbb66f8b0322844dda">NOT_FOUND</link>)
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;Molecule::createNode:&#32;Can&#32;not&#32;create&#32;node&#32;because&#32;the&#32;maximum&#32;number&#32;of&#32;nodes&#32;has&#32;been&#32;reached&quot;</emphasis>);
873 &#32;&#32;&#32;&#32;
874 &#32;&#32;&#32;&#32;Node&#32;node(parameters);
875 &#32;&#32;&#32;&#32;nodes.push_back(node);
876 
877 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SERIALIZATION_SIZE&#32;of&#32;NODE_PARAMETERS,</emphasis>
878 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;plus&#32;1&#32;size_t&#32;for&#32;size&#32;of&#32;adjacency&#32;list</emphasis>
879 &#32;&#32;&#32;&#32;sSize&#32;+=&#32;6&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(double)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">size_t</emphasis>);
880 
881 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index;
882 }
883 
884 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">Molecule::nodeCount</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
885 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nodes.size();
886 }
887 
888 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ae1411a791a83503073a9dc8a7b1d3b33">Molecule::connectNodes</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;b,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">EdgeParameters</link>&#32;&amp;parameters)&#32;{
889 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index&#32;=&#32;edgeParameters.size();
890 
891 &#32;&#32;&#32;&#32;{
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;<link linkend="_classudc_1_1_molecule_1a1b9d46a0051e4ddbb66f8b0322844dda">NOT_FOUND</link>)
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;Molecule::connectNodes:&#32;Can&#32;not&#32;create&#32;edge&#32;because&#32;the&#32;maximum&#32;number&#32;of&#32;edges&#32;has&#32;been&#32;reached&quot;</emphasis>);
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>&#32;=&#32;nodes.size();
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;&gt;=&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>&#32;||&#32;b&#32;&gt;=&#32;<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>)
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;Molecule::connectNodes:&#32;Invalid&#32;node&#32;index&quot;</emphasis>);
898 &#32;&#32;&#32;&#32;}
899 
900 &#32;&#32;&#32;&#32;edgeParameters.push_back(parameters);
901 
902 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isLoop&#32;=&#32;(a&#32;==&#32;b);
903 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dir&#32;=&#32;(isLoop&#32;?&#32;0&#32;:&#32;+1);
904 
905 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;attach&#32;edge:&#32;a&#32;-&gt;&#32;b</emphasis>
906 &#32;&#32;&#32;&#32;Edge&#32;edgeA(index,&#32;b,&#32;a,&#32;dir);
907 &#32;&#32;&#32;&#32;nodes[a].neighbors.push_back(edgeA);
908 
909 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;7&#32;double&apos;s&#32;for&#32;EdgeParameters,</emphasis>
910 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;a&#32;triplet&#32;of&#32;(size_t,&#32;size_t,&#32;double)&#32;for&#32;the&#32;the&#32;first&#32;entree&#32;in&#32;the&#32;adjacency&#32;lists</emphasis>
911 &#32;&#32;&#32;&#32;sSize&#32;+=&#32;7&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(double)&#32;+&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">size_t</emphasis>)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(double);
912 
913 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isLoop)&#32;{&#32;&#32;<emphasis role="comment">//&#32;only&#32;duplicate&#32;edge&#32;if&#32;it&apos;s&#32;not&#32;a&#32;self&#32;connected&#32;edge</emphasis>
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;attach&#32;edge:&#32;b&#32;-&gt;&#32;a</emphasis>
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Edge&#32;edgeB(index,&#32;a,&#32;b,&#32;-dir);
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes[b].neighbors.push_back(edgeB);
917 
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;second&#32;triplet&#32;of&#32;(size_t,&#32;size_t,&#32;double)&#32;for&#32;the&#32;second&#32;entree&#32;in&#32;the&#32;adjacency&#32;lists</emphasis>
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sSize&#32;+=&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(size_t)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>);
920 &#32;&#32;&#32;&#32;}
921 
922 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index;
923 }
924 
925 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a41ffa48f091303c3178c8e783cc3142e">Molecule::edgeIndex</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;b)<emphasis role="keyword">&#32;const&#32;</emphasis>{
926 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;&gt;=&#32;nodes.size()&#32;||&#32;b&#32;&gt;=&#32;nodes.size())
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;Molecule::edgeIndex:&#32;Invalid&#32;node&#32;index&quot;</emphasis>);
928 
929 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Edge&#32;&amp;edge&#32;:&#32;nodes[a].neighbors)
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(edge.nodeIndex&#32;==&#32;b)
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;edge.edgeIndex;
932 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a1b9d46a0051e4ddbb66f8b0322844dda">NOT_FOUND</link>;
933 }
934 
935 <link linkend="_structudc_1_1_molecule_1_1_edge_parameters">Molecule::EdgeParameters</link>&#32;<link linkend="_classudc_1_1_molecule_1a012b0e0a805476ae9e80673b9070db86">Molecule::getEdgeParameters</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)<emphasis role="keyword">&#32;const&#32;</emphasis>{
936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;edgeParameters.at(index);
937 }
938 
939 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a303bb5e1cc934255220e58949e345065">Molecule::setEdgeParameters</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">Molecule::EdgeParameters</link>&#32;&amp;p)&#32;{
940 &#32;&#32;&#32;&#32;edgeParameters.at(index)&#32;=&#32;p;
941 }
942 
943 <link linkend="_structudc_1_1_molecule_1_1_node_parameters">Molecule::NodeParameters</link>&#32;<link linkend="_classudc_1_1_molecule_1aee4baa13cfc0b0584ec8e2c5000a76be">Molecule::getNodeParameters</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)<emphasis role="keyword">&#32;const&#32;</emphasis>{
944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nodes.at(index).parameters;
945 }
946 
947 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ad13bc013a1031b8379ee7f134ce4724e">Molecule::setNodeParameters</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">Molecule::NodeParameters</link>&#32;&amp;p)&#32;{
948 &#32;&#32;&#32;&#32;nodes.at(index).parameters&#32;=&#32;p;
949 }
950 
951 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a401ed0509649570cc636b5a08735cbd6">Molecule::setAllParameters</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">Molecule::NodeParameters</link>&#32;&amp;nodeParams,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">Molecule::EdgeParameters</link>&#32;&amp;edgeParams)&#32;{
952 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;edgeParameters.size();&#32;i++)
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edgeParameters[i]&#32;=&#32;edgeParams;
954 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nodes.size();&#32;i++)
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes[i].parameters&#32;=&#32;nodeParams;
956 }
957 
958 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a055eb97e7305e44ebb8a0d22a23f6752">Molecule::setLeftLead</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;node)&#32;{
959 &#32;&#32;&#32;&#32;leftLead&#32;=&#32;node;
960 }
961 
962 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a549536b6815dd4ffcedb3ab3895a064f">Molecule::setRightLead</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;node)&#32;{
963 &#32;&#32;&#32;&#32;rightLead&#32;=&#32;node;
964 }
965 
966 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a57552dd57e092b3d7bc5e2e13e2a419a">Molecule::setLeads</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;left,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;right)&#32;{
967 &#32;&#32;&#32;&#32;leftLead&#32;=&#32;left;
968 &#32;&#32;&#32;&#32;rightLead&#32;=&#32;right;
969 }
970 
971 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1ab2718d472f48420e4ae77827c2753f9a">Molecule::getLeftLead</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
972 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;leftLead;
973 }
974 
975 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a09895cda60e964b18e0c38384e5f3a89">Molecule::getRightLead</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
976 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rightLead;
977 }
978 
979 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a8eacb4f3318b2d68c571cafb56a956ba">Molecule::getLeads</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;left,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;right)<emphasis role="keyword">&#32;const&#32;</emphasis>{
980 &#32;&#32;&#32;&#32;left&#32;=&#32;leftLead;
981 &#32;&#32;&#32;&#32;right&#32;=&#32;rightLead;
982 }
983 
984 <link linkend="_classudc_1_1_molecule_1_1_node_iterable">Molecule::NodeIterable</link>&#32;<link linkend="_classudc_1_1_molecule_1a57560cc5b9d4d5971c16566f77e2e279">Molecule::getNodes</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable">Molecule::NodeIterable</link>(*<emphasis role="keyword">this</emphasis>);
986 }
987 
988 <link linkend="_classudc_1_1_molecule_1_1_edge_iterable">Molecule::EdgeIterable</link>&#32;<link linkend="_classudc_1_1_molecule_1afc512c8f695a33e8918bd20912beb8cd">Molecule::getEdges</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">Molecule::EdgeIterable</link>(*<emphasis role="keyword">this</emphasis>);
990 }
991 
992 <link linkend="_classudc_1_1_molecule_1_1_edge_iterable">Molecule::EdgeIterable</link>&#32;<link linkend="_classudc_1_1_molecule_1a48c40b90cb716c63b0a3c6b2a39d4805">Molecule::getAdjacencyList</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nodeIndex)<emphasis role="keyword">&#32;const&#32;</emphasis>{
993 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">Molecule::EdgeIterable</link>(*<emphasis role="keyword">this</emphasis>,&#32;nodeIndex);
994 }
995 
996 Molecule::NodeIterator::NodeIterator(<emphasis role="keyword">const</emphasis>&#32;NodeIterable&#32;&amp;nodes,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx)&#32;:&#32;iterable(nodes),&#32;idx(idx)&#32;{
997 }
998 
999 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1add4653d895f324444b7d295a35e6ca00">Molecule::NodeIterator::getIndex</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1000 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;idx;
1001 }
1002 
1003 <link linkend="_structudc_1_1_molecule_1_1_node_parameters">Molecule::NodeParameters</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a04119ad80998be7ebd7207d360e638c8">Molecule::NodeIterator::getParameters</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1004 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterable.mol.getNodeParameters(getIndex());
1005 }
1006 
1007 <link linkend="_classudc_1_1_molecule_1_1_edge_iterable">Molecule::EdgeIterable</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a0acdd22957b069b97f55d993aa6e5829">Molecule::NodeIterator::getNeighbors</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterable.mol.<link linkend="_classudc_1_1_molecule_1a48c40b90cb716c63b0a3c6b2a39d4805">getAdjacencyList</link>(getIndex());
1009 }
1010 
1011 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a90229c78c03c1801f453149a9937bde3">Molecule::NodeIterator::operator*</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getIndex();
1013 }
1014 
1015 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1ac47692c114579ddc642d0b1c52b52131">Molecule::NodeIterator::operator[]</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(*<emphasis role="keyword">this</emphasis>&#32;+&#32;offset);
1017 }
1018 
1019 Molecule::NodeIterator::operator&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;int()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getIndex();
1021 }
1022 
1023 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a7e91c5498ef57076c1ae1fab987aad5d">Molecule::NodeIterator::operator++</link>()&#32;{
1024 &#32;&#32;&#32;&#32;++idx;
1025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1026 }
1027 
1028 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a7e91c5498ef57076c1ae1fab987aad5d">Molecule::NodeIterator::operator++</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{
1029 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&#32;prev&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1030 &#32;&#32;&#32;&#32;++(*this);
1031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prev;
1032 }
1033 
1034 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a8fa5a9c55ba31ba6764381dccf744d7d">Molecule::NodeIterator::operator--</link>()&#32;{
1035 &#32;&#32;&#32;&#32;--idx;
1036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1037 }
1038 
1039 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a8fa5a9c55ba31ba6764381dccf744d7d">Molecule::NodeIterator::operator--</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{
1040 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&#32;prev&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1041 &#32;&#32;&#32;&#32;--(*this);
1042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prev;
1043 }
1044 
1045 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a207d566d2d8896940834b2f31d9f1d06">Molecule::NodeIterator::operator+=</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
1046 &#32;&#32;&#32;&#32;idx&#32;+=&#32;offset;
1047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1048 }
1049 
1050 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a304236b160397a0acafb9da86f11c35a">Molecule::NodeIterator::operator-=</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
1051 &#32;&#32;&#32;&#32;idx&#32;-=&#32;offset;
1052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1053 }
1054 
1055 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a8772bf176b248dc6516aeb05d215b613">Molecule::NodeIterator::operator+</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>(iterable,&#32;idx&#32;+&#32;offset);
1057 }
1058 
1059 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a9d35b7c2a293de896beb459ef28bec3d">Molecule::NodeIterator::operator-</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>(iterable,&#32;idx&#32;-&#32;offset);
1061 }
1062 
1063 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1acdccb03fb3f35569ef320751b63e325d">Molecule::NodeIterator::operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;idx&#32;==&#32;iter.idx;
1065 }
1066 
1067 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1aaf5e7cd3552fccdb68d144d5a1811875">Molecule::NodeIterator::operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;iter);
1069 }
1070 
1071 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a963b18b0c35d0d571887387fc7934a51">Molecule::NodeIterator::operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;idx&#32;&lt;&#32;iter.idx;
1073 }
1074 
1075 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a9005e6f852dde85e408d2c82800dd01e">Molecule::NodeIterator::operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;idx&#32;&gt;&#32;iter.idx;
1077 }
1078 
1079 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a6188db396027c98c9df61689eaa7b16d">Molecule::NodeIterator::operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;&lt;&#32;iter);
1081 }
1082 
1083 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator_1a383142fbdb73230ae1351ebc344c6cc1">Molecule::NodeIterator::operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">NodeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;&gt;&#32;iter);
1085 }
1086 
1087 Molecule::NodeIterable::NodeIterable(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;mol)
1088 :&#32;mol(mol),&#32;_begin(0),&#32;_end(mol.<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>())
1089 {
1090 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;empty&#32;*/</emphasis>
1091 }
1092 
1093 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable_1a93ca9f19d78899a40883db494030f979">Molecule::NodeIterable::begin</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>(*<emphasis role="keyword">this</emphasis>,&#32;_begin);
1095 }
1096 
1097 <link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable_1a767f322c4ff11ee1186d25c7b7f9cbba">Molecule::NodeIterable::end</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterator">Molecule::NodeIterator</link>(*<emphasis role="keyword">this</emphasis>,&#32;_end);
1099 }
1100 
1101 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_node_iterable_1ac011c126be9e17781413d20b3a948a80">Molecule::NodeIterable::size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_end&#32;-&#32;_begin;
1103 }
1104 
1105 Molecule::EdgeIterator::EdgeIterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable">EdgeIterable</link>&#32;&amp;edges,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;idx)&#32;:&#32;iterable(edges),&#32;idx(idx)&#32;{
1106 }
1107 
1108 <emphasis role="keyword">const</emphasis>&#32;Molecule::Edge&amp;&#32;Molecule::EdgeIterator::getEdge()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterable.edges.at(idx);
1110 }
1111 
1112 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1ad88f7e40ebfe2511a137aa4c92e1d51a">Molecule::EdgeIterator::getIndex</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getEdge().edgeIndex;
1114 }
1115 
1116 <link linkend="_structudc_1_1_molecule_1_1_edge_parameters">Molecule::EdgeParameters</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a09e7bf9b99075469f710f08beea71685">Molecule::EdgeIterator::getParameters</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterable.mol.getEdgeParameters(getIndex());
1118 }
1119 
1120 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a72e95da607f48a728dd556cda7e207ae">Molecule::EdgeIterator::src</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getEdge().selfIndex;
1122 }
1123 
1124 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1ab072345b8ea0ec27afc7772f9c0a7c1a">Molecule::EdgeIterator::dest</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getEdge().nodeIndex;
1126 }
1127 
1128 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a30e4e4bd72065262b480647727a756f4">Molecule::EdgeIterator::getDirection</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getEdge().direction;
1130 }
1131 
1132 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a57789b552f047e491ef01f662f4cb0d3">Molecule::EdgeIterator::operator*</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getIndex();
1134 }
1135 
1136 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a474258db92785d660b20d5199f2dad29">Molecule::EdgeIterator::operator[]</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(*<emphasis role="keyword">this</emphasis>&#32;+&#32;offset);
1138 }
1139 
1140 Molecule::EdgeIterator::operator&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;int()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getIndex();
1142 }
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1144 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a7f4f13887c99c74b0dbfdaac40d01472">Molecule::EdgeIterator::operator++</link>()&#32;{
1145 &#32;&#32;&#32;&#32;++idx;
1146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1147 }
1148 
1149 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a7f4f13887c99c74b0dbfdaac40d01472">Molecule::EdgeIterator::operator++</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{
1150 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&#32;prev&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1151 &#32;&#32;&#32;&#32;++(*this);
1152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prev;
1153 }
1154 
1155 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a68c1eea291e0a2b6e8240582366e2067">Molecule::EdgeIterator::operator--</link>()&#32;{
1156 &#32;&#32;&#32;&#32;--idx;
1157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1158 }
1159 
1160 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a68c1eea291e0a2b6e8240582366e2067">Molecule::EdgeIterator::operator--</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{
1161 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&#32;prev&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1162 &#32;&#32;&#32;&#32;--(*this);
1163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prev;
1164 }
1165 
1166 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1acbfe20ee73fe60d7dc5f9113184aa243">Molecule::EdgeIterator::operator+=</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
1167 &#32;&#32;&#32;&#32;idx&#32;+=&#32;offset;
1168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1169 }
1170 
1171 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&amp;&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a81a47567f40b2f2b59a00e623ae0ba7d">Molecule::EdgeIterator::operator-=</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
1172 &#32;&#32;&#32;&#32;idx&#32;-=&#32;offset;
1173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1174 }
1175 
1176 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a8eb84273f87c1ba1bdc95ed7a38bdb74">Molecule::EdgeIterator::operator+</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>(iterable,&#32;idx&#32;+&#32;offset);
1178 }
1179 
1180 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1af2a54a5b128f4bce68c21aa3156df2e6">Molecule::EdgeIterator::operator-</link>(<emphasis role="keywordtype">int</emphasis>&#32;offset)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>(iterable,&#32;idx&#32;-&#32;offset);
1182 }
1183 
1184 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a9caef518cfd1939e0fc1c054fdebc2fb">Molecule::EdgeIterator::operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;idx&#32;==&#32;iter.idx;
1186 }
1187 
1188 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a3308b9ac135787346d5068f6c73d3650">Molecule::EdgeIterator::operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;iter);
1190 }
1191 
1192 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1a808406f7eac9b3b8502d0c89030b4e79">Molecule::EdgeIterator::operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;idx&#32;&gt;&#32;iter.idx;
1194 }
1195 
1196 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1af0de103fa148c030788a5715f3c46b72">Molecule::EdgeIterator::operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;idx&#32;&lt;&#32;iter.idx;
1198 }
1199 
1200 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1abcb719bc3b5ac22fa2a6b5895ec4070b">Molecule::EdgeIterator::operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;&lt;&#32;iter);
1202 }
1203 
1204 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator_1ac42d179444c1f9a7b47245cd3d472847">Molecule::EdgeIterator::operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">EdgeIterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;&gt;&#32;iter);
1206 }
1207 
1208 Molecule::EdgeIterable::EdgeIterable(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;mol)&#32;:&#32;mol(mol)&#32;{
1209 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sum&#32;=&#32;0;
1210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;node&#32;:&#32;mol.<link linkend="_classudc_1_1_molecule_1a57560cc5b9d4d5971c16566f77e2e279">getNodes</link>())
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;+=&#32;mol.nodes.at(node).neighbors.size();
1212 &#32;&#32;&#32;&#32;edges.reserve(sum);
1213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;node&#32;:&#32;mol.<link linkend="_classudc_1_1_molecule_1a57560cc5b9d4d5971c16566f77e2e279">getNodes</link>())&#32;{
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;neighbors&#32;=&#32;mol.nodes.at(node).neighbors;
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edges.insert(edges.end(),&#32;neighbors.begin(),&#32;neighbors.end());
1216 &#32;&#32;&#32;&#32;}
1217 }
1218 
1219 Molecule::EdgeIterable::EdgeIterable(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1a4a38e660030e37a46905b99fb87be886">Molecule</link>&#32;&amp;mol,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;node)&#32;:mol(mol)&#32;{
1220 &#32;&#32;&#32;&#32;edges&#32;=&#32;mol.nodes.at(node).neighbors;
1221 }
1222 
1223 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable_1a6ad09c81e1ffd3a9d71ba1db9073e6cc">Molecule::EdgeIterable::begin</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>(*<emphasis role="keyword">this</emphasis>,&#32;0);
1225 }
1226 
1227 <link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable_1a25744b1ee7e22c419406eed7c40c8e29">Molecule::EdgeIterable::end</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterator">Molecule::EdgeIterator</link>(*<emphasis role="keyword">this</emphasis>,&#32;edges.size());
1229 }
1230 
1231 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_molecule_1_1_edge_iterable_1af058dfb0b3208a64abd7d1c5ace96783">Molecule::EdgeIterable::size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;edges.size();
1233 }
1234 
1235 Molecule::Instance::Instance(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">Molecule</link>&#32;&amp;prototype,&#32;<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;msd,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z,
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;initSpin,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;initFlux)
1237 :&#32;prototype(prototype),&#32;msd(msd),&#32;y(y),&#32;z(z)
1238 {
1239 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&#32;=&#32;prototype.nodes.size();
1240 
1241 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;initSpin;
1242 &#32;&#32;&#32;&#32;s.<link linkend="_classudc_1_1_vector_1ac385aa5781a8b72847e6b28dcaa5e917">normalize</link>();
1243 &#32;&#32;&#32;&#32;spins.reserve(N);
1244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;N;&#32;i++)
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spins.push_back(s&#32;*&#32;prototype.nodes[i].parameters.Sm);
1246 &#32;&#32;&#32;&#32;
1247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(initFlux&#32;==&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>)&#32;{
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fluxes.assign(N,&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>);
1249 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f&#32;=&#32;initFlux;
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f.<link linkend="_classudc_1_1_vector_1ac385aa5781a8b72847e6b28dcaa5e917">normalize</link>();
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fluxes.reserve(N);
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;N;&#32;i++)&#32;{
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Fm&#32;=&#32;prototype.nodes[i].parameters.Fm;
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fluxes.push_back(initFlux.<link linkend="_classudc_1_1_vector_1a5c3eb6000799a6fc4756f029b9b67e98">normSq</link>()&#32;&lt;=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(Fm)&#32;?&#32;initFlux&#32;:&#32;f&#32;*&#32;Fm);
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1257 &#32;&#32;&#32;&#32;}
1258 }
1259 
1260 Molecule::Instance::Instance(<emphasis role="keyword">const</emphasis>&#32;Instance&#32;&amp;other)
1261 :&#32;prototype(other.prototype),&#32;msd(other.msd),&#32;y(y),&#32;z(z),&#32;spins(other.spins),&#32;fluxes(other.fluxes)
1262 {}
1263 
1264 Molecule::Instance&amp;&#32;Molecule::Instance::operator=(<emphasis role="keyword">const</emphasis>&#32;Molecule::Instance&#32;&amp;other)&#32;{
1265 &#32;&#32;&#32;&#32;this-&gt;spins&#32;=&#32;other.spins;
1266 &#32;&#32;&#32;&#32;this-&gt;fluxes&#32;=&#32;other.fluxes;
1267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1268 }
1269 
1270 <emphasis role="keywordtype">void</emphasis>&#32;Molecule::Instance::setLocalM(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;Vector&#32;&amp;spin,&#32;<emphasis role="keyword">const</emphasis>&#32;Vector&#32;&amp;flux)&#32;{
1271 &#32;&#32;&#32;&#32;Vector&#32;&amp;s&#32;=&#32;spins.at(a);&#32;&#32;&#32;<emphasis role="comment">//&#32;previous&#32;spin</emphasis>
1272 &#32;&#32;&#32;&#32;Vector&#32;&amp;f&#32;=&#32;fluxes.at(a);&#32;&#32;<emphasis role="comment">//&#32;previous&#32;flux</emphasis>
1273 
1274 &#32;&#32;&#32;&#32;Vector&#32;m&#32;=&#32;s&#32;+&#32;f;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;previous&#32;local&#32;mag.</emphasis>
1275 &#32;&#32;&#32;&#32;Vector&#32;mag&#32;=&#32;spin&#32;+&#32;flux;&#32;&#32;<emphasis role="comment">//&#32;new&#32;local&#32;mag.</emphasis>
1276 
1277 &#32;&#32;&#32;&#32;Vector&#32;deltaS&#32;=&#32;spin&#32;-&#32;s;
1278 &#32;&#32;&#32;&#32;Vector&#32;deltaF&#32;=&#32;flux&#32;-&#32;f;
1279 &#32;&#32;&#32;&#32;Vector&#32;deltaM&#32;=&#32;mag&#32;-&#32;m;
1280 
1281 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Node&#32;&amp;node&#32;=&#32;prototype.nodes[a];
1282 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;MSD::Parameters&#32;&amp;msdParams&#32;=&#32;msd.parameters;
1283 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a3ff276dcf7d10876c4783799c899bfd9">NodeParameters</link>&#32;&amp;nodeParams&#32;=&#32;node.parameters;
1284 
1285 &#32;&#32;&#32;&#32;MSD::Results&#32;&amp;results&#32;=&#32;msd.results;
1286 
1287 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;----&#32;update&#32;magnetization,&#32;M&#32;----</emphasis>
1288 &#32;&#32;&#32;&#32;results.<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>&#32;+=&#32;deltaM;
1289 &#32;&#32;&#32;&#32;results.MS&#32;+=&#32;deltaS;
1290 &#32;&#32;&#32;&#32;results.MF&#32;+=&#32;deltaF;
1291 
1292 &#32;&#32;&#32;&#32;results.Mm&#32;+=&#32;deltaM;
1293 &#32;&#32;&#32;&#32;results.MSm&#32;+=&#32;deltaS;
1294 &#32;&#32;&#32;&#32;results.MFm&#32;+=&#32;deltaF;
1295 
1296 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;----&#32;update&#32;energy,&#32;U&#32;----</emphasis>
1297 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;local&#32;energy</emphasis>
1298 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;msdParams.B&#32;*&#32;deltaM
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;nodeParams.Am&#32;*&#32;(&#32;Vector(<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.x),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.y),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.z))&#32;-&#32;Vector(<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.x),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.y),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.z))&#32;)
1300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;nodeParams.Je0m&#32;*&#32;(&#32;spin&#32;*&#32;flux&#32;-&#32;s&#32;*&#32;f&#32;);
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;deltaU;
1303 &#32;&#32;&#32;&#32;}
1304 
1305 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;energy&#32;from&#32;edges&#32;(i.e.&#32;bonds)</emphasis>
1306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Edge&#32;&amp;edge&#32;:&#32;node.neighbors)&#32;{
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;edge.nodeIndex;&#32;&#32;<emphasis role="comment">//&#32;index&#32;of&#32;neighbor</emphasis>
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_s&#32;=&#32;spins[a1];
1309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_f&#32;=&#32;fluxes[a1];
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a96023113198b7a6641f22f1a6b05d84a">EdgeParameters</link>&#32;&amp;edgeParams&#32;=&#32;prototype.edgeParameters[edge.edgeIndex];
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;edgeParams.Jm&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;edgeParams.Je1m&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;edgeParams.Jeem&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;edgeParams.bm&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;edgeParams.Dm&#32;*&#32;(edge.direction&#32;*&#32;deltaM.crossProduct(neighbor_m));&#32;&#32;<emphasis role="comment">//&#32;uses&#32;edge.direction&#32;to&#32;solve&#32;anti-communative&#32;property&#32;of&#32;crossProduct</emphasis>
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;deltaU;
1319 &#32;&#32;&#32;&#32;}
1320 
1321 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;energy&#32;from&#32;leads</emphasis>
1322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msd.mol_exists)&#32;{
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;msdSpins&#32;=&#32;msd.spins;
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;msdFluxes&#32;=&#32;msd.fluxes;
1325 
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;left&#32;lead</emphasis>
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;prototype.leftLead&#32;&amp;&amp;&#32;msd.FM_L_exists)&#32;{
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;msd.index(msd.molPosL&#32;-&#32;1,&#32;y,&#32;z);
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_s&#32;=&#32;msdSpins[a1];
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_f&#32;=&#32;msdFluxes[a1];
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;msdParams.JmL&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;msdParams.Je1mL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;msdParams.JeemL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;msdParams.bmL&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;msdParams.DmL&#32;*&#32;neighbor_m.crossProduct(deltaM);&#32;&#32;<emphasis role="comment">//&#32;pos(neighbor_m)&#32;&lt;&#32;pos(deltaM)</emphasis>
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;deltaU;
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1340 
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;right&#32;lead</emphasis>
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;prototype.rightLead&#32;&amp;&amp;&#32;msd.FM_R_exists)&#32;{
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;msd.index(msd.molPosR&#32;+&#32;1,&#32;y,&#32;z);
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_s&#32;=&#32;msdSpins[a1];
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_f&#32;=&#32;msdFluxes[a1];
1346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;msdParams.JmR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;msdParams.Je1mR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;msdParams.JeemR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;msdParams.bmR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;msdParams.DmR&#32;*&#32;deltaM.crossProduct(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;pos(deltaM)&#32;&lt;&#32;pos(neighbor_m)</emphasis>
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;deltaU;
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1355 &#32;&#32;&#32;&#32;}
1356 
1357 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;----&#32;Done:&#32;update&#32;spin&#32;and&#32;flux&#32;values&#32;----</emphasis>
1358 &#32;&#32;&#32;&#32;s&#32;=&#32;spin;
1359 &#32;&#32;&#32;&#32;f&#32;=&#32;flux;
1360 }
1361 
1362 <emphasis role="keywordtype">void</emphasis>&#32;Molecule::Instance::setSpin(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;Vector&#32;&amp;spin)&#32;{
1363 &#32;&#32;&#32;&#32;setLocalM(a,&#32;spin,&#32;getFlux(a));
1364 }
1365 
1366 <emphasis role="keywordtype">void</emphasis>&#32;Molecule::Instance::setFlux(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;Vector&#32;&amp;flux)&#32;{
1367 &#32;&#32;&#32;&#32;setLocalM(a,&#32;getSpin(a),&#32;flux);
1368 }
1369 
1370 Vector&#32;Molecule::Instance::getSpin(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;spins.at(a);
1372 }
1373 
1374 Vector&#32;Molecule::Instance::getFlux(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fluxes.at(a);
1376 }
1377 
1378 <emphasis role="keywordtype">void</emphasis>&#32;Molecule::Instance::getLocalM(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;Vector&#32;&amp;spin,&#32;Vector&#32;&amp;flux)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1379 &#32;&#32;&#32;&#32;spin&#32;=&#32;spins.at(a);
1380 &#32;&#32;&#32;&#32;flux&#32;=&#32;fluxes.at(a);
1381 }
1382 
1383 Molecule::Instance&#32;Molecule::instantiate(<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;msd,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1384 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Instance(*<emphasis role="keyword">this</emphasis>,&#32;msd,&#32;y,&#32;z);
1385 }
1386 
1387 
1388 <link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ad972cfd353c72aa28063ac74d9bed3cf">MSD::Parameters::Parameters</link>()
1389 :&#32;kT(0.25),&#32;B(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),
1390 &#32;&#32;SL(1),&#32;SR(1),&#32;FL(0),&#32;FR(0),
1391 &#32;&#32;JL(1),&#32;JR(1),&#32;JmL(1),&#32;JmR(-1),&#32;JLR(0),
1392 &#32;&#32;Je0L(0),&#32;Je0R(0),
1393 &#32;&#32;Je1L(0),&#32;Je1R(0),&#32;Je1mL(0),&#32;Je1mR(0),&#32;Je1LR(0),
1394 &#32;&#32;JeeL(0),&#32;JeeR(0),&#32;JeemL(0),&#32;JeemR(0),&#32;JeeLR(0),
1395 &#32;&#32;bL(0),&#32;bR(0),&#32;bmL(0),&#32;bmR(0),&#32;bLR(0),
1396 &#32;&#32;AL(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;AR(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),
1397 &#32;&#32;DL(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;DR(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;DmL(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;DmR(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;DLR(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>)&#32;{
1398 }
1399 
1400 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a7a0a0b93af506366c206f39a8adabfa9">MSD::Parameters::operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">Parameters</link>&#32;&amp;p)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;kT&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aea19a4bd6b6b630bb5255c6f3206d67d">kT</link>
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;B&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a7df654a8138c850e64de4adea7c5776a">B</link>
1403 
1404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;SL&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9347bd5ecace963e09c974e2e6236f40">SL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;SR&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aad0f4bd2d0ba9b01de8f6830b4d77f09">SR</link>
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;FL&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a55712b42b9d9460519b2ffc4a24cdd96">FL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;FR&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a3b84c7bdff2e5acbf7e2aee9f4f87380">FR</link>
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;JL&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a4de534ffb37d66a609206ecfbc79a4a3">JL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;JR&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a626eb888da1ae30b0fd04fd60bbf5b4a">JR</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;JmL&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a570769f809bfc17b833b760025d54635">JmL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;JmR&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a11d9a80a263371635f53ad14232b7c10">JmR</link>&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;JLR&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a876665131291f40627d234de2636e7a5">JLR</link>
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;Je0L&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a38fbdb6de5465d21767e5acdd70e4e46">Je0L</link>&#32;&#32;&amp;&amp;&#32;&#32;Je0R&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a0fd1a65ab83a4cfc0aed753762a71f1c">Je0R</link>
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;Je1L&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1adab3e0cfbf9f3c60b828d70e9a7853cd">Je1L</link>&#32;&#32;&amp;&amp;&#32;&#32;Je1R&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a1f5a1b2902f4152f4027c9a6d66546dd">Je1R</link>&#32;&#32;&amp;&amp;&#32;&#32;Je1mL&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1acf66b51f1494866fe609eabf57790989">Je1mL</link>&#32;&#32;&amp;&amp;&#32;&#32;Je1mR&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a6357fcbf8fe7d799c10bb33853fe5fd7">Je1mR</link>&#32;&#32;&amp;&amp;&#32;&#32;Je1LR&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1afe51f061d0cda85616e3a04ecb34cb85">Je1LR</link>
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;JeeL&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a01e7b66d243045c1253a7f2e8c70ab03">JeeL</link>&#32;&#32;&amp;&amp;&#32;&#32;JeeR&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a4d3e4c3b64dfded7ac1c07c45f71fb6e">JeeR</link>&#32;&#32;&amp;&amp;&#32;&#32;JeemL&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aed49e5aed77920be09b8323a0cee2781">JeemL</link>&#32;&#32;&amp;&amp;&#32;&#32;JeemR&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aa2775ee2661215984de3caf7832c0f13">JeemR</link>&#32;&#32;&amp;&amp;&#32;&#32;JeeLR&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a316117cf75ee335416c34e938960b8a1">JeeLR</link>
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;bL&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1afe3cfa8886ebb734fbe817c8dd254d8f">bL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;bR&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9e807cec26c1219ef16f3e26f67a926a">bR</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;bmL&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ac35c301b854f5d76621b39774776bf22">bmL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;bmR&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a0f4027af582ca01b7db0941641227ac5">bmR</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;bLR&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a022b5b93636d04f81172635825796469">bLR</link>
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;AL&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a9d8c4ad2396d258736c0d5985feaca55">AL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;AR&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1aa97373f0348686a6f2c1abbbf35aeb1a">AR</link>
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;DL&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1af8bbfb0d4941170abb9cb20874d37177">DL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;DR&#32;&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a6c585701e1e89a881bbfe9d1eee5d64c">DR</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;DmL&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1af0493729f1925de734f4d595643fa09f">DmL</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;DmR&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a2bf4786615f44fd118d255aa59bf8190">DmR</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;DLR&#32;&#32;&#32;==&#32;p.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ab293ea7698715b6f29b0c0b007a85a4e">DLR</link>;
1413 }
1414 
1415 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1ae6d8e34b3fb5bf65b69b8fd7b870d71a">MSD::Parameters::operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">Parameters</link>&#32;&amp;p)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;p);
1417 }
1418 
1419 
1420 <link linkend="_structudc_1_1_m_s_d_1_1_results_1acab69dbb27e71f71fd874272e036dcc6">MSD::Results::Results</link>()
1421 :&#32;t(0),&#32;M(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;ML(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;MR(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;Mm(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),
1422 &#32;&#32;MS(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;MSL(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;MSR(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;MSm(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),
1423 &#32;&#32;MF(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;MFL(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;MFR(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),&#32;MFm(<link linkend="_classudc_1_1_vector">Vector</link>::<link linkend="__m_s_d-export_8cpp_1a83fb9b8b75a91604f1a1f39dc898cf9e">ZERO</link>),
1424 &#32;&#32;U(0),&#32;UL(0),&#32;UR(0),&#32;Um(0),&#32;UmL(0),&#32;UmR(0),&#32;ULR(0)&#32;{
1425 }
1426 
1427 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab6fb2b0afd66ea58ae596c7d34bd42f0">MSD::Results::operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;t&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>
1429 
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;M&#32;&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;ML&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>&#32;&#32;&#32;&amp;&amp;&#32;&#32;MR&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>&#32;&#32;&#32;&amp;&amp;&#32;&#32;Mm&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;MS&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1aeae2f7666be87f8d4499d612567fe71a">MS</link>&#32;&#32;&#32;&amp;&amp;&#32;&#32;MSL&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a020102ea8f3621b4791a75de90624ade">MSL</link>&#32;&#32;&amp;&amp;&#32;&#32;MSR&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66823c7a278ea165067eadaf62c976d0">MSR</link>&#32;&#32;&amp;&amp;&#32;&#32;MSm&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a42f24fd034f5acf41d415093def18fa5">MSm</link>
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;MF&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a789b09f14dc037a00b59733ef5e6b8fe">MF</link>&#32;&#32;&#32;&amp;&amp;&#32;&#32;MFL&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1a6be402d985814748b000dce6b983e9">MFL</link>&#32;&#32;&amp;&amp;&#32;&#32;MFR&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66d2b20d7c955c704ce31b355419ee45">MFR</link>&#32;&#32;&amp;&amp;&#32;&#32;MFm&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac3c2f0d86900c360181e14073842f9a5">MFm</link>
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;U&#32;&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;UL&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>&#32;&#32;&#32;&amp;&amp;&#32;&#32;UR&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>&#32;&#32;&#32;&amp;&amp;&#32;&#32;Um&#32;&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>&#32;&#32;&amp;&amp;&#32;&#32;UmL&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>&#32;&#32;&amp;&amp;&#32;&#32;UmR&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>&#32;&#32;&amp;&amp;&#32;&#32;ULR&#32;==&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>;
1434 }
1435 
1436 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results_1aedd99e890f8609ae49464003794fd263">MSD::Results::operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;r);
1438 }
1439 
1440 
1441 MSD::Iterator::Iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace_m_s_d">MSD</link>&#32;&amp;msd,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;:&#32;msd(msd),&#32;i(i)&#32;{
1442 }
1443 
1444 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a8ad36deb75ea34c351470a210dc5f8df">MSD::Iterator::getIndex</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msd.indices.at(i);
1446 }
1447 
1448 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aff3d00d1f3d3abc57ab3e1708f22046e">MSD::Iterator::getX</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msd.x(&#32;getIndex()&#32;);
1450 }
1451 
1452 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a74a04cdef90898fe9ecac8fe91a67cec">MSD::Iterator::getY</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msd.y(&#32;getIndex()&#32;);
1454 }
1455 
1456 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a6b7cdba16db28e6b16dbf1f60361a83b">MSD::Iterator::getZ</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msd.z(&#32;getIndex()&#32;);
1458 }
1459 
1460 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1afea68bb7dba79b2747964d9d1d52cdfe">MSD::Iterator::getSpin</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msd.<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(&#32;this-&gt;getIndex()&#32;);
1462 }
1463 
1464 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1abd996192129eb23f7679d731bb831e08">MSD::Iterator::getFlux</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msd.<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(&#32;this-&gt;getIndex()&#32;);
1466 }
1467 
1468 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a8c8ea6d938c5e7497e26d36bd603c7b3">MSD::Iterator::getLocalM</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msd.<link linkend="_classudc_1_1_m_s_d_1af0cad12dfc8de11dfbbb600672b94a53">getLocalM</link>(&#32;this-&gt;getIndex()&#32;);
1470 }
1471 
1472 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1abb6e962e7a330c8a6deb53b4af1a33eb">MSD::Iterator::operator*</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1af0cad12dfc8de11dfbbb600672b94a53">getLocalM</link>();
1474 }
1475 
1476 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a9d84bb256488be2f19c519c1edc94bf2">MSD::Iterator::operator[]</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(*<emphasis role="keyword">this</emphasis>&#32;+&#32;n);
1478 }
1479 
1480 MSD::Iterator::operator&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;int()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getIndex();
1482 }
1483 
1484 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&amp;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aa2acdacfb5a3b245e86d52caf6ccee5b">MSD::Iterator::operator++</link>()&#32;{
1485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&gt;=&#32;msd.indices.size())
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;can&apos;t&#32;increment&#32;MSD::Iterator&#32;==&#32;msd.end()&quot;</emphasis>);
1487 &#32;&#32;&#32;&#32;++i;
1488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1489 }
1490 
1491 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aa2acdacfb5a3b245e86d52caf6ccee5b">MSD::Iterator::operator++</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{
1492 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;prev&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1493 &#32;&#32;&#32;&#32;++(*this);
1494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prev;
1495 }
1496 
1497 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&amp;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a9b7068af2426eff599c7898cc556d80c">MSD::Iterator::operator--</link>()&#32;{
1498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;=&#32;0)
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;can&apos;t&#32;decrement&#32;MSD::Iterator&#32;==&#32;msd.begin()&quot;</emphasis>);
1500 &#32;&#32;&#32;&#32;--i;
1501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1502 }
1503 
1504 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a9b7068af2426eff599c7898cc556d80c">MSD::Iterator::operator--</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{
1505 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;prev&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1506 &#32;&#32;&#32;&#32;--(*this);
1507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prev;
1508 }
1509 
1510 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&amp;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1ae6a30558ca84c5c83e220f5f565c9337">MSD::Iterator::operator+=</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
1511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;n&#32;&lt;&#32;0&#32;)
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;-=&#32;-n;
1513 &#32;&#32;&#32;&#32;
1514 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;sum&#32;=&#32;i&#32;+&#32;n;&#32;
1515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sum&#32;&gt;&#32;msd.indices.size())
1516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;can&apos;t&#32;increment&#32;past&#32;msd.end()&quot;</emphasis>);
1517 &#32;&#32;&#32;&#32;i&#32;=&#32;sum;
1518 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1519 }
1520 
1521 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&amp;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1ae815a105b76ecd74ffbca42059dd66d5">MSD::Iterator::operator-=</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
1522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;n&#32;&lt;&#32;0&#32;)
1523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;-n;
1524 &#32;&#32;&#32;&#32;
1525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;&#32;i)
1526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;can&apos;t&#32;decrement&#32;past&#32;msd.begin()&quot;</emphasis>);
1527 &#32;&#32;&#32;&#32;i&#32;-=&#32;n;
1528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1529 }
1530 
1531 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a36610ced86cca4e0b20b3cae881bc949">MSD::Iterator::operator+</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1532 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;iter&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1533 &#32;&#32;&#32;&#32;iter&#32;+=&#32;n;
1534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter;
1535 }
1536 
1537 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1ad552ff63add04ee2f65ce2b635c82a3f">MSD::Iterator::operator-</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1538 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;iter&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1539 &#32;&#32;&#32;&#32;iter&#32;-=&#32;n;
1540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter;
1541 }
1542 
1543 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aa5f4db2e3ab06026529de54a9c22b7a4">MSD::Iterator::operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;&amp;msd&#32;!=&#32;&amp;iter.msd&#32;)
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;invalid_argument(<emphasis role="stringliteral">&quot;must&#32;compare&#32;two&#32;iterators&#32;from&#32;the&#32;same&#32;MSD&quot;</emphasis>);
1546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i&#32;==&#32;iter.i;
1547 }
1548 
1549 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1abfe94ce7e6d750efea5d32a705fe3cd3">MSD::Iterator::operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;iter);
1551 }
1552 
1553 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a066d2acce9354012cdbf70dcc7b4cc99">MSD::Iterator::operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;&amp;msd&#32;!=&#32;&amp;iter.msd&#32;)
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;invalid_argument(<emphasis role="stringliteral">&quot;must&#32;compare&#32;two&#32;iterators&#32;from&#32;the&#32;same&#32;MSD&quot;</emphasis>);
1556 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i&#32;&gt;&#32;iter.i;
1557 }
1558 
1559 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1aa1571de940e3cd6061568b26f6fd27c8">MSD::Iterator::operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;&amp;msd&#32;!=&#32;&amp;iter.msd&#32;)
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;invalid_argument(<emphasis role="stringliteral">&quot;must&#32;compare&#32;two&#32;iterators&#32;from&#32;the&#32;same&#32;MSD&quot;</emphasis>);
1562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i&#32;&lt;&#32;iter.i;
1563 }
1564 
1565 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a62aed3f164b19a1581de95ddee11cde9">MSD::Iterator::operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;&lt;&#32;iter);
1567 }
1568 
1569 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator_1a7c6a05177dd8932f7baa9aa441a59096">MSD::Iterator::operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>&#32;&amp;iter)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;&gt;&#32;iter);
1571 }
1572 
1573 
1574 <emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3d235795ecc459cc0c2069c3f05d089d">MSD::FlippingAlgorithm</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a7010b43c1e96eca520bcefba7aa36ad3">MSD::UP_DOWN_MODEL</link>&#32;=&#32;[](<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin,&#32;function&lt;double()&gt;&#32;rand)&#32;{
1575 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-spin;
1576 };
1577 
1578 <emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3d235795ecc459cc0c2069c3f05d089d">MSD::FlippingAlgorithm</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a82cedfe873fa654afa32ab3d1b6f3ead">MSD::CONTINUOUS_SPIN_MODEL</link>&#32;=&#32;[](<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin,&#32;function&lt;double()&gt;&#32;rand)&#32;{
1579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_vector_1a89b43ddd10a372d584a03a5583ad5652">Vector::sphericalForm</link>(&#32;spin.<link linkend="_classudc_1_1_vector_1ad0a32e923bceab96a3a1eb36b9cc5e3a">norm</link>(),&#32;2&#32;*&#32;PI&#32;*&#32;rand(),&#32;asin(2&#32;*&#32;rand()&#32;-&#32;1)&#32;);
1580 };
1581 
1582 <emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MSD::MolProtoFactory</link>&#32;<link linkend="_classudc_1_1_m_s_d_1ac578f0076fce752e661058c648d88997">MSD::LINEAR_MOL</link>&#32;=&#32;[](<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>)&#32;{
1583 &#32;&#32;&#32;&#32;<link linkend="__m_s_d-export_8cpp_1aec2cc3918e5933a0bad019dd661cdbef">MolProto</link>&#32;mol(<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>);
1584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>;&#32;i++)
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mol.connectNodes(i&#32;-&#32;1,&#32;i);
1586 &#32;&#32;&#32;&#32;mol.setLeads(0,&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>&#32;-&#32;1);
1587 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mol;
1588 };
1589 
1590 <emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MSD::MolProtoFactory</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a72708188b46e1ddffb7c6e2fec96c587">MSD::CIRCULAR_MOL</link>&#32;=&#32;[](<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>)&#32;{
1591 &#32;&#32;&#32;&#32;<link linkend="__m_s_d-export_8cpp_1aec2cc3918e5933a0bad019dd661cdbef">MolProto</link>&#32;mol(<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>);
1592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>;&#32;i++)
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mol.connectNodes(i&#32;-&#32;1,&#32;i);
1594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>&#32;&gt;=&#32;2)
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mol.connectNodes(<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>&#32;-&#32;1,&#32;0);
1596 &#32;&#32;&#32;&#32;mol.setLeads(0,&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>&#32;/&#32;2);
1597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mol;
1598 };
1599 
1600 
1601 Vector&#32;MSD::initSpin&#32;=&#32;<link linkend="_classudc_1_1_vector_1a969618e05cff7f052ae3e9fcf7b49104">Vector::J</link>;
1602 Vector&#32;MSD::initFlux&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
1603 
1604 
1605 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;MSD::index(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(z&#32;*&#32;height&#32;+&#32;y)&#32;*&#32;width&#32;+&#32;x;
1607 }
1608 
1609 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;MSD::x(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;%&#32;width;
1611 }
1612 
1613 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;MSD::y(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;%&#32;(width&#32;*&#32;height)&#32;/&#32;width;
1615 }
1616 
1617 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;MSD::z(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;/&#32;(width&#32;*&#32;height);
1619 }
1620 
1621 
1622 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;MSD::genSeed()&#32;{
1623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(time(NULL))&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;16&#32;)
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(clock())&#32;&amp;&#32;0xFF)&#32;&lt;&lt;&#32;8&#32;&#32;)
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(seed_count++)&#32;&amp;&#32;0xFF)&#32;);
1626 }
1627 
1628 
1629 <emphasis role="comment">//&#32;Note:&#32;&quot;molProtoFactory&quot;&#32;is&#32;a&#32;pointer&#32;so&#32;that&#32;it&#32;can&#32;be&#32;NULL</emphasis>
1630 <emphasis role="keywordtype">void</emphasis>&#32;MSD::init(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MolProtoFactory</link>&#32;*molProtoFactory)&#32;{
1631 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;preconditions:</emphasis>
1632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(width&#32;==&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;width&#32;=&#32;1;
1633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(height&#32;==&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;height&#32;=&#32;1;
1634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(depth&#32;==&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;depth&#32;=&#32;1;
1635 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(molPosR&#32;&gt;=&#32;width)&#32;&#32;&#32;molPosR&#32;=&#32;width&#32;-&#32;1;
1636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(molPosL&#32;&gt;&#32;width)&#32;&#32;&#32;&#32;molPosL&#32;=&#32;width;
1637 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(molPosR&#32;&lt;&#32;molPosL)&#32;&#32;molPosR&#32;=&#32;molPosL&#32;-&#32;1;
1638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bottomL&#32;&gt;=&#32;height)&#32;&#32;bottomL&#32;=&#32;height&#32;-&#32;1;
1639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(topL&#32;&gt;&#32;height)&#32;&#32;&#32;&#32;&#32;&#32;topL&#32;=&#32;height;
1640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bottomL&#32;&lt;&#32;topL)&#32;&#32;&#32;&#32;&#32;topL&#32;=&#32;bottomL&#32;-&#32;1;
1641 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(backR&#32;&gt;=&#32;depth)&#32;&#32;&#32;&#32;&#32;backR&#32;=&#32;depth&#32;-&#32;1;
1642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frontR&#32;&gt;&#32;depth)&#32;&#32;&#32;&#32;&#32;frontR&#32;=&#32;depth;
1643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(backR&#32;&lt;&#32;frontR)&#32;&#32;&#32;&#32;&#32;backR&#32;=&#32;frontR&#32;-&#32;1;
1644 
1645 &#32;&#32;&#32;&#32;spins.resize(width&#32;*&#32;height&#32;*&#32;depth);
1646 &#32;&#32;&#32;&#32;fluxes.resize(width&#32;*&#32;height&#32;*&#32;depth);
1647 
1648 &#32;&#32;&#32;&#32;FM_L_exists&#32;=&#32;(molPosL&#32;!=&#32;0);
1649 &#32;&#32;&#32;&#32;FM_R_exists&#32;=&#32;(molPosR&#32;+&#32;1&#32;&lt;&#32;width);
1650 &#32;&#32;&#32;&#32;mol_exists&#32;=&#32;(molPosL&#32;&lt;=&#32;molPosR);
1651 
1652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mol_exists)&#32;{
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mols.<link linkend="_classudc_1_1_sparse_array_1afdf642eb989638bb62e21563f83baa1c">resize</link>(width&#32;*&#32;height&#32;*&#32;depth);
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(molProtoFactory&#32;!=&#32;NULL)
1655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;molProto&#32;=&#32;(*molProtoFactory)(molPosR&#32;-&#32;molPosL&#32;+&#32;1);
1656 &#32;&#32;&#32;&#32;}
1657 
1658 &#32;&#32;&#32;&#32;seed&#32;=&#32;genSeed();
1659 &#32;&#32;&#32;&#32;prng.seed(seed);
1660 &#32;&#32;&#32;&#32;
1661 &#32;&#32;&#32;&#32;n&#32;=&#32;nL&#32;=&#32;nR&#32;=&#32;n_m&#32;=&#32;n_mL&#32;=&#32;n_mR&#32;=&#32;nLR&#32;=&#32;0;
1662 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a;
1663 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;0;&#32;z&#32;&lt;&#32;depth;&#32;z++&#32;)
1664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;0;&#32;y&#32;&lt;&#32;height;&#32;y++&#32;)&#32;{
1665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;left</emphasis>
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;0;&#32;x&#32;&lt;&#32;molPosL;&#32;x++&#32;)
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(topL&#32;&lt;=&#32;y&#32;&amp;&amp;&#32;y&#32;&lt;=&#32;bottomL)&#32;{
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;index(x,&#32;y,&#32;z);
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indices.push_back(a);
1670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spins[a]&#32;=&#32;initSpin;
1671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fluxes[a]&#32;=&#32;initFlux;
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n++;
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nL++;
1674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;+&#32;1&#32;==&#32;molPosL)&#32;{
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mol_exists)
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_mL++;
1677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FM_R_exists)
1678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nLR++;
1679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;mol</emphasis>
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mol_exists&#32;&amp;&amp;&#32;(((y&#32;==&#32;topL&#32;||&#32;y&#32;==&#32;bottomL)&#32;&amp;&amp;&#32;(frontR&#32;&lt;=&#32;z&#32;&amp;&amp;&#32;z&#32;&lt;=&#32;backR))&#32;||&#32;((z&#32;==&#32;frontR&#32;||&#32;z&#32;==&#32;backR)&#32;&amp;&amp;&#32;(topL&#32;&lt;=&#32;y&#32;&amp;&amp;&#32;y&#32;&lt;=&#32;bottomL)))&#32;)&#32;{
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;Mol&gt;&#32;mol&#32;=&#32;shared_ptr&lt;Mol&gt;(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ab3c0b3e8474e18cb213f79d66f221b67">Mol</link>(molProto,&#32;*<emphasis role="keyword">this</emphasis>,&#32;y,&#32;z,&#32;initSpin,&#32;initFlux));
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unique_mol_indices.push_back(index(molPosL,&#32;y,&#32;z));&#32;&#32;<emphasis role="comment">//&#32;store&#32;the&#32;indices&#32;for&#32;all&#32;unique&#32;Mol&#32;(Molecule::Instance)&#32;objects</emphasis>
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;molPosL;&#32;x&#32;&lt;=&#32;molPosR;&#32;x++&#32;)&#32;{
1686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;index(x,&#32;y,&#32;z);
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indices.push_back(a);
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mols[a]&#32;=&#32;mol;
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n++;
1690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_m++;
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;==&#32;molPosL&#32;&amp;&amp;&#32;FM_L_exists)
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_mL++;
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;==&#32;molPosR&#32;&amp;&amp;&#32;FM_R_exists)
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_mR++;
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;right</emphasis>
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;molPosR&#32;+&#32;1;&#32;x&#32;&lt;&#32;width;&#32;x++&#32;)
1699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frontR&#32;&lt;=&#32;z&#32;&amp;&amp;&#32;z&#32;&lt;=&#32;backR)&#32;{
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;index(x,&#32;y,&#32;z);
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indices.push_back(a);
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spins[a]&#32;=&#32;initSpin;
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fluxes[a]&#32;=&#32;initFlux;
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n++;
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nR++;
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;==&#32;molPosR&#32;+&#32;1)&#32;{
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mol_exists)
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_mR++;
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FM_L_exists)
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nLR++;
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1714 &#32;&#32;&#32;&#32;
1715 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a2ccd325cf09e82420004de9702894de5">flippingAlgorithm</link>&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a82cedfe873fa654afa32ab3d1b6f3ead">CONTINUOUS_SPIN_MODEL</link>;&#32;<emphasis role="comment">//&#32;set&#32;default&#32;&quot;flipping&quot;&#32;algorithm</emphasis>
1716 
1717 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1aa1513f639c10ca29773ea287ae104121">setParameters</link>(parameters);&#32;<emphasis role="comment">//&#32;calculate&#32;initial&#32;state&#32;(&quot;Results&quot;)&#32;for&#32;FM&#32;sections</emphasis>
1718 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1aa8ed0dab0705b810e4d14215b488fb43">setMolProto</link>(molProto);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;initial&#32;state&#32;(&quot;Results&quot;)&#32;for&#32;mol.&#32;section</emphasis>
1719 }
1720 
1721 <link linkend="_class_m_s_d_1_1_m_s_d">MSD::MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
1722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">MolProto</link>&#32;&amp;molProto,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosL,
1723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;topL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bottomL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;frontR,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;backR)
1724 :&#32;width(width),&#32;height(height),&#32;depth(depth),&#32;molPosL(molPosL),&#32;molPosR(molProto.<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>()&#32;-&#32;1),
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topL(topL),&#32;bottomL(bottomL),&#32;frontR(frontR),&#32;backR(backR),&#32;molProto(molProto)
1726 {
1727 &#32;&#32;&#32;&#32;init();
1728 }
1729 
1730 <link linkend="_class_m_s_d_1_1_m_s_d">MSD::MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa5aef25b88fee8190e1ac32070d06d66">MolProtoFactory</link>&#32;&amp;molType,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosR,
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;topL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bottomL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;frontR,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;backR)
1733 :&#32;width(width),&#32;height(height),&#32;depth(depth),&#32;molPosL(molPosL),&#32;molPosR(molPosR),
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topL(topL),&#32;bottomL(bottomL),&#32;frontR(frontR),&#32;backR(backR)
1735 {
1736 &#32;&#32;&#32;&#32;init(&amp;molType);
1737 }
1738 
1739 <link linkend="_class_m_s_d_1_1_m_s_d">MSD::MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
1740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;molPosR,
1741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;topL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bottomL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;frontR,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;backR)
1742 :&#32;width(width),&#32;height(height),&#32;depth(depth),&#32;molPosL(molPosL),&#32;molPosR(molPosR),
1743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topL(topL),&#32;bottomL(bottomL),&#32;frontR(frontR),&#32;backR(backR)
1744 {
1745 &#32;&#32;&#32;&#32;init(&amp;<link linkend="_classudc_1_1_m_s_d_1ac578f0076fce752e661058c648d88997">LINEAR_MOL</link>);
1746 }
1747 
1748 
1749 <link linkend="_class_m_s_d_1_1_m_s_d">MSD::MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
1750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;heightL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;depthR)
1751 :&#32;width(width),&#32;height(height),&#32;depth(depth),&#32;molPosL((width&#32;-&#32;1)&#32;/&#32;2),&#32;molPosR((width&#32;-&#32;1)&#32;/&#32;2),
1752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topL(&#32;(unsigned&#32;int)&#32;ceil((height&#32;-&#32;1&#32;-&#32;heightL)&#32;/&#32;2.0)&#32;),
1753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bottomL(&#32;(unsigned&#32;int)&#32;floor((height&#32;-&#32;1&#32;+&#32;heightL)&#32;/&#32;2.0)&#32;),
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frontR(&#32;(unsigned&#32;int)&#32;ceil((depth&#32;-&#32;1&#32;-&#32;depthR)&#32;/&#32;2.0)&#32;),
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;backR(&#32;(unsigned&#32;int)&#32;floor((depth&#32;-&#32;1&#32;+&#32;depthR)&#32;/&#32;2.0)&#32;)
1756 {
1757 &#32;&#32;&#32;&#32;init(&amp;<link linkend="_classudc_1_1_m_s_d_1ac578f0076fce752e661058c648d88997">LINEAR_MOL</link>);
1758 }
1759 
1760 
1761 <link linkend="_class_m_s_d_1_1_m_s_d">MSD::MSD</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth)
1762 :&#32;width(width),&#32;height(height),&#32;depth(depth),&#32;molPosL((width&#32;-&#32;1)&#32;/&#32;2),&#32;molPosR(width&#32;/&#32;2),
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topL(0),&#32;bottomL(height&#32;-&#32;1),&#32;frontR(0),&#32;backR(depth&#32;-&#32;1)
1764 {
1765 &#32;&#32;&#32;&#32;init(&amp;<link linkend="_classudc_1_1_m_s_d_1ac578f0076fce752e661058c648d88997">LINEAR_MOL</link>);
1766 }
1767 
1768 <link linkend="_structudc_1_1_m_s_d_1_1_parameters">MSD::Parameters</link>&#32;<link linkend="_classudc_1_1_m_s_d_1abfa4f6883d0b4677ab7b70c1adf06066">MSD::getParameters</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
1769 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parameters;
1770 }
1771 
1772 <emphasis role="comment">//&#32;Molecule&#32;parameters&#32;can&#32;no&#32;longer&#32;be&#32;changed&#32;with&#32;MSD::setParameters().</emphasis>
1773 <emphasis role="comment">//&#32;Instead&#32;use&#32;MSD::setMolProto()&#32;to&#32;change&#32;mol&#32;type.</emphasis>
1774 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa1513f639c10ca29773ea287ae104121">MSD::setParameters</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">MSD::Parameters</link>&#32;&amp;p)&#32;{
1775 &#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_parameters">MSD::Parameters</link>&#32;p0&#32;=&#32;parameters;&#32;&#32;<emphasis role="comment">//&#32;old&#32;parameters</emphasis>
1776 &#32;&#32;&#32;&#32;parameters&#32;=&#32;p;&#32;&#32;<emphasis role="comment">//&#32;update&#32;to&#32;new&#32;parameters</emphasis>
1777 &#32;&#32;&#32;&#32;
1778 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;Spin&#32;and&#32;Spin&#32;Flux&#32;Magnitudes&#32;-----</emphasis>
1779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;iter&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1afb91b037de5315bfde0159ee591267a3">begin</link>();&#32;iter&#32;!=&#32;<link linkend="_classudc_1_1_m_s_d_1a917317363ac8e2e78840845d6fc49f91">end</link>();&#32;++iter&#32;)&#32;{
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;iter.getIndex();
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;iter.getX();
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&lt;&#32;molPosL&#32;)&#32;{
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spins[i].normalize()&#32;*=&#32;parameters.SL;
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fluxes[i]&#32;*=&#32;p0.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a55712b42b9d9460519b2ffc4a24cdd96">FL</link>&#32;!=&#32;0&#32;?&#32;parameters.FL&#32;/&#32;p0.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a55712b42b9d9460519b2ffc4a24cdd96">FL</link>&#32;:&#32;0;
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&gt;&#32;molPosR&#32;)&#32;{
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spins[i].normalize()&#32;*=&#32;parameters.SR;
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fluxes[i]&#32;*=&#32;p0.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a3b84c7bdff2e5acbf7e2aee9f4f87380">FR</link>&#32;!=&#32;0&#32;?&#32;parameters.FR&#32;/&#32;p0.<link linkend="_structudc_1_1_m_s_d_1_1_parameters_1a3b84c7bdff2e5acbf7e2aee9f4f87380">FR</link>&#32;:&#32;0;
1788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;mol:&#32;do&#32;nothing&#32;(see:&#32;MSD::setMolProto)</emphasis>
1789 &#32;&#32;&#32;&#32;}
1790 &#32;&#32;&#32;&#32;
1791 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;Magnetization,&#32;Anisotropy,&#32;and&#32;other&#32;local&#32;phenomenon&#32;-----</emphasis>
1792 &#32;&#32;&#32;&#32;results.MSL&#32;=&#32;results.MSR&#32;=&#32;results.MFL&#32;=&#32;results.MFR&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
1793 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;anisotropy_L&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>,&#32;anisotropy_R&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
1794 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_e0_L&#32;=&#32;0,&#32;couple_e0_R&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;f_i)</emphasis>
1795 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;iter&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1afb91b037de5315bfde0159ee591267a3">begin</link>();&#32;iter&#32;!=&#32;<link linkend="_classudc_1_1_m_s_d_1a917317363ac8e2e78840845d6fc49f91">end</link>();&#32;++iter&#32;)&#32;{
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;iter.getX();
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;iter.getSpin();
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f&#32;=&#32;iter.getFlux();
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;localM&#32;=&#32;s&#32;+&#32;f;
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&lt;&#32;molPosL&#32;)&#32;{
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MSL&#32;+=&#32;s;
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MFL&#32;+=&#32;f;
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anisotropy_L.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(&#32;localM.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>&#32;);
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anisotropy_L.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(&#32;localM.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>&#32;);
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anisotropy_L.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(&#32;localM.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>&#32;);
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e0_L&#32;+=&#32;s&#32;*&#32;f;
1807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&gt;&#32;molPosR&#32;)&#32;{
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MSR&#32;+=&#32;s;
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MFR&#32;+=&#32;f;
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anisotropy_R.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(&#32;localM.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>&#32;);
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anisotropy_R.y&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(&#32;localM.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>&#32;);
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anisotropy_R.z&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(&#32;localM.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>&#32;);
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e0_R&#32;+=&#32;s&#32;*&#32;f;
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;mol:&#32;do&#32;nothing&#32;(see:&#32;MSD::setMolProto)</emphasis>
1815 &#32;&#32;&#32;&#32;}
1816 &#32;&#32;&#32;&#32;results.MS&#32;=&#32;results.MSL&#32;+&#32;results.MSR&#32;+&#32;results.MSm;&#32;&#32;<emphasis role="comment">//&#32;aggregate&#32;spins</emphasis>
1817 &#32;&#32;&#32;&#32;results.MF&#32;=&#32;results.MFL&#32;+&#32;results.MFR&#32;+&#32;results.MFm;&#32;&#32;<emphasis role="comment">//&#32;aggregate&#32;fluxes</emphasis>
1818 &#32;&#32;&#32;&#32;results.ML&#32;=&#32;results.MSL&#32;+&#32;results.MFL;&#32;&#32;<emphasis role="comment">//&#32;aggregate&#32;Left&#32;FM</emphasis>
1819 &#32;&#32;&#32;&#32;results.MR&#32;=&#32;results.MSR&#32;+&#32;results.MFR;&#32;&#32;<emphasis role="comment">//&#32;aggregate&#32;Right&#32;FM</emphasis>
1820 &#32;&#32;&#32;&#32;results.M&#32;=&#32;results.ML&#32;+&#32;results.MR&#32;+&#32;results.Mm;&#32;&#32;<emphasis role="comment">//&#32;aggregate&#32;total</emphasis>
1821 &#32;&#32;&#32;&#32;
1822 
1823 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;Internal&#32;Energy&#32;-----</emphasis>
1824 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;left&#32;section&#32;(FM_L)</emphasis>
1825 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ss_L&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;s_j)</emphasis>
1826 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_e1_L&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;f_j)</emphasis>
1827 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ee_L&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(f_i&#32;*&#32;f_j)</emphasis>
1828 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;biquad_L&#32;=&#32;0;
1829 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dmi_L&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;&#32;&#32;<emphasis role="comment">//&#32;sum(m_i&#32;x&#32;m_j);&#32;&#32;where&#32;x&#32;is&#32;cross&#32;product,&#32;and&#32;i&#32;&lt;&#32;j</emphasis>
1830 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;0;&#32;z&#32;&lt;&#32;depth;&#32;z++&#32;)
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;topL;&#32;y&#32;&lt;=&#32;bottomL;&#32;y++&#32;)
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;0;&#32;x&#32;&lt;&#32;molPosL;&#32;x++&#32;)&#32;{
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;index(x,&#32;y,&#32;z);
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a);
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a);
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m&#32;=&#32;s&#32;+&#32;f;
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;+&#32;1&#32;&lt;&#32;molPosL&#32;)&#32;{
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(x&#32;+&#32;1,&#32;y,&#32;z);
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
1842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_L&#32;+=&#32;s&#32;*&#32;spin;
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_L&#32;+=&#32;s&#32;*&#32;flux;
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_L&#32;+=&#32;f&#32;*&#32;spin;
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_L&#32;+=&#32;f&#32;*&#32;flux;
1846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_L&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
1847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_L&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;y&#32;+&#32;1&#32;&lt;=&#32;bottomL&#32;)&#32;{
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(x,&#32;y&#32;+&#32;1,&#32;z);
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_L&#32;+=&#32;s&#32;*&#32;spin;
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_L&#32;+=&#32;s&#32;*&#32;flux;
1856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_L&#32;+=&#32;f&#32;*&#32;spin;
1857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_L&#32;+=&#32;f&#32;*&#32;flux;
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_L&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_L&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;z&#32;+&#32;1&#32;&lt;&#32;depth&#32;)&#32;{
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(x,&#32;y,&#32;z&#32;+&#32;1);
1863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
1866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_L&#32;+=&#32;s&#32;*&#32;spin;
1867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_L&#32;+=&#32;s&#32;*&#32;flux;
1868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_L&#32;+=&#32;f&#32;*&#32;spin;
1869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_L&#32;+=&#32;f&#32;*&#32;flux;
1870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_L&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_L&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1874 &#32;&#32;&#32;&#32;results.UL&#32;=&#32;0;
1875 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;parameters.JL&#32;*&#32;couple_ss_L;
1876 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;parameters.Je0L&#32;*&#32;couple_e0_L;
1877 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;parameters.Je1L&#32;*&#32;couple_e1_L;
1878 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;parameters.JeeL&#32;*&#32;couple_ee_L;
1879 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;parameters.B&#32;*&#32;results.ML;
1880 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;parameters.AL&#32;*&#32;anisotropy_L;
1881 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;parameters.bL&#32;*&#32;biquad_L;
1882 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;parameters.DL&#32;*&#32;dmi_L;
1883 &#32;&#32;&#32;&#32;
1884 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;right&#32;section&#32;(FM_R)</emphasis>
1885 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ss_R&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;s_j)</emphasis>
1886 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_e1_R&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;f_j)</emphasis>
1887 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ee_R&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(f_i&#32;*&#32;f_j)</emphasis>
1888 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;biquad_R&#32;=&#32;0;
1889 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dmi_R&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;&#32;&#32;<emphasis role="comment">//&#32;sum(m_i&#32;x&#32;m_j);&#32;&#32;where&#32;x&#32;is&#32;cross&#32;product,&#32;and&#32;i&#32;&lt;&#32;j</emphasis>
1890 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;frontR;&#32;z&#32;&lt;=&#32;backR;&#32;z++&#32;)
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;0;&#32;y&#32;&lt;&#32;height;&#32;y++&#32;)
1892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;molPosR&#32;+&#32;1;&#32;x&#32;&lt;&#32;width;&#32;x++&#32;)&#32;{
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;index(x,&#32;y,&#32;z);
1894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a);
1895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a);
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m&#32;=&#32;s&#32;+&#32;f;
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;+&#32;1&#32;&lt;&#32;width&#32;)&#32;{
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(x&#32;+&#32;1,&#32;y,&#32;z);
1899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
1902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_R&#32;+=&#32;s&#32;*&#32;spin;
1903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_R&#32;+=&#32;s&#32;*&#32;flux;
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_R&#32;+=&#32;f&#32;*&#32;spin;
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_R&#32;+=&#32;f&#32;*&#32;flux;
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_R&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_R&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;y&#32;+&#32;1&#32;&lt;&#32;height&#32;)&#32;{
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(x,&#32;y&#32;+&#32;1,&#32;z);
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_R&#32;+=&#32;s&#32;*&#32;spin;
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_R&#32;+=&#32;s&#32;*&#32;flux;
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_R&#32;+=&#32;f&#32;*&#32;spin;
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_R&#32;+=&#32;f&#32;*&#32;flux;
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_R&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_R&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;z&#32;+&#32;1&#32;&lt;=&#32;backR&#32;)&#32;{
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(x,&#32;y,&#32;z&#32;+&#32;1);
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_R&#32;+=&#32;s&#32;*&#32;spin;
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_R&#32;+=&#32;s&#32;*&#32;flux;
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_R&#32;+=&#32;f&#32;*&#32;spin;
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_R&#32;+=&#32;f&#32;*&#32;flux;
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_R&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_R&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1934 &#32;&#32;&#32;&#32;results.UR&#32;=&#32;0;
1935 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;parameters.JR&#32;*&#32;couple_ss_R;
1936 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;parameters.Je0R&#32;*&#32;couple_e0_R;
1937 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;parameters.Je1R&#32;*&#32;couple_e1_R;
1938 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;parameters.JeeR&#32;*&#32;couple_ee_R;
1939 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;parameters.B&#32;*&#32;results.MR;
1940 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;parameters.AR&#32;*&#32;anisotropy_R;
1941 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;parameters.bR&#32;*&#32;biquad_R;
1942 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;parameters.DR&#32;*&#32;dmi_R;
1943 
1944 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;need&#32;to&#32;re-compute&#32;results.Um&#32;(see:&#32;MSD::setMolProto)</emphasis>
1945 &#32;&#32;&#32;&#32;
1946 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;mL&quot;&#32;secttion&#32;(coupling&#32;between&#32;FM_L&#32;and&#32;mol.)</emphasis>
1947 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ss_mL&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;s_j)</emphasis>
1948 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_e1_mL&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;f_j)</emphasis>
1949 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ee_mL&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(f_i&#32;*&#32;f_j)</emphasis>
1950 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;biquad_mL&#32;=&#32;0;
1951 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dmi_mL&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;&#32;&#32;<emphasis role="comment">//&#32;sum(m_i&#32;x&#32;m_j);&#32;&#32;where&#32;x&#32;is&#32;cross&#32;product,&#32;and&#32;i&#32;&lt;&#32;j</emphasis>
1952 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x1&#32;=&#32;molPosL&#32;-&#32;1;&#32;<emphasis role="comment">//&#32;only&#32;useful&#32;if(&#32;molPosL&#32;!=&#32;0&#32;);&#32;i.e.&#32;FM_L_exists</emphasis>
1953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;FM_L_exists&#32;&amp;&amp;&#32;mol_exists&#32;)
1954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;topL;&#32;y&#32;&lt;=&#32;bottomL;&#32;y++&#32;)
1955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;frontR;&#32;z&#32;&lt;=&#32;backR;&#32;z++&#32;)
1956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;y&#32;==&#32;topL&#32;||&#32;z&#32;==&#32;frontR&#32;||&#32;y&#32;==&#32;bottomL&#32;||&#32;z&#32;==&#32;backR&#32;)&#32;{
1957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;index(x1,&#32;y,&#32;z);
1958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a);
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a);
1960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m&#32;=&#32;s&#32;+&#32;f;
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(molPosL&#32;+&#32;molProto.leftLead,&#32;y,&#32;z);
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
1963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_mL&#32;+=&#32;s&#32;*&#32;spin;
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_mL&#32;+=&#32;s&#32;*&#32;flux;
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_mL&#32;+=&#32;f&#32;*&#32;spin;
1968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_mL&#32;+=&#32;f&#32;*&#32;flux;
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_mL&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
1970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_mL&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);&#32;&#32;<emphasis role="comment">//&#32;location(m)=x1&#32;in&#32;FM_L&#32;&lt;&#32;location(mag)=molPosL&#32;+&#32;leftLead&#32;in&#32;mol.</emphasis>
1971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1972 &#32;&#32;&#32;&#32;results.UmL&#32;=&#32;0;
1973 &#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.JmL&#32;*&#32;couple_ss_mL;
1974 &#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.Je1mL&#32;*&#32;couple_e1_mL;
1975 &#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.JeemL&#32;*&#32;couple_ee_mL;
1976 &#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.bmL&#32;*&#32;biquad_mL;
1977 &#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.DmL&#32;*&#32;dmi_mL;
1978 &#32;&#32;&#32;&#32;
1979 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;mR&quot;&#32;section&#32;(coupling&#32;between&#32;mol.&#32;and&#32;FM_R)</emphasis>
1980 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ss_mR&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;s_j)</emphasis>
1981 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_e1_mR&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;f_j)</emphasis>
1982 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ee_mR&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(f_i&#32;*&#32;f_j)</emphasis>
1983 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;biquad_mR&#32;=&#32;0;
1984 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dmi_mR&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;&#32;&#32;<emphasis role="comment">//&#32;sum(m_i&#32;x&#32;m_j);&#32;&#32;where&#32;x&#32;is&#32;cross&#32;product,&#32;and&#32;i&#32;&lt;&#32;j</emphasis>
1985 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x2&#32;=&#32;molPosR&#32;+&#32;1;&#32;<emphasis role="comment">//&#32;only&#32;useful&#32;if(&#32;molPosR&#32;!=&#32;width&#32;-&#32;1&#32;);&#32;i.e.&#32;FM_R_exists</emphasis>
1986 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;FM_R_exists&#32;&amp;&amp;&#32;mol_exists&#32;)
1987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;topL;&#32;y&#32;&lt;=&#32;bottomL;&#32;y++&#32;)
1988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;frontR;&#32;z&#32;&lt;=&#32;backR;&#32;z++&#32;)
1989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;y&#32;==&#32;topL&#32;||&#32;z&#32;==&#32;frontR&#32;||&#32;y&#32;==&#32;bottomL&#32;||&#32;z&#32;==&#32;backR&#32;)&#32;{
1990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;index(molPosL&#32;+&#32;molProto.rightLead,&#32;y,&#32;z);
1991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a);
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a);
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m&#32;=&#32;s&#32;+&#32;f;
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(x2,&#32;y,&#32;z);
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
1998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_mR&#32;+=&#32;s&#32;*&#32;spin;
1999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_mR&#32;+=&#32;s&#32;*&#32;flux;
2000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_mR&#32;+=&#32;f&#32;*&#32;spin;
2001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_mR&#32;+=&#32;f&#32;*&#32;flux;
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_mR&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_mR&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);&#32;<emphasis role="comment">//&#32;location(m)=molPosL&#32;+&#32;rightLead&#32;in&#32;mol.&#32;&lt;&#32;location(mag)=x2&#32;in&#32;FM_R</emphasis>
2004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2005 &#32;&#32;&#32;&#32;results.UmR&#32;=&#32;0;
2006 &#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.JmR&#32;*&#32;couple_ss_mR;
2007 &#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.Je1mR&#32;*&#32;couple_e1_mR;
2008 &#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.JeemR&#32;*&#32;couple_ee_mR;
2009 &#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.bmR&#32;*&#32;biquad_mR;
2010 &#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.DmR&#32;*&#32;dmi_mR;
2011 &#32;&#32;&#32;&#32;
2012 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;LR&quot;&#32;section&#32;(coupling&#32;between&#32;FM_L&#32;and&#32;FM_R)</emphasis>
2013 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ss_LR&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;s_j)</emphasis>
2014 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_e1_LR&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(s_i&#32;*&#32;f_j)</emphasis>
2015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;couple_ee_LR&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;sum(f_i&#32;*&#32;f_j)</emphasis>
2016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;biquad_LR&#32;=&#32;0;
2017 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dmi_LR&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;&#32;&#32;<emphasis role="comment">//&#32;sum(m_i&#32;x&#32;m_j);&#32;&#32;where&#32;x&#32;is&#32;cross&#32;product,&#32;and&#32;i&#32;&lt;&#32;j</emphasis>
2018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;FM_L_exists&#32;&amp;&amp;&#32;FM_R_exists&#32;)
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;frontR;&#32;z&#32;&lt;=&#32;backR;&#32;z++&#32;)
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;topL;&#32;y&#32;&lt;=&#32;bottomL;&#32;y++&#32;)&#32;{
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;index(x1,&#32;y,&#32;z);
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a);
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a);
2024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m&#32;=&#32;s&#32;+&#32;f;
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;neighbor&#32;=&#32;index(x2,&#32;y,&#32;z);
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;spin&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(neighbor);
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;flux&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(neighbor);
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ss_LR&#32;+=&#32;s&#32;*&#32;spin;
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_LR&#32;+=&#32;s&#32;*&#32;flux;
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_e1_LR&#32;+=&#32;f&#32;*&#32;spin;
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;couple_ee_LR&#32;+=&#32;f&#32;*&#32;flux;
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biquad_LR&#32;+=&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m&#32;*&#32;mag);
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dmi_LR&#32;+=&#32;m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(mag);&#32;<emphasis role="comment">//&#32;location(m)&#32;=&#32;x1&#32;in&#32;FM_L&#32;&lt;&#32;location(mag)&#32;=&#32;x2&#32;in&#32;FM_R</emphasis>
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2036 &#32;&#32;&#32;&#32;results.ULR&#32;=&#32;0;
2037 &#32;&#32;&#32;&#32;results.ULR&#32;-=&#32;parameters.JLR&#32;*&#32;couple_ss_LR;
2038 &#32;&#32;&#32;&#32;results.ULR&#32;-=&#32;parameters.Je1LR&#32;*&#32;couple_e1_LR;
2039 &#32;&#32;&#32;&#32;results.ULR&#32;-=&#32;parameters.JeeLR&#32;*&#32;couple_ee_LR;
2040 &#32;&#32;&#32;&#32;results.ULR&#32;-=&#32;parameters.bLR&#32;*&#32;biquad_LR;
2041 &#32;&#32;&#32;&#32;results.ULR&#32;-=&#32;parameters.DLR&#32;*&#32;dmi_LR;
2042 &#32;&#32;&#32;&#32;&#32;
2043 &#32;&#32;&#32;&#32;results.U&#32;=&#32;results.UL&#32;+&#32;results.UR&#32;+&#32;results.Um&#32;+&#32;results.UmL&#32;+&#32;results.UmR&#32;+&#32;results.ULR;
2044 }
2045 
2046 <link linkend="_structudc_1_1_m_s_d_1_1_results">MSD::Results</link>&#32;<link linkend="_classudc_1_1_m_s_d_1ae1bee2a207b40720156243ed19eed671">MSD::getResults</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;results;
2048 }
2049 
2050 
2051 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a5c1d308f90d10072e5288685ba4d58db">MSD::set_kT</link>(<emphasis role="keywordtype">double</emphasis>&#32;kT)&#32;{
2052 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;kT&#32;doesn&apos;t&#32;effect&#32;energy&#32;(U)</emphasis>
2053 &#32;&#32;&#32;&#32;parameters.kT&#32;=&#32;kT;
2054 }
2055 
2056 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a18aa13537e0deda7d1263c1fd8d8228a">MSD::setB</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;B)&#32;{
2057 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;optimized&#32;energy&#32;recalculation&#32;when&#32;only&#32;changing&#32;magnetic&#32;field</emphasis>
2058 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;deltaB&#32;=&#32;B&#32;-&#32;parameters.B;
2059 &#32;&#32;&#32;&#32;
2060 &#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaB&#32;*&#32;results.ML;
2061 &#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaB&#32;*&#32;results.MR;
2062 &#32;&#32;&#32;&#32;results.Um&#32;-=&#32;deltaB&#32;*&#32;results.Mm;
2063 &#32;&#32;&#32;&#32;results.U&#32;=&#32;results.UL&#32;+&#32;results.UR&#32;+&#32;results.Um&#32;+&#32;results.UmL&#32;+&#32;results.UmR&#32;+&#32;results.ULR;
2064 &#32;&#32;&#32;&#32;
2065 &#32;&#32;&#32;&#32;parameters.B&#32;=&#32;B;
2066 }
2067 
2068 
2069 <link linkend="_classudc_1_1_molecule">MSD::MolProto</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a77dce5d8c1a874c47acfbc69d5a867ab">MSD::getMolProto</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;molProto;
2071 }
2072 
2073 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aa8ed0dab0705b810e4d14215b488fb43">MSD::setMolProto</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_molecule">MolProto</link>&#32;&amp;molProto)&#32;{
2074 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>&#32;=&#32;this-&gt;molProto.<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>();
2075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(molProto.<link linkend="_classudc_1_1_molecule_1abedb9f1c61ee095af402a365207eacef">nodeCount</link>()&#32;!=&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>)
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_molecule_exception">MSD::MoleculeException</link>(<emphasis role="stringliteral">&quot;Can&#32;not&#32;change&#32;the&#32;number&#32;of&#32;nodes&#32;in&#32;the&#32;molecule&#32;after&#32;MSD&#32;creation.&#32;Must&#32;create&#32;a&#32;new&#32;MSD.&quot;</emphasis>);
2077 
2078 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;remove&#32;energy&#32;caused&#32;by&#32;previous&#32;mol.&#32;and&#32;leads&#32;from&#32;aggregate:&#32;U&#32;-----</emphasis>
2079 &#32;&#32;&#32;&#32;results.U&#32;-=&#32;results.Um&#32;+&#32;results.UmL&#32;+&#32;results.UmR;
2080 
2081 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;reset&#32;some&#32;Results&#32;-----</emphasis>
2082 &#32;&#32;&#32;&#32;results.MSm&#32;=&#32;results.MFm&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
2083 &#32;&#32;&#32;&#32;results.Um&#32;=&#32;results.UmL&#32;=&#32;results.UmR&#32;=&#32;0;
2084 
2085 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NodeParameters:&#32;Sm,&#32;Fm,&#32;Je0m,&#32;Am</emphasis>
2086 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;Update&#32;spin&#32;and&#32;flux&#32;Vectors&#32;(Sm,&#32;Fm),&#32;and&#32;Calculate&#32;local&#32;Energy&#32;and&#32;Magnetization&#32;(B,&#32;Je0m,&#32;Am)&#32;-----</emphasis>
2087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;:&#32;unique_mol_indices)&#32;{
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;this-&gt;y(a);
2089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;this-&gt;z(a);
2090 
2091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;because&#32;Mol::prototype&#32;is&#32;a&#32;reference&#32;(acting&#32;like&#32;a&#32;pointer),&#32;it&#32;must&#32;refer&#32;to&#32;the&#32;global&#32;field:&#32;this-&gt;molProto</emphasis>
2092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;field&#32;will&#32;be&#32;updated&#32;to&#32;the&#32;new&#32;molProto&#32;before&#32;this&#32;function&#32;returns</emphasis>
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;Mol&gt;&#32;oldMol&#32;=&#32;mols[a];
2094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;Mol&gt;&#32;mol&#32;=&#32;shared_ptr&lt;Mol&gt;(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ab3c0b3e8474e18cb213f79d66f221b67">Mol</link>(this-&gt;molProto,&#32;*<emphasis role="keyword">this</emphasis>,&#32;y,&#32;z,&#32;initSpin,&#32;initFlux));
2095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;0;&#32;n&#32;&lt;&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>;&#32;n++)&#32;{
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;s&#32;=&#32;mol-&gt;spins[n];
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;f&#32;=&#32;mol-&gt;fluxes[n];
2099 
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;parameters&#32;=&#32;molProto.nodes[n].parameters;
2101 
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;scale&#32;spin&#32;Vector</emphasis>
2103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;oldMol-&gt;spins[n].<link linkend="_classudc_1_1_vector_1ac385aa5781a8b72847e6b28dcaa5e917">normalize</link>()&#32;*&#32;parameters.Sm;
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;scale&#32;flux&#32;Vector</emphasis>
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;oldFm&#32;=&#32;this-&gt;molProto.nodes[n].parameters.Fm;
2107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f&#32;=&#32;oldFm&#32;!=&#32;0&#32;?&#32;oldMol-&gt;fluxes[n]&#32;*&#32;(parameters.Fm&#32;/&#32;oldFm)&#32;:&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2109 
2110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;store&#32;new&#32;Mol&#32;(Molecule::Instance)&#32;over&#32;old&#32;one.&#32;old&#32;pointer&#32;should&#32;be&#32;destructed!</emphasis>
2111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mols[index(molPosL&#32;+&#32;n,&#32;y,&#32;z)]&#32;=&#32;mol;
2112 
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;&quot;Results&quot;</emphasis>
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MSm&#32;+=&#32;s;
2115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MFm&#32;+=&#32;f;
2116 
2117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m&#32;=&#32;s&#32;+&#32;f;
2118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;this-&gt;parameters.B&#32;*&#32;m;
2119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;parameters.Am&#32;*&#32;<link linkend="_classudc_1_1_vector">Vector</link>(<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>));
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;parameters.Je0m&#32;*&#32;(s&#32;*&#32;f);
2121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2122 
2123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delete&#32;oldMol;&#32;&#32;//&#32;not&#32;needed&#32;because&#32;of&#32;shared_ptr</emphasis>
2124 &#32;&#32;&#32;&#32;}
2125 
2126 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;EdgeParameters:&#32;Jm,&#32;Je1m,&#32;Jeem,&#32;bm,&#32;Dm</emphasis>
2127 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;Calculate&#32;bond&#32;energy&#32;(Jm,&#32;Je1m,&#32;Jeem,&#32;bm,&#32;Dm)&#32;-----</emphasis>
2128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;:&#32;unique_mol_indices)&#32;{
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ab3c0b3e8474e18cb213f79d66f221b67">Mol</link>&#32;&amp;mol&#32;=&#32;*mols[a];
2130 
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;0;&#32;n&#32;&lt;&#32;<link linkend="__m_s_d-export_8cpp_1a16c69478280e0f9d6898c700f3b51574">nodeCount</link>;&#32;n++)&#32;{&#32;&#32;<emphasis role="comment">//&#32;for&#32;each&#32;node</emphasis>
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s_i&#32;=&#32;mol.spins[n];
2133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f_i&#32;=&#32;mol.fluxes[n];
2134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m_i&#32;=&#32;s_i&#32;+&#32;f_i;
2135 
2136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;edge&#32;:&#32;molProto.nodes[n].neighbors)&#32;{&#32;&#32;<emphasis role="comment">//&#32;for&#32;each&#32;edge&#32;of&#32;node</emphasis>
2137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;if(selfIndex&#32;&gt;&#32;nodeIndex)&#32;to&#32;avoid&#32;duplicating&#32;calculations</emphasis>
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;since&#32;each&#32;edge&#32;exists&#32;twice:&#32;once&#32;in&#32;each&#32;direction.</emphasis>
2139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Also,&#32;ignore&#32;&quot;loops&quot;&#32;(edges&#32;which&#32;connect&#32;to&#32;themselves).</emphasis>
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(edge.selfIndex&#32;&gt;=&#32;edge.nodeIndex)
2141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;parameters&#32;=&#32;molProto.edgeParameters[edge.edgeIndex];
2144 
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s_j&#32;=&#32;mol.spins[edge.nodeIndex];
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f_j&#32;=&#32;mol.fluxes[edge.nodeIndex];
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m_j&#32;=&#32;s_j&#32;+&#32;f_j;
2148 
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;&quot;Results&quot;</emphasis>
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;parameters.Jm&#32;*&#32;(s_i&#32;*&#32;s_j);
2151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;parameters.Je1m&#32;*&#32;(s_i&#32;*&#32;f_j&#32;+&#32;f_i&#32;*&#32;s_j);
2152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;parameters.Jeem&#32;*&#32;(f_i&#32;*&#32;f_j);
2153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;parameters.bm&#32;*&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m_i&#32;*&#32;m_j);
2154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.Um&#32;-=&#32;parameters.Dm&#32;*&#32;(edge.direction&#32;*&#32;m_i.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(m_j));
2155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2157 &#32;&#32;&#32;&#32;}
2158 
2159 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;Calculate&#32;energy&#32;at&#32;leads&#32;(*mL,&#32;*mR)&#32;-----</emphasis>
2160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;:&#32;unique_mol_indices)&#32;{
2161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;this-&gt;y(a);
2162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;this-&gt;z(a);
2163 
2164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FM_L_exists)&#32;{
2165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;FML_idx&#32;=&#32;index(molPosL&#32;-&#32;1,&#32;y,&#32;z);
2166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;mol_idx&#32;=&#32;index(molPosL&#32;+&#32;molProto.leftLead,&#32;y,&#32;z);
2167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s_i&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(FML_idx);
2168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f_i&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(FML_idx);
2169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m_i&#32;=&#32;s_i&#32;+&#32;f_i;
2170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s_j&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(mol_idx);
2171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f_j&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(mol_idx);
2172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m_j&#32;=&#32;s_j&#32;+&#32;f_j;
2173 
2174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.JmL&#32;*&#32;(s_i&#32;*&#32;s_j);
2175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.Je1mL&#32;*&#32;(s_i&#32;*&#32;f_j&#32;+&#32;f_i&#32;*&#32;s_j);
2176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.JeemL&#32;*&#32;(f_i&#32;*&#32;f_j);
2177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.bmL&#32;*&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m_i&#32;*&#32;m_j);
2178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;parameters.DmL&#32;*&#32;m_i.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(m_j);
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2180 
2181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FM_R_exists)&#32;{
2182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;FMR_idx&#32;=&#32;index(molPosR&#32;+&#32;1,&#32;y,&#32;z);
2183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;mol_idx&#32;=&#32;index(molPosL&#32;+&#32;molProto.rightLead,&#32;y,&#32;z);
2184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s_i&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(mol_idx);
2185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f_i&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(mol_idx);
2186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m_i&#32;=&#32;s_i&#32;+&#32;f_i;
2187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s_j&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(FMR_idx);
2188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f_j&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(FMR_idx);
2189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m_j&#32;=&#32;s_j&#32;+&#32;f_j;
2190 
2191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.JmR&#32;*&#32;(s_i&#32;*&#32;s_j);
2192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.Je1mR&#32;*&#32;(s_i&#32;*&#32;f_j&#32;+&#32;f_i&#32;*&#32;s_j);
2193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.JeemR&#32;*&#32;(f_i&#32;*&#32;f_j);
2194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.bmR&#32;*&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m_i&#32;*&#32;m_j);
2195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;parameters.DmR&#32;*&#32;m_i.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(m_j);
2196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2197 &#32;&#32;&#32;&#32;}
2198 
2199 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;update&#32;aggregate&#32;energy&#32;(U)&#32;and&#32;magnetizations&#32;(Mm,&#32;MS,&#32;MF,&#32;M)&#32;-----</emphasis>
2200 &#32;&#32;&#32;&#32;results.Mm&#32;=&#32;results.MSm&#32;+&#32;results.MFm;
2201 &#32;&#32;&#32;&#32;results.MS&#32;=&#32;results.MSL&#32;+&#32;results.MSR&#32;+&#32;results.MSm;
2202 &#32;&#32;&#32;&#32;results.MF&#32;=&#32;results.MFL&#32;+&#32;results.MFR&#32;+&#32;results.MFm;
2203 &#32;&#32;&#32;&#32;results.M&#32;=&#32;results.MS&#32;+&#32;results.MF;
2204 &#32;&#32;&#32;&#32;results.U&#32;+=&#32;results.Um&#32;+&#32;results.UmR&#32;+&#32;results.UmL;
2205 &#32;&#32;&#32;&#32;
2206 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Done:&#32;copy&#32;new&#32;mol.&#32;prototype&#32;to&#32;MSD::molProto&#32;field</emphasis>
2207 &#32;&#32;&#32;&#32;this-&gt;molProto&#32;=&#32;molProto;
2208 }
2209 
2210 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aade85204d30f826444572e41f27613aa">MSD::setMolParameters</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_node_parameters">MolProto::NodeParameters</link>&#32;&amp;nodeParams,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_molecule_1_1_edge_parameters">MolProto::EdgeParameters</link>&#32;&amp;edgeParams)&#32;{
2211 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_molecule">MolProto</link>&#32;molProto&#32;=&#32;this-&gt;molProto;
2212 &#32;&#32;&#32;&#32;molProto.<link linkend="_classudc_1_1_molecule_1a401ed0509649570cc636b5a08735cbd6">setAllParameters</link>(nodeParams,&#32;edgeParams);
2213 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1aa8ed0dab0705b810e4d14215b488fb43">setMolProto</link>(molProto);&#32;&#32;<emphasis role="comment">//&#32;update&#32;Results&#32;(i.e.&#32;energy&#32;and&#32;magnetization)</emphasis>
2214 }
2215 
2216 
2217 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">MSD::getSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;this-&gt;x(a);
2219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(x&#32;&lt;&#32;molPosL&#32;||&#32;x&#32;&gt;&#32;molPosR)&#32;?&#32;spins.at(a)&#32;:&#32;mols.<link linkend="_classudc_1_1_sparse_array_1a9a89430f9cb6b03bfaf249a0ebcbfc8c">at</link>(a)-&gt;spins[x&#32;-&#32;molPosL];
2220 }
2221 
2222 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">MSD::getSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&gt;=&#32;width&#32;||&#32;y&#32;&gt;=&#32;height&#32;||&#32;z&#32;&gt;=&#32;depth&#32;)
2224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;(x,y,z)&#32;coordinate&#32;not&#32;in&#32;range&quot;</emphasis>);
2225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(&#32;index(x,&#32;y,&#32;z)&#32;);
2226 }
2227 
2228 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">MSD::getFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2229 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;this-&gt;x(a);
2230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(x&#32;&lt;&#32;molPosL&#32;||&#32;x&#32;&gt;&#32;molPosR)&#32;?&#32;fluxes.at(a)&#32;:&#32;mols.<link linkend="_classudc_1_1_sparse_array_1a9a89430f9cb6b03bfaf249a0ebcbfc8c">at</link>(a)-&gt;fluxes[x&#32;-&#32;molPosL];
2231 }
2232 
2233 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">MSD::getFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&gt;=&#32;width&#32;||&#32;y&#32;&gt;=&#32;height&#32;||&#32;z&#32;&gt;=&#32;depth&#32;)
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;(x,y,z)&#32;coordinate&#32;not&#32;in&#32;range&quot;</emphasis>);
2236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(&#32;index(x,&#32;y,&#32;z)&#32;);
2237 }
2238 
2239 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1af0cad12dfc8de11dfbbb600672b94a53">MSD::getLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2240 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a)&#32;+&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a);
2241 }
2242 
2243 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1af0cad12dfc8de11dfbbb600672b94a53">MSD::getLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&gt;=&#32;width&#32;||&#32;y&#32;&gt;=&#32;height&#32;||&#32;z&#32;&gt;=&#32;depth&#32;)
2245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;(x,y,z)&#32;coordinate&#32;not&#32;in&#32;range&quot;</emphasis>);
2246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1af0cad12dfc8de11dfbbb600672b94a53">getLocalM</link>(&#32;index(x,&#32;y,&#32;z)&#32;);
2247 }
2248 
2249 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a4d4a91fd46eec66e753dfa2642c25068">MSD::setSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin)&#32;{
2250 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">setLocalM</link>(&#32;a,&#32;spin,&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a)&#32;);
2251 }
2252 
2253 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a4d4a91fd46eec66e753dfa2642c25068">MSD::setSpin</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin)&#32;{
2254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&gt;=&#32;width&#32;||&#32;y&#32;&gt;=&#32;height&#32;||&#32;z&#32;&gt;=&#32;depth&#32;)
2255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;(x,y,z)&#32;coordinate&#32;not&#32;in&#32;range&quot;</emphasis>);
2256 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a4d4a91fd46eec66e753dfa2642c25068">setSpin</link>(&#32;index(x,&#32;y,&#32;z),&#32;spin&#32;);
2257 }
2258 
2259 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a0bb8c1e9fef1960578abc46446380dbf">MSD::setFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux)&#32;{
2260 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">setLocalM</link>(&#32;a,&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a),&#32;flux&#32;);
2261 }
2262 
2263 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a0bb8c1e9fef1960578abc46446380dbf">MSD::setFlux</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux)&#32;{
2264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&gt;=&#32;width&#32;||&#32;y&#32;&gt;=&#32;height&#32;||&#32;z&#32;&gt;=&#32;depth&#32;)
2265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;(x,y,z)&#32;coordinate&#32;not&#32;in&#32;range&quot;</emphasis>);
2266 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a0bb8c1e9fef1960578abc46446380dbf">setFlux</link>(&#32;index(x,&#32;y,&#32;z),&#32;flux&#32;);
2267 }
2268 
2269 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">MSD::setLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux)&#32;{
2270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
2271 &#32;&#32;&#32;&#32;
2272 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;this-&gt;x(a);
2273 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;this-&gt;y(a);
2274 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z&#32;=&#32;this-&gt;z(a);
2275 
2276 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;position&#32;&quot;a&quot;&#32;is&#32;within&#32;the&#32;mol.,&#32;bybass&#32;this&#32;function&#32;and&#32;call&#32;Mol::setLocalM&#32;instead.&#32;</emphasis>
2277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(molPosL&#32;&lt;=&#32;x&#32;&amp;&amp;&#32;x&#32;&lt;=&#32;molPosR)&#32;{
2278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mols.<link linkend="_classudc_1_1_sparse_array_1a9a89430f9cb6b03bfaf249a0ebcbfc8c">at</link>(a)-&gt;setLocalM(x&#32;-&#32;molPosL,&#32;spin,&#32;flux);
2279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2280 &#32;&#32;&#32;&#32;}
2281 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else,&#32;we&#32;are&#32;definately&#32;in&#32;one&#32;of&#32;the&#32;FMs</emphasis>
2282 
2283 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;s&#32;=&#32;spins.at(a);&#32;<emphasis role="comment">//previous&#32;spin</emphasis>
2284 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;f&#32;=&#32;fluxes.at(a);&#32;<emphasis role="comment">//previous&#32;spin&#32;fluctuation</emphasis>
2285 &#32;&#32;&#32;&#32;
2286 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;m&#32;=&#32;s&#32;+&#32;f;&#32;<emphasis role="comment">//&#32;previous&#32;local&#32;magnetization</emphasis>
2287 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;mag&#32;=&#32;spin&#32;+&#32;flux;&#32;<emphasis role="comment">//&#32;new&#32;local&#32;magnetization</emphasis>
2288 &#32;&#32;&#32;&#32;
2289 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;deltaS&#32;=&#32;spin&#32;-&#32;s;
2290 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;deltaF&#32;=&#32;flux&#32;-&#32;f;
2291 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;deltaM&#32;=&#32;mag&#32;-&#32;m;
2292 &#32;&#32;&#32;&#32;results.M&#32;+=&#32;deltaM;
2293 &#32;&#32;&#32;&#32;results.MS&#32;+=&#32;deltaS;
2294 &#32;&#32;&#32;&#32;results.MF&#32;+=&#32;deltaF;
2295 &#32;&#32;&#32;&#32;
2296 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delta&#32;U&apos;s&#32;are&#32;actually&#32;negative,&#32;simply&#32;grouping&#32;the&#32;negatives&#32;in&#32;front&#32;of&#32;each&#32;energy&#32;coefficient&#32;into&#32;deltaU&#32;-=&#32;...&#32;(instead&#32;of&#32;+=)</emphasis>
2297 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU_B&#32;=&#32;parameters.B&#32;*&#32;deltaM;
2298 &#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU_B;
2299 &#32;&#32;&#32;&#32;
2300 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;left&#32;section&#32;(FM_L)&#32;-----</emphasis>
2301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&lt;&#32;molPosL&#32;)&#32;{
2302 &#32;&#32;&#32;&#32;
2303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.ML&#32;+=&#32;deltaM;
2304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MSL&#32;+=&#32;deltaS;
2305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MFL&#32;+=&#32;deltaF;
2306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaU_B;
2307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.AL&#32;*&#32;(&#32;<link linkend="_classudc_1_1_vector">Vector</link>(<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>))&#32;-&#32;<link linkend="_classudc_1_1_vector">Vector</link>(<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>))&#32;)
2309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je0L&#32;*&#32;(&#32;spin&#32;*&#32;flux&#32;-&#32;s&#32;*&#32;f&#32;);
2310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaU;
2312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[5&#32;neighbors&#32;stay&#32;only&#32;within&#32;FM_L:&#32;left,&#32;above,&#32;below,&#32;front,&#32;back]</emphasis>
2315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;!=&#32;0&#32;)&#32;{
2316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x&#32;-&#32;1,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;left&#32;neighbor</emphasis>
2317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JL&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1L&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bL&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DL&#32;*&#32;neighbor_m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(deltaM);&#32;&#32;<emphasis role="comment">//&#32;(a1&#32;&lt;&#32;a):&#32;right&#32;vector&#32;changed</emphasis>
2325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaU;
2327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;x&#32;-&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;y&#32;!=&#32;topL&#32;)&#32;{
2329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x,&#32;y&#32;-&#32;1,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;above&#32;neighbor</emphasis>
2330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JL&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1L&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bL&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DL&#32;*&#32;neighbor_m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(deltaM);&#32;&#32;<emphasis role="comment">//&#32;(a1&#32;&lt;&#32;a):&#32;right&#32;vector&#32;changed</emphasis>
2338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaU;
2340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;y&#32;-&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;y&#32;!=&#32;bottomL&#32;)&#32;{
2342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x,&#32;y&#32;+&#32;1,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;below&#32;neighbor</emphasis>
2343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JL&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1L&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bL&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DL&#32;*&#32;deltaM.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;(a&#32;&lt;&#32;a1):&#32;left&#32;vector&#32;changed</emphasis>
2351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaU;
2353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;y&#32;+&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;z&#32;!=&#32;0&#32;)&#32;{
2355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x,&#32;y,&#32;z&#32;-&#32;1);&#32;&#32;<emphasis role="comment">//&#32;front&#32;neighbor</emphasis>
2356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JL&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1L&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bL&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DL&#32;*&#32;neighbor_m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(deltaM);&#32;&#32;<emphasis role="comment">//&#32;(a1&#32;&lt;&#32;a):&#32;right&#32;vector&#32;changed</emphasis>
2364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaU;
2366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;z&#32;-&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;z&#32;+&#32;1&#32;!=&#32;depth&#32;)&#32;{
2368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x,&#32;y,&#32;z&#32;+&#32;1);&#32;&#32;<emphasis role="comment">//&#32;back&#32;neighbor</emphasis>
2369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JL&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1L&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bL&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DL&#32;*&#32;deltaM.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;(a&#32;&lt;&#32;a1):&#32;left&#32;vector&#32;changed</emphasis>
2377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaU;
2379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;z&#32;+&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[2&#32;neighbors&#32;may&#32;leave&#32;FM_L:&#32;right,&#32;LR&#32;(direct&#32;coupling)]</emphasis>
2382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;+&#32;1&#32;!=&#32;width&#32;)&#32;&#32;<emphasis role="comment">//&#32;do&#32;these&#32;neighbors&#32;exist?</emphasis>
2383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;+&#32;1&#32;==&#32;molPosL&#32;)&#32;{&#32;&#32;<emphasis role="comment">//&#32;are&#32;we&#32;next&#32;to&#32;the&#32;mol.?</emphasis>
2384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mol_exists&#32;)
2385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
2386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(molPosL&#32;+&#32;molProto.leftLead,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;right&#32;neighbor&#32;(in&#32;mol.)</emphasis>
2387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JmL&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1mL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeemL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bmL&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DmL&#32;*&#32;deltaM.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;(a&#32;&lt;&#32;a1):&#32;left&#32;vector&#32;changed</emphasis>
2395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmL&#32;-=&#32;deltaU;
2397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(<emphasis role="keyword">const</emphasis>&#32;out_of_range&#32;&amp;e)&#32;{}&#32;<emphasis role="comment">//&#32;x&#32;+&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist&#32;because&#32;it&apos;s&#32;in&#32;the&#32;buffer&#32;zone</emphasis>
2398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;FM_R_exists&#32;)
2400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
2401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(molPosR&#32;+&#32;1,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;LR&#32;(direct&#32;coupling)&#32;neighbor</emphasis>
2402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JLR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1LR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeLR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bLR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DLR&#32;*&#32;deltaM.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;(a&#32;&lt;&#32;a1):&#32;left&#32;vector&#32;changed</emphasis>
2410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.ULR&#32;-=&#32;deltaU;
2412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(<emphasis role="keyword">const</emphasis>&#32;out_of_range&#32;&amp;e)&#32;{}&#32;<emphasis role="comment">//&#32;molPosR&#32;+&#32;1&#32;atom&#32;doesn&apos;t&#32;exist&#32;because&#32;we&apos;re&#32;not&#32;in&#32;the&#32;center</emphasis>
2413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">//&#32;we&#32;are&#32;not&#32;next&#32;to&#32;the&#32;mol.</emphasis>
2415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x&#32;+&#32;1,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;right&#32;neighbor&#32;(also&#32;in&#32;FM_L)</emphasis>
2416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JL&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1L&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeL&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bL&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DL&#32;*&#32;deltaM.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;(a&#32;&lt;&#32;a1):&#32;left&#32;vector&#32;changed</emphasis>
2424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UL&#32;-=&#32;deltaU;
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else,&#32;x&#32;+&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist&#32;(because&#32;molPosL&#32;==&#32;width)</emphasis>
2428 &#32;&#32;&#32;&#32;
2429 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;right&#32;section&#32;(FM_R)&#32;-----</emphasis>
2430 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">//&#32;x&#32;&gt;&#32;molPosR</emphasis>
2431 &#32;&#32;&#32;&#32;
2432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MR&#32;+=&#32;deltaM;
2433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MSR&#32;+=&#32;deltaS;
2434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.MFR&#32;+=&#32;deltaF;
2435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaU_B;
2436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.AR&#32;*&#32;(&#32;<link linkend="_classudc_1_1_vector">Vector</link>(<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(mag.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>))&#32;-&#32;<link linkend="_classudc_1_1_vector">Vector</link>(<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1ab974b6088fa419c17752cdf46fffd09c">x</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1a136129725de33fe61592c3d5c5a485eb">y</link>),&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(m.<link linkend="_classudc_1_1_vector_1af5787922cda40c2139abdd31cd2f6251">z</link>))&#32;)
2438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je0R&#32;*&#32;(&#32;spin&#32;*&#32;flux&#32;-&#32;s&#32;*&#32;f&#32;);
2439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaU;
2441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[5&#32;neighbors&#32;stay&#32;only&#32;within&#32;FM_R:&#32;right,&#32;above,&#32;below,&#32;front,&#32;back]</emphasis>
2444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;+&#32;1&#32;!=&#32;width&#32;)&#32;{
2445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x&#32;+&#32;1,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;right&#32;neighbor</emphasis>
2446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1R&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DR&#32;*&#32;deltaM.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;(a&#32;&lt;&#32;a1):&#32;left&#32;vector&#32;changed</emphasis>
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaU;
2456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;x&#32;+&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;y&#32;!=&#32;0&#32;)&#32;{
2458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x,&#32;y&#32;-&#32;1,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;above&#32;neighbor</emphasis>
2459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1R&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DR&#32;*&#32;neighbor_m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(deltaM);&#32;&#32;<emphasis role="comment">//&#32;(a1&#32;&lt;&#32;a):&#32;right&#32;vector&#32;changed</emphasis>
2467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaU;
2469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;y&#32;-&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;y&#32;+&#32;1&#32;!=&#32;height&#32;)&#32;{
2471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x,&#32;y&#32;+&#32;1,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;below&#32;neighbor</emphasis>
2472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1R&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DR&#32;*&#32;deltaM.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;(a&#32;&lt;&#32;a1):&#32;left&#32;vector&#32;changed</emphasis>
2480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaU;
2482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;y&#32;+&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;z&#32;!=&#32;frontR&#32;)&#32;{
2484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x,&#32;y,&#32;z&#32;-&#32;1);&#32;&#32;<emphasis role="comment">//&#32;front&#32;neighbor</emphasis>
2485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1R&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DR&#32;*&#32;neighbor_m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(deltaM);&#32;&#32;<emphasis role="comment">//&#32;(a1&#32;&lt;&#32;a):&#32;right&#32;vector&#32;changed</emphasis>
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaU;
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;z&#32;-&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;z&#32;!=&#32;backR&#32;)&#32;{
2497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x,&#32;y,&#32;z&#32;+&#32;1);&#32;&#32;<emphasis role="comment">//&#32;back&#32;neighbor</emphasis>
2498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1R&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DR&#32;*&#32;deltaM.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(neighbor_m);&#32;&#32;<emphasis role="comment">//&#32;(a&#32;&lt;&#32;a1):&#32;left&#32;vector&#32;changed</emphasis>
2506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaU;
2508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else,&#32;z&#32;+&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist</emphasis>
2509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[2&#32;neighbors&#32;may&#32;leave&#32;FM_L:&#32;left,&#32;LR&#32;(direct&#32;coupling)]</emphasis>
2511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;!=&#32;0,&#32;because&#32;x&#32;&gt;&#32;(unsigned&#32;molPosR)&#32;&gt;=&#32;0</emphasis>
2512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;-&#32;1&#32;==&#32;molPosR&#32;)&#32;{&#32;&#32;<emphasis role="comment">//&#32;are&#32;we&#32;next&#32;to&#32;the&#32;mol.?</emphasis>
2513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mol_exists&#32;)
2514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
2515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(molPosL&#32;+&#32;molProto.rightLead,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;left&#32;neighbor&#32;(in&#32;mol.)</emphasis>
2516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JmR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1mR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeemR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bmR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DmR&#32;*&#32;neighbor_m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(deltaM);&#32;&#32;<emphasis role="comment">//&#32;(a1&#32;&lt;&#32;a):&#32;right&#32;vector&#32;changed</emphasis>
2524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UmR&#32;-=&#32;deltaU;
2526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(<emphasis role="keyword">const</emphasis>&#32;out_of_range&#32;&amp;e)&#32;{}&#32;<emphasis role="comment">//&#32;x&#32;-&#32;1&#32;neighbor&#32;doesn&apos;t&#32;exist&#32;because&#32;it&apos;s&#32;in&#32;the&#32;buffer&#32;zone</emphasis>
2527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;FM_L_exists&#32;)
2529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
2530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(molPosL&#32;-&#32;1,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;LR&#32;(direct&#32;coupling)&#32;neighbor</emphasis>
2531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JLR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1LR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeLR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bLR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DLR&#32;*&#32;neighbor_m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(deltaM);&#32;&#32;<emphasis role="comment">//&#32;(a1&#32;&lt;&#32;a):&#32;right&#32;vector&#32;changed</emphasis>
2539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.ULR&#32;-=&#32;deltaU;
2541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(<emphasis role="keyword">const</emphasis>&#32;out_of_range&#32;&amp;e)&#32;{}&#32;<emphasis role="comment">//&#32;molPos&#32;-&#32;1&#32;atom&#32;doesn&apos;t&#32;exist&#32;because&#32;we&apos;re&#32;not&#32;in&#32;the&#32;center</emphasis>
2542 
2543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">//&#32;we&#32;are&#32;not&#32;next&#32;to&#32;the&#32;mol.</emphasis>
2544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a1&#32;=&#32;index(x&#32;-&#32;1,&#32;y,&#32;z);&#32;&#32;<emphasis role="comment">//&#32;left&#32;neighbor&#32;(also&#32;in&#32;FM_R)</emphasis>
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a1);
2546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a1);
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;neighbor_m&#32;=&#32;neighbor_s&#32;+&#32;neighbor_f;
2548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;deltaU&#32;=&#32;parameters.JR&#32;*&#32;(&#32;neighbor_s&#32;*&#32;deltaS&#32;)
2549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.Je1R&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaS&#32;+&#32;neighbor_s&#32;*&#32;deltaF&#32;)
2550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.JeeR&#32;*&#32;(&#32;neighbor_f&#32;*&#32;deltaF&#32;)
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.bR&#32;*&#32;(&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;mag)&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(neighbor_m&#32;*&#32;m)&#32;)
2552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;parameters.DR&#32;*&#32;neighbor_m.<link linkend="_classudc_1_1_vector_1a5e5018a08cc0c3988f7a47243943e530">crossProduct</link>(deltaM);&#32;&#32;<emphasis role="comment">//&#32;(a1&#32;&lt;&#32;a):&#32;right&#32;vector&#32;changed</emphasis>
2553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.U&#32;-=&#32;deltaU;
2554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.UR&#32;-=&#32;deltaU;
2555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2556 &#32;&#32;&#32;&#32;
2557 &#32;&#32;&#32;&#32;}
2558 &#32;&#32;&#32;&#32;
2559 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-----&#32;update&#32;vectors&#32;-----</emphasis>
2560 &#32;&#32;&#32;&#32;s&#32;=&#32;spin;
2561 &#32;&#32;&#32;&#32;f&#32;=&#32;flux;
2562 
2563 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(<emphasis role="keyword">const</emphasis>&#32;out_of_range&#32;&amp;ex)&#32;{
2564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;debugging.&#32;This&#32;exception&#32;should&#32;not&#32;happen&#32;in&#32;production!</emphasis>
2565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;ERROR&#32;in&#32;MSD::setLocalM(unsigned&#32;int,&#32;udc::Vector,&#32;udc::Vector)\n&quot;</emphasis>;
2566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;a&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;==&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;x(a)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;y(a)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z(a)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)\n&quot;</emphasis>;
2567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;ex.what()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>;
2568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;topL=&quot;</emphasis>&#32;&lt;&lt;&#32;topL&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;bottomL=&quot;</emphasis>&#32;&lt;&lt;&#32;bottomL&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;frontR=&quot;</emphasis>&#32;&lt;&lt;&#32;frontR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;backR=&quot;</emphasis>&#32;&lt;&lt;&#32;backR&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
2569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Valid&#32;Indicies:\n&quot;</emphasis>;
2570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;iter&#32;=&#32;indices.begin();&#32;iter&#32;!=&#32;indices.end();&#32;++iter)
2571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;*iter&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;==&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;x(*iter)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;y(*iter)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z(*iter)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)\n&quot;</emphasis>;
2572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(200);
2573 &#32;&#32;&#32;&#32;}
2574 }
2575 
2576 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">MSD::setLocalM</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;z,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;spin,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;&amp;flux)&#32;{
2577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;x&#32;&gt;=&#32;width&#32;||&#32;y&#32;&gt;=&#32;height&#32;||&#32;z&#32;&gt;=&#32;depth&#32;)
2578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;out_of_range(<emphasis role="stringliteral">&quot;(x,y,z)&#32;coordinate&#32;not&#32;in&#32;range&quot;</emphasis>);
2579 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">setLocalM</link>(&#32;index(x,&#32;y,&#32;z),&#32;spin,&#32;flux&#32;);
2580 }
2581 
2582 
2583 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a762738c5f2b8e17f526c6138fcf89872">MSD::getN</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
2585 }
2586 
2587 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1adc9f743ee13e82becfe0a2c50ee52ec1">MSD::getNL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nL;
2589 }
2590 
2591 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ae18b1502712c3ac5314dbb6130c354ed">MSD::getNR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nR;
2593 }
2594 
2595 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a100e8176f61523c520c546149d9014a6">MSD::getNm</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n_m;
2597 }
2598 
2599 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3a90533d4764c960d421ccf254696133">MSD::getNmL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n_mL;
2601 }
2602 
2603 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ad5c8743bd63fd3cdbb0361233e405c0b">MSD::getNmR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n_mR;
2605 }
2606 
2607 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a7add4bc60686c62e73343afa6092b017">MSD::getNLR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nLR;
2609 }
2610 
2611 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3ece5c5f34abcc06fef11fc96189895d">MSD::getWidth</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;width;
2613 }
2614 
2615 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a536ab447508f890fd16272995c6fae8b">MSD::getHeight</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;height;
2617 }
2618 
2619 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aefb9f78944562ded126ec46485319557">MSD::getDepth</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;depth;
2621 }
2622 
2623 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a939846baeed48015266b707a703ef15f">MSD::getDimensions</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;width,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;height,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;depth)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2624 &#32;&#32;&#32;&#32;width&#32;=&#32;this-&gt;width;
2625 &#32;&#32;&#32;&#32;height&#32;=&#32;this-&gt;height;
2626 &#32;&#32;&#32;&#32;depth&#32;=&#32;this-&gt;depth;
2627 }
2628 
2629 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a2c5e7ed01ae1e5e5e6157e76748f88ab">MSD::getMolPosL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2630 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;molPosL;
2631 }
2632 
2633 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a158fcf1df8fc10e66257138df6e4a60e">MSD::getMolPosR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;molPosR;
2635 }
2636 
2637 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a52a344961c0464197bc0936e24ec1107">MSD::getMolPos</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;molPosL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;molPosR)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2638 &#32;&#32;&#32;&#32;molPosL&#32;=&#32;this-&gt;molPosL;
2639 &#32;&#32;&#32;&#32;molPosR&#32;=&#32;this-&gt;molPosR;
2640 }
2641 
2642 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a9d5727849f685e6cccb5e5a0a3818cb3">MSD::getTopL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;topL;
2644 }
2645 
2646 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a66200786b332ed413fa3e29a7ecedad3">MSD::getBottomL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bottomL;
2648 }
2649 
2650 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a7de138059fe647ec24a50d3b98ecdfe8">MSD::getFrontR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;frontR;
2652 }
2653 
2654 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a368da5ea0c007b29f0c18a4415b2d1f6">MSD::getBackR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;backR;
2656 }
2657 
2658 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a54c6db2f1ffe3cb9de31b2e278ae2335">MSD::getInnerBounds</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;topL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;bottomL,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;frontR,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;backR)<emphasis role="keyword">&#32;const</emphasis>{
2659 &#32;&#32;&#32;&#32;topL&#32;=&#32;this-&gt;topL;
2660 &#32;&#32;&#32;&#32;bottomL&#32;=&#32;this-&gt;bottomL;
2661 &#32;&#32;&#32;&#32;frontR&#32;=&#32;this-&gt;frontR;
2662 &#32;&#32;&#32;&#32;backR&#32;=&#32;this-&gt;backR;
2663 }
2664 
2665 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1af17782522b81ac6827d6874ae6aa5018">MSD::getFM_L_exists</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FM_L_exists;
2667 }
2668 
2669 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ac7b197dca279f02512882dc173a70aaf">MSD::getFM_R_exists</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2670 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FM_R_exists;
2671 }
2672 
2673 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a87c3cff4cf2db6a08fa6d7f184500eea">MSD::getMol_exists</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2674 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mol_exists;
2675 }
2676 
2677 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a61db2cb3389641129ce97c0613917ec5">MSD::getRegions</link>(<emphasis role="keywordtype">bool</emphasis>&#32;&amp;FM_L_exists,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;FM_R_exists,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;mol_exists)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2678 &#32;&#32;&#32;&#32;FM_L_exists&#32;=&#32;this-&gt;FM_L_exists;
2679 &#32;&#32;&#32;&#32;FM_R_exists&#32;=&#32;this-&gt;FM_R_exists;
2680 &#32;&#32;&#32;&#32;mol_exists&#32;=&#32;this-&gt;mol_exists;
2681 }
2682 
2683 
2684 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3cb49ad4ca11278ed81998a8efd3ce68">MSD::setSeed</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;seed)&#32;{
2685 &#32;&#32;&#32;&#32;this-&gt;seed&#32;=&#32;seed;
2686 &#32;&#32;&#32;&#32;prng.seed(seed);
2687 }
2688 
2689 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1adedd5f97461ea96c685923b45b49d91b">MSD::getSeed</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2690 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;seed;
2691 }
2692 
2693 
2694 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a82b75829d72149de1992f198ad3c73b6">MSD::reinitialize</link>(<emphasis role="keywordtype">bool</emphasis>&#32;reseed)&#32;{
2695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;reseed&#32;)
2696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;genSeed();
2697 &#32;&#32;&#32;&#32;prng.seed(seed);
2698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1afb91b037de5315bfde0159ee591267a3">begin</link>();&#32;i&#32;!=&#32;<link linkend="_classudc_1_1_m_s_d_1a917317363ac8e2e78840845d6fc49f91">end</link>();&#32;i++&#32;)
2699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">setLocalM</link>(&#32;i,&#32;initSpin,&#32;initFlux&#32;);
2700 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.clear();
2701 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1aa1513f639c10ca29773ea287ae104121">setParameters</link>(parameters);&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;do&#32;we&#32;need&#32;this?&#32;Yes,&#32;but&#32;I&#32;think&#32;only&#32;because&#32;we</emphasis>
2702 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1aa8ed0dab0705b810e4d14215b488fb43">setMolProto</link>(molProto);&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;rescale&#32;Spin&#32;and&#32;Flux&#32;vectors&#32;to&#32;match&#32;S&#32;and&#32;F&#32;params</emphasis>
2703 &#32;&#32;&#32;&#32;results.t&#32;=&#32;0;
2704 }
2705 
2706 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a9b89ead4fcfc2c0ead59dcb33538a334">MSD::randomize</link>(<emphasis role="keywordtype">bool</emphasis>&#32;reseed)&#32;{
2707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;reseed&#32;)
2708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;genSeed();
2709 &#32;&#32;&#32;&#32;prng.seed(seed);
2710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1afb91b037de5315bfde0159ee591267a3">begin</link>();&#32;i&#32;!=&#32;<link linkend="_classudc_1_1_m_s_d_1a917317363ac8e2e78840845d6fc49f91">end</link>();&#32;i++&#32;)
2711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">setLocalM</link>(&#32;i,&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;this&#32;calculation&#32;isn&apos;t&#32;uniform.&#32;It&#32;favors&#32;F&#32;close&#32;to&#32;0</emphasis>
2712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector_1a89b43ddd10a372d584a03a5583ad5652">Vector::sphericalForm</link>(1,&#32;2&#32;*&#32;<link linkend="_namespaceudc_1a1757f9fc50446243658974977dd95e7c">PI</link>&#32;*&#32;rand(prng),&#32;asin(2&#32;*&#32;rand(prng)&#32;-&#32;1)),
2713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector_1a89b43ddd10a372d584a03a5583ad5652">Vector::sphericalForm</link>(rand(prng),&#32;2&#32;*&#32;<link linkend="_namespaceudc_1a1757f9fc50446243658974977dd95e7c">PI</link>&#32;*&#32;rand(prng),&#32;asin(2&#32;*&#32;rand(prng)&#32;-&#32;1))&#32;);
2714 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.clear();
2715 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1aa1513f639c10ca29773ea287ae104121">setParameters</link>(parameters);&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;do&#32;we&#32;still&#32;need&#32;this?&#32;Yes.&#32;(See&#32;comment&#32;in&#32;MSD::reinitialize())</emphasis>
2716 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1aa8ed0dab0705b810e4d14215b488fb43">setMolProto</link>(molProto);
2717 &#32;&#32;&#32;&#32;results.t&#32;=&#32;0;
2718 }
2719 
2720 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3da3a656fdd0a10f6bbc819935c9fa1d">MSD::metropolis</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;N)&#32;{
2721 &#32;&#32;&#32;&#32;function&lt;double()&gt;&#32;random&#32;=&#32;bind(&#32;rand,&#32;ref(prng)&#32;);
2722 &#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;r&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1ae1bee2a207b40720156243ed19eed671">getResults</link>();&#32;<emphasis role="comment">//get&#32;the&#32;energy&#32;of&#32;the&#32;system</emphasis>
2723 &#32;&#32;&#32;&#32;<emphasis role="comment">//start&#32;loop&#32;(will&#32;iterate&#32;N&#32;times)</emphasis>
2724 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;N;&#32;i++&#32;)&#32;{
2725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;indices[<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;random()&#32;*&#32;indices.size()&#32;)];&#32;<emphasis role="comment">//pick&#32;an&#32;atom&#32;(pseudo)&#32;randomly</emphasis>
2726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a9719db02665a291111d9dd887be6538f">getSpin</link>(a);&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;do&#32;we&#32;need&#32;the&#32;bounds&#32;checking?</emphasis>
2727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;f&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a5296876f3e8cc8b963c0daa773f9f3a7">getFlux</link>(a);&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;do&#32;we&#32;need&#32;the&#32;bounds&#32;checking?</emphasis>
2728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remeber&#32;if&#32;we&#32;are&#32;in&#32;a&#32;mol.&#32;in&#32;case&#32;we&#32;need&#32;to&#32;revert&#32;state</emphasis>
2730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inMol&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;&#32;&#32;<emphasis role="comment">//&#32;only&#32;defined&#32;if&#32;isMol==true</emphasis>
2732 
2733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pick&#32;the&#32;correct&#32;F&#32;coeficient&#32;to&#32;determine&#32;new&#32;flux&#32;magnitude</emphasis>
2734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;this-&gt;x(a);
2735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;F;
2736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;&lt;&#32;molPosL)&#32;{
2737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;F&#32;=&#32;parameters.FL;
2738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;&gt;&#32;molPosR)&#32;{
2739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;F&#32;=&#32;parameters.FR;
2740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;x&#32;-&#32;molPosL;
2742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;F&#32;=&#32;molProto.<link linkend="_classudc_1_1_molecule_1aee4baa13cfc0b0584ec8e2c5000a76be">getNodeParameters</link>(n).<link linkend="_structudc_1_1_molecule_1_1_node_parameters_1a0a56503fd7eb794ba63f04a1ec25238e">Fm</link>;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;do&#32;we&#32;need&#32;the&#32;bounds&#32;checking?</emphasis>
2743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inMol&#32;=&#32;<emphasis role="keyword">true</emphasis>;
2744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2745 
2746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&quot;flip&quot;&#32;that&#32;atom</emphasis>
2747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a01c9eff4fc0c233e1aafc04ea6271036">setLocalM</link>(&#32;a,&#32;<link linkend="_classudc_1_1_m_s_d_1a2ccd325cf09e82420004de9702894de5">flippingAlgorithm</link>(s,&#32;random),
2748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector_1a89b43ddd10a372d584a03a5583ad5652">Vector::sphericalForm</link>(F&#32;*&#32;random(),&#32;2&#32;*&#32;<link linkend="_namespaceudc_1a1757f9fc50446243658974977dd95e7c">PI</link>&#32;*&#32;random(),&#32;asin(2&#32;*&#32;random()&#32;-&#32;1))&#32;);
2749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;r2&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1ae1bee2a207b40720156243ed19eed671">getResults</link>();&#32;<emphasis role="comment">//get&#32;the&#32;energy&#32;of&#32;the&#32;system&#32;(for&#32;the&#32;new&#32;state)</emphasis>
2751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dU&#32;=&#32;r2.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>&#32;-&#32;r.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>;&#32;&#32;<emphasis role="comment">//&#32;delta-U&#32;(change&#32;in&#32;energy)</emphasis>
2752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;dU&#32;&lt;=&#32;0&#32;||&#32;random()&#32;&lt;&#32;pow(&#32;<link linkend="_namespaceudc_1aa4b4d55516f1e34de5dc8b228f160597">E</link>,&#32;-dU&#32;/&#32;parameters.kT&#32;)&#32;)&#32;{
2753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//either&#32;the&#32;new&#32;system&#32;requires&#32;less&#32;energy&#32;or&#32;external&#32;energy&#32;(kT)&#32;is&#32;disrupting&#32;it</emphasis>
2754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r&#32;=&#32;r2;&#32;<emphasis role="comment">//in&#32;either&#32;case&#32;we&#32;keep&#32;the&#32;new&#32;system</emphasis>
2755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//neither&#32;thing&#32;(above)&#32;happened&#32;so&#32;we&#32;revert&#32;the&#32;system</emphasis>
2757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inMol)&#32;{
2758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;Mol&gt;&#32;mol&#32;=&#32;mols[a];
2759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mol-&gt;spins[n]&#32;=&#32;s;
2760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mol-&gt;fluxes[n]&#32;=&#32;f;
2761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spins[a]&#32;=&#32;s;&#32;<emphasis role="comment">//revert&#32;the&#32;system&#32;by&#32;flipping&#32;the&#32;atom&#32;back</emphasis>
2763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fluxes[a]&#32;=&#32;f;
2764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results&#32;=&#32;r;
2766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2767 &#32;&#32;&#32;&#32;}
2768 &#32;&#32;&#32;&#32;results.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;+=&#32;N;
2769 }
2770 
2771 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3da3a656fdd0a10f6bbc819935c9fa1d">MSD::metropolis</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;N,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;freq)&#32;{
2772 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;freq&#32;==&#32;0&#32;)&#32;{
2773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a3da3a656fdd0a10f6bbc819935c9fa1d">metropolis</link>(N);
2774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2775 &#32;&#32;&#32;&#32;}
2776 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<emphasis role="keyword">true</emphasis>)&#32;{
2777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.push_back(&#32;<link linkend="_classudc_1_1_m_s_d_1ae1bee2a207b40720156243ed19eed671">getResults</link>()&#32;);
2778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;N&#32;&gt;=&#32;freq&#32;)&#32;{
2779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a3da3a656fdd0a10f6bbc819935c9fa1d">metropolis</link>(freq);
2780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N&#32;-=&#32;freq;
2781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;N&#32;!=&#32;0&#32;)
2783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_m_s_d_1a3da3a656fdd0a10f6bbc819935c9fa1d">metropolis</link>(N);
2784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2786 &#32;&#32;&#32;&#32;}
2787 }
2788 
2789 
2790 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aca1fecf2568de928a441aa031280fc49">MSD::specificHeat</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2793 &#32;&#32;&#32;&#32;}
2794 
2795 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2796 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0,&#32;s2&#32;=&#32;0;
2797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
2798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
2799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dU&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>;
2801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
2802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
2803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dU&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>)&#32;*&#32;dU&#32;+&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>))&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
2804 
2805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
2806 &#32;&#32;&#32;&#32;}
2807 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
2808 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
2809 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0.5&#32;*&#32;s&#32;/&#32;dt;
2810 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
2811 
2812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(avg))&#32;/&#32;(n&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
2813 }
2814 
2815 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a0b14f09fe74231e5f9981b1571666ce5">MSD::specificHeat_L</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2816 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2818 &#32;&#32;&#32;&#32;}
2819 
2820 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2821 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0,&#32;s2&#32;=&#32;0;
2822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
2823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
2824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dU&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>;
2826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
2827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
2828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dU&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>)&#32;*&#32;dU&#32;+&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>))&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
2829 
2830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
2831 &#32;&#32;&#32;&#32;}
2832 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
2833 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
2834 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0.5&#32;*&#32;s&#32;/&#32;dt;
2835 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
2836 
2837 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(avg))&#32;/&#32;(nL&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
2838 }
2839 
2840 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a8c62ebc53fe5f1d620785ad492b27414">MSD::specificHeat_R</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2841 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2843 &#32;&#32;&#32;&#32;}
2844 
2845 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2846 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0,&#32;s2&#32;=&#32;0;
2847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
2848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
2849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dU&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>;
2851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
2852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
2853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dU&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>)&#32;*&#32;dU&#32;+&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>))&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
2854 
2855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
2856 &#32;&#32;&#32;&#32;}
2857 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
2858 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
2859 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0.5&#32;*&#32;s&#32;/&#32;dt;
2860 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
2861 
2862 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(avg))&#32;/&#32;(nR&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
2863 }
2864 
2865 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1abb96b180a4960bf101178aa01701b3cc">MSD::specificHeat_m</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2868 &#32;&#32;&#32;&#32;}
2869 
2870 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2871 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0,&#32;s2&#32;=&#32;0;
2872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
2873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
2874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dU&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>;
2876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
2877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
2878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dU&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>)&#32;*&#32;dU&#32;+&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>))&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
2879 
2880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
2881 &#32;&#32;&#32;&#32;}
2882 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
2883 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
2884 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0.5&#32;*&#32;s&#32;/&#32;dt;
2885 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
2886 
2887 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(avg))&#32;/&#32;(n_m&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
2888 }
2889 
2890 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a2d9850c33757ced8ae7c7b4b5de5afb2">MSD::specificHeat_mL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2893 &#32;&#32;&#32;&#32;}
2894 
2895 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2896 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0,&#32;s2&#32;=&#32;0;
2897 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
2898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
2899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dU&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>;
2901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
2902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
2903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dU&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>)&#32;*&#32;dU&#32;+&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>))&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
2904 
2905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
2906 &#32;&#32;&#32;&#32;}
2907 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
2908 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
2909 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0.5&#32;*&#32;s&#32;/&#32;dt;
2910 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
2911 
2912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(avg))&#32;/&#32;(n_mL&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
2913 }
2914 
2915 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a162b9154b562fb1f70e128eb9f0b9c46">MSD::specificHeat_mR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2916 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2918 &#32;&#32;&#32;&#32;}
2919 
2920 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2921 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0,&#32;s2&#32;=&#32;0;
2922 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
2923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
2924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dU&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>;
2926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
2927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
2928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dU&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>)&#32;*&#32;dU&#32;+&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>))&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
2929 
2930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
2931 &#32;&#32;&#32;&#32;}
2932 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
2933 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
2934 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0.5&#32;*&#32;s&#32;/&#32;dt;
2935 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
2936 
2937 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(avg))&#32;/&#32;(n_mR&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
2938 }
2939 
2940 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ab0205d423d26ab312fe9d612eb6b82e4">MSD::specificHeat_LR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2941 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2943 &#32;&#32;&#32;&#32;}
2944 
2945 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2946 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0,&#32;s2&#32;=&#32;0;
2947 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
2948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
2949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dU&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>;
2951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
2952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
2953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dU&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>)&#32;*&#32;dU&#32;+&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>))&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
2954 
2955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
2956 &#32;&#32;&#32;&#32;}
2957 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
2958 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
2959 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0.5&#32;*&#32;s&#32;/&#32;dt;
2960 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
2961 
2962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;<link linkend="_namespaceudc_1aa7cee595bc6a15bdd189f00553c92349">sq</link>(avg))&#32;/&#32;(nLR&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
2963 }
2964 
2965 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ac8f8afe5da02b14af09b1b4861a274e1">MSD::magneticSusceptibility</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2968 &#32;&#32;&#32;&#32;}
2969 
2970 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2971 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
2972 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s2&#32;=&#32;0;
2973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
2974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
2975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dM&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>;
2977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
2978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
2979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dM&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>)&#32;*&#32;dM&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>&#32;*&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
2980 
2981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
2982 &#32;&#32;&#32;&#32;}
2983 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
2984 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
2985 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;avg&#32;=&#32;0.5&#32;/&#32;dt&#32;*&#32;s;
2986 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
2987 
2988 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;avg&#32;*&#32;avg)&#32;/&#32;(n&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
2989 }
2990 
2991 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a3a7e3fa4340af6fe33cf2daceb37f656">MSD::magneticSusceptibility_L</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
2993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
2994 &#32;&#32;&#32;&#32;}
2995 
2996 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
2997 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
2998 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s2&#32;=&#32;0;
2999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
3002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dM&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>;
3003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
3004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
3005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dM&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>)&#32;*&#32;dM&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>&#32;*&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
3006 
3007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
3008 &#32;&#32;&#32;&#32;}
3009 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
3010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
3011 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;avg&#32;=&#32;0.5&#32;/&#32;dt&#32;*&#32;s;
3012 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
3013 
3014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;avg&#32;*&#32;avg)&#32;/&#32;(nL&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
3015 }
3016 
3017 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1acb90487ccf1985ac1045c7762fa4f42f">MSD::magneticSusceptibility_R</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
3019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
3020 &#32;&#32;&#32;&#32;}
3021 
3022 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
3023 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3024 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s2&#32;=&#32;0;
3025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
3028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dM&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>;
3029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
3030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
3031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dM&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>)&#32;*&#32;dM&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>&#32;*&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
3032 
3033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
3034 &#32;&#32;&#32;&#32;}
3035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
3036 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
3037 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;avg&#32;=&#32;0.5&#32;/&#32;dt&#32;*&#32;s;
3038 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
3039 
3040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;avg&#32;*&#32;avg)&#32;/&#32;(nR&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
3041 }
3042 
3043 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a215acad84017f65c72a1abcb504b12ea">MSD::magneticSusceptibility_m</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1)&#32;{
3045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;&lt;U^2&gt;&#32;-&#32;&lt;U&gt;^2&#32;==&#32;0&#32;if&#32;there&#32;is&#32;only&#32;1&#32;data&#32;point</emphasis>
3046 &#32;&#32;&#32;&#32;}
3047 
3048 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r0&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0);
3049 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3050 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s2&#32;=&#32;0;
3051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;*r1&#32;=&#32;&amp;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
3054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;dM&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>;
3055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>;
3056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>&#32;+&#32;r1-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;trapizoidal&#32;rule&#32;(1/2&#32;factored&#32;out)</emphasis>
3057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;+=&#32;((dt/3&#32;*&#32;dM&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>)&#32;*&#32;dM&#32;+&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>&#32;*&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>)&#32;*&#32;dt;&#32;&#32;<emphasis role="comment">//&#32;square&#32;of&#32;trapizoidal&#32;rule&#32;(linear&#32;interpolation)</emphasis>
3058 
3059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;r1;
3060 &#32;&#32;&#32;&#32;}
3061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;r0&#32;=&#32;&amp;&#32;last&#32;record</emphasis>
3062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dt&#32;=&#32;r0-&gt;<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t;
3063 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;avg&#32;=&#32;0.5&#32;/&#32;dt&#32;*&#32;s;
3064 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avgSq&#32;=&#32;s2&#32;/&#32;dt;
3065 
3066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(avgSq&#32;-&#32;avg&#32;*&#32;avg)&#32;/&#32;(n_m&#32;*&#32;parameters.kT&#32;*&#32;parameters.kT);
3067 }
3068 
3069 
3070 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a4b9e7018e4245eaf23d4e01d0b582cc3">MSD::meanM</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).M;
3073 &#32;&#32;&#32;&#32;<emphasis role="comment">//compensates&#32;for&#32;t&#32;by&#32;using&#32;the&#32;trapezoidal&#32;rule;&#32;(and&#32;the&#32;same&#32;below)</emphasis>
3074 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1add17a888eb16b943590de93a0b3e91b1">M</link>);
3079 &#32;&#32;&#32;&#32;}
3080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3081 }
3082 
3083 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a8fe5c6f539ba5f128d89f6c32e42a81b">MSD::meanML</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).ML;
3086 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab999831d99fdbe251e9b42f285a55de3">ML</link>);
3091 &#32;&#32;&#32;&#32;}
3092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3093 }
3094 
3095 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a75a2a166c7a100d23729914893024e8b">MSD::meanMR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MR;
3098 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a02e81e4c6b257f5cdd5cbadcf8c2a932">MR</link>);
3103 &#32;&#32;&#32;&#32;}
3104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3105 }
3106 
3107 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a7b1361f8f8a4c2782e16f4885860160d">MSD::meanMm</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).Mm;
3110 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a34c69209bbac659c712c77d8c3e2b579">Mm</link>);
3115 &#32;&#32;&#32;&#32;}
3116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3117 }
3118 
3119 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a4c23d2ce55dbe92303a93b0f04247d6a">MSD::meanMS</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MS;
3122 &#32;&#32;&#32;&#32;<emphasis role="comment">//compensates&#32;for&#32;t&#32;by&#32;using&#32;the&#32;trapezoidal&#32;rule;&#32;(and&#32;the&#32;same&#32;below)</emphasis>
3123 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1aeae2f7666be87f8d4499d612567fe71a">MS</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1aeae2f7666be87f8d4499d612567fe71a">MS</link>);
3128 &#32;&#32;&#32;&#32;}
3129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3130 }
3131 
3132 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a6c769149852b83b104041036684cc3b5">MSD::meanMSL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MSL;
3135 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a020102ea8f3621b4791a75de90624ade">MSL</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a020102ea8f3621b4791a75de90624ade">MSL</link>);
3140 &#32;&#32;&#32;&#32;}
3141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3142 }
3143 
3144 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1af32676ff5839b6a89cae38003cf392a5">MSD::meanMSR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MSR;
3147 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66823c7a278ea165067eadaf62c976d0">MSR</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66823c7a278ea165067eadaf62c976d0">MSR</link>);
3152 &#32;&#32;&#32;&#32;}
3153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3154 }
3155 
3156 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a0d9c252051a14d75fbfdab2e3ba0f1e5">MSD::meanMSm</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MSm;
3159 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a42f24fd034f5acf41d415093def18fa5">MSm</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a42f24fd034f5acf41d415093def18fa5">MSm</link>);
3164 &#32;&#32;&#32;&#32;}
3165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3166 }
3167 
3168 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a195fcd710a651679837fe247ba037e65">MSD::meanMF</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MF;
3171 &#32;&#32;&#32;&#32;<emphasis role="comment">//compensates&#32;for&#32;t&#32;by&#32;using&#32;the&#32;trapezoidal&#32;rule;&#32;(and&#32;the&#32;same&#32;below)</emphasis>
3172 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a789b09f14dc037a00b59733ef5e6b8fe">MF</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a789b09f14dc037a00b59733ef5e6b8fe">MF</link>);
3177 &#32;&#32;&#32;&#32;}
3178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3179 }
3180 
3181 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1aa996c134623e5f28bb2d599088f4cd56">MSD::meanMFL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MFL;
3184 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1a6be402d985814748b000dce6b983e9">MFL</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1a6be402d985814748b000dce6b983e9">MFL</link>);
3189 &#32;&#32;&#32;&#32;}
3190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3191 }
3192 
3193 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1ab4b2b0695b3e6143c44b6ab391f9890d">MSD::meanMFR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MFR;
3196 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66d2b20d7c955c704ce31b355419ee45">MFR</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a66d2b20d7c955c704ce31b355419ee45">MFR</link>);
3201 &#32;&#32;&#32;&#32;}
3202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3203 }
3204 
3205 <link linkend="_classudc_1_1_vector">Vector</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a9aac2bad16a926cd6ac24e3c4291325f">MSD::meanMFm</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).MFm;
3208 &#32;&#32;&#32;&#32;<link linkend="_classudc_1_1_vector">Vector</link>&#32;s&#32;=&#32;<link linkend="_classudc_1_1_vector_1a9e75b0360efe22b62f12b7988cac26b8">Vector::ZERO</link>;
3209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac3c2f0d86900c360181e14073842f9a5">MFm</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac3c2f0d86900c360181e14073842f9a5">MFm</link>);
3213 &#32;&#32;&#32;&#32;}
3214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3215 }
3216 
3217 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a07edbbd70d154577745c22e5ec7bdee4">MSD::meanU</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).U;
3220 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0;
3221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ac2f34ae8ef9e61293384e1df5331d77f">U</link>);
3225 &#32;&#32;&#32;&#32;}
3226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3227 }
3228 
3229 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1aec1081b7cc26892ee7bc9399f1fadbb2">MSD::meanUL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).UL;
3232 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0;
3233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1ab96ad5750fd4adbabc28d6164a3c09e5">UL</link>);
3237 &#32;&#32;&#32;&#32;}
3238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3239 }
3240 
3241 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a250a0059dd38873b6efe85a4f5da8668">MSD::meanUR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).UR;
3244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0;
3245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a497832a1d05ed77c59702f3eeaaba4af">UR</link>);
3249 &#32;&#32;&#32;&#32;}
3250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3251 }
3252 
3253 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a922653ef103119a00b0c808c62a7f9d3">MSD::meanUm</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).Um;
3256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0;
3257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1accd2d8651433a936fcdc74d8677c8cb2">Um</link>);
3261 &#32;&#32;&#32;&#32;}
3262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3263 }
3264 
3265 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a41a86b85c83949242bcc602775ed136d">MSD::meanUmL</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).UmL;
3268 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0;
3269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a1826fae2c258ee0eaa78bddbcd83b6e9">UmL</link>);
3273 &#32;&#32;&#32;&#32;}
3274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3275 }
3276 
3277 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1ad5c1cd7334fdd3ea7db7964f2e69a536">MSD::meanUmR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).UmR;
3280 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0;
3281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a11b8dd99584758f7bd89d50823d788d7">UmR</link>);
3285 &#32;&#32;&#32;&#32;}
3286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3287 }
3288 
3289 <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a215bb03467cc147f837cd3afe89a793a">MSD::meanULR</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;&lt;=&#32;1&#32;)
3291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.at(0).ULR;
3292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;0;
3293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size();&#32;i++&#32;)&#32;{
3294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r0&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i&#32;-&#32;1];
3295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structudc_1_1_m_s_d_1_1_results">Results</link>&#32;&amp;r1&#32;=&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[i];
3296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;(r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>&#32;-&#32;r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1af3d16fd70f68cea33b5ef33974515f79">t</link>)&#32;*&#32;(r0.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>&#32;+&#32;r1.<link linkend="_structudc_1_1_m_s_d_1_1_results_1a4b13d0703ce1ed4495f7d68fd6ff0b91">ULR</link>);
3297 &#32;&#32;&#32;&#32;}
3298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.5&#32;/&#32;(<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>.size()&#32;-&#32;1].t&#32;-&#32;<link linkend="_classudc_1_1_m_s_d_1a6a807356604fd24654d015c41974b526">record</link>[0].t))&#32;*&#32;s;
3299 }
3300 
3301 
3302 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1afb91b037de5315bfde0159ee591267a3">MSD::begin</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>(*<emphasis role="keyword">this</emphasis>,&#32;0);
3304 }
3305 
3306 <link linkend="_classudc_1_1_m_s_d_1_1_iterator">MSD::Iterator</link>&#32;<link linkend="_classudc_1_1_m_s_d_1a917317363ac8e2e78840845d6fc49f91">MSD::end</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classudc_1_1_m_s_d_1_1_iterator">Iterator</link>(*<emphasis role="keyword">this</emphasis>,&#32;indices.size());
3308 }
3309 
3310 
3311 }&#32;<emphasis role="comment">//end&#32;of&#32;namespace</emphasis>
3312 
3313 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
