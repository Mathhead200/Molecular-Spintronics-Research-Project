/*
 * MSD.h
 *
 *  Last Edited: Oct, 9 2013
 *       Author: Christopher D'Angelo
 */

#ifndef UDC_MSD
#define UDC_MSD

#include <iostream>
#include <map>
#include <stdexcept>
#include <string>
#include <vector>
#include "MersenneTwister.h"
#include "Vector.h"


namespace udc {

using std::map;
using std::ostream;
using std::out_of_range;
using std::string;

using udc::Vector;


/**
 * An abstract Molecular Spintronic Device.
 * 
 * Bugs: Does not calculate energy (Jm, JmL, JmR, JLR)  correctly if it's not 3D.
 *
 * To do: The various b (Biquadratic Coupling) and D (Dipolar Coupling)
 *        parameters are not taken into account yet.
 */
class MSD {
 public:
	struct Parameters {
		double kT; //Temperature
		Vector B; //Magnetic field
		double JL, JR, Jm, JmL, JmR, JLR; //Heisenberg exchange coupling
		double bL, bR, bm, bmL, bmR, bLR; //Biquadratic Coupling
		double AL, AR, Am; //Anisotropy
		double DL, DR, Dm, DmL, DmR, DLR; //Dipolar Coupling
		
		Parameters();
		
		bool operator ==(const Parameters &) const;
		bool operator !=(const Parameters &) const;
	};
	
	struct Results {
		unsigned long long t; //time, i.e. current iteration
		Vector M, ML, MR, Mm; //Magnetization
		double U, UL, UR, Um, UmL, UmR, ULR; //Internal Energy
		
		Results();
		
		bool operator ==(const Results &) const;
		bool operator !=(const Results &) const;
	};

 private:
	static std::vector<Vector> spins; //possible spins an atom can take on
	
	std::map<unsigned int, Vector> atoms;
	Parameters parameters;
	Results results;
	unsigned int width, height, depth;
	unsigned int molPosL, molPosR;
	unsigned int n; //number of atoms
	
	std::vector<unsigned int> indices; //valid indices
	
	MTRand prng; //pseudo random number generator
	unsigned long seed; //store seed so that every run can follow the same sequence
	unsigned char seed_count; //to help keep seeds from repeating because of temporal proximity
	
	unsigned int index(unsigned int x, unsigned int y, unsigned int z) const;
	unsigned int x(unsigned int a) const;
	unsigned int y(unsigned int a) const;
	unsigned int z(unsigned int a) const;
	
	unsigned long genSeed(); //generates a new seed
	
	MSD& operator=(const MSD&); //undefined, do not use!
	MSD(const MSD &m); //undefined, do not use!

	void init();
	
 public:
	std::vector<Results> record;
	
	MSD(unsigned int width, unsigned int height, unsigned int depth, unsigned int molPosL, unsigned int molPosR);
	MSD(unsigned int width, unsigned int height, unsigned int depth);
	
	Parameters getParameters() const;
	void setParameters(const Parameters &);
	Results getResults() const;
	
	Vector getSpin(unsigned int a) const;
	Vector getSpin(unsigned int x, unsigned int y, unsigned int z) const;
	void setSpin(unsigned int a, const Vector &);
	void setSpin(unsigned int x, unsigned int y, unsigned int z, const Vector &);
	
	unsigned int getN() const;
	unsigned int getWidth() const;
	unsigned int getHeight() const;
	unsigned int getDepth() const;
	void getDimensions(unsigned int &width, unsigned int &height, unsigned int &depth) const;
	unsigned int getMolPosL() const;
	unsigned int getMolPosR() const;
	void getMolPos(unsigned int &molPosL, unsigned int &molPosR) const;
	
	void reinitialize(bool reseed = true); //reseed iff you want a new seed, true by default
	void randomize(bool reseed = true); //similar to reinitialize, but initial state is random
	void metropolis(unsigned long long N);
	void metropolis(unsigned long long N, unsigned long long freq);
	
	double specificHeat() const;
	double specificHeat_L() const;
	double specificHeat_R() const;
	double specificHeat_m() const;
	double specificHeat_mL() const;
	double specificHeat_mR() const;
	double specificHeat_LR() const;
	double magneticSusceptibility() const;
	double magneticSusceptibility_L() const;
	double magneticSusceptibility_R() const;
	double magneticSusceptibility_m() const;
};


const double E = 2.71828182845904523536; //Mathematical constant: Euler's Number


ostream& operator <<(ostream &out, const MSD::Parameters &p) {
	return out
		<< "kT  = " << p.kT  << '\n' << "B   = " << p.B   << "\n\n"
		<< "JL  = " << p.JL  << '\n' << "JR  = " << p.JR  << '\n' << "Jm  = " << p.Jm  << '\n'
		<< "JmL = " << p.JmL << '\n' << "JmR = " << p.JmR << '\n' << "JLR = " << p.JLR << "\n\n"
		<< "bL  = " << p.bL  << '\n' << "bR  = " << p.bR  << '\n' << "bm  = " << p.bm  << '\n'
		<< "bmL = " << p.bmL << '\n' << "bmR = " << p.bmR << '\n' << "bLR = " << p.bLR << "\n\n"
		<< "AL  = " << p.AL  << '\n' << "AR  = " << p.AR  << '\n' << "Am  = " << p.Am  << "\n\n"
		<< "DL  = " << p.DL  << '\n' << "DR  = " << p.DR  << '\n' << "Dm  = " << p.Dm  << '\n'
		<< "DmL = " << p.DmL << '\n' << "DmR = " << p.DmR << '\n' << "DLR = " << p.DLR << '\n';
}

ostream& operator <<(ostream &out, const MSD::Results &r) {
	return out
		<< "t   = " << r.t   << "\n\n"
		<< "M   = " << r.M   << '\n' << "ML  = " << r.ML  << '\n' << "MR  = " << r.MR  << '\n' << "Mm  = " << r.Mm  << "\n\n"
		<< "U   = " << r.U   << '\n' << "UL  = " << r.UL  << '\n' << "UR  = " << r.UR  << '\n' << "Um  = " << r.Um  << '\n'
		<< "UmL = " << r.UmL << '\n' << "UmR = " << r.UmR << '\n' << "ULR = " << r.ULR << '\n';
}


//--------------------------------------------------------------------------------


MSD::Parameters::Parameters()
: kT(1), B(Vector::ZERO),
  JL(1), JR(1), Jm(0), JmL(1), JmR(-1), JLR(0),
  bL(0), bR(0), bm(0), bmL(0), bmR(0), bLR(0),
  AL(0), AR(0), Am(0),
  DL(0), DR(0), Dm(0), DmL(0), DmR(0), DLR(0) {
}

bool MSD::Parameters::operator ==(const Parameters &p) const {
	return kT  == p.kT  && B   == p.B
	    && JL  == p.JL  && JR  == p.JR  && Jm  == p.Jm
	    && JmL == p.JmL && JmR == p.JmR && JLR == p.JLR
	    && bL  == p.bL  && bR  == p.bR  && bm  == p.bm
	    && bmL == p.bmL && bmR == p.bmR && bLR == p.bLR
	    && AL  == p.AL  && AR  == p.AR  && Am  == p.Am
	    && DL  == p.DL  && DR  == p.DR  && Dm  == p.Dm
	    && DmL == p.DmL && DmR == p.DmR && DLR == p.DLR;
}

bool MSD::Parameters::operator !=(const Parameters &p) const {
	return !(*this == p);
}


MSD::Results::Results()
: t(0), M(Vector::ZERO), ML(Vector::ZERO), MR(Vector::ZERO), Mm(Vector::ZERO),
  U(0), UL(0), UR(0), Um(0), UmL(0), UmR(0), ULR(0) {
}

bool MSD::Results::operator==(const Results &r) const {
	return t   == r.t
	    && M   == r.M   && ML  == r.ML  && MR  == r.MR && Mm == r.Mm
	    && U   == r.U   && UL  == r.UL  && UR  == r.UR && Um == r.Um
		&& UmL == r.UmL && UmR == r.UmR && ULR == r.ULR;
}

bool MSD::Results::operator!=(const Results &r) const {
	return !(*this == r);
}


std::vector<Vector> MSD::spins;


unsigned int MSD::index(unsigned int x, unsigned int y, unsigned int z) const {
	return (z * height + y) * width + x;
}

unsigned int MSD::x(unsigned int a) const {
	return a % width;
}

unsigned int MSD::y(unsigned int a) const {
	return a % (width * height) / width;
}

unsigned int MSD::z(unsigned int a) const {
	return a / (width * height);
}


unsigned long MSD::genSeed() {
	return (  static_cast<unsigned long>(time(NULL))      << 16 )
	     | ( (static_cast<unsigned long>(clock()) & 0xFF) << 8  )
	     | ( (static_cast<unsigned long>(seed_count++) & 0xFF) );
}


void MSD::init() {
	// preconditions:
	if( width < 3 ) {
		width = 3;
		molPosL = molPosR = 1;
	}
	if( height < 2 )
		height = 2;
	if( depth < 2 )
		depth = 2;
	if( molPosL <= 0 || molPosR < molPosL || molPosR >= width - 1 )
		molPosL = molPosR = width / 2;

	seed = genSeed();
	prng.seed(seed);
	
	MSD::spins.push_back( Vector::J );
	MSD::spins.push_back( -Vector::J );
	MSD::spins.push_back( Vector::K );
	MSD::spins.push_back( -Vector::K );
	MSD::spins.push_back( Vector::I );
	MSD::spins.push_back( -Vector::I );
	
	n = 0;
	unsigned int a;
	for( unsigned int z = 0; z < depth; z++ )
		for( unsigned int y = 0; y < height; y++ ) {
			for( unsigned int x = 0; x < molPosL; x++ ) {
				a = index(x, y, z);
				indices.push_back(a);
				atoms[a] = spins.at(0);
				n++;
			}
			if( y == 0 || z == 0 || y == height - 1 || z == depth - 1 )
				for( unsigned int x = molPosL; x <= molPosR; x++ ) {
					a = index(x, y, z);
					indices.push_back(a);
					atoms[a] = spins.at(0);
					n++;
				}
			for( unsigned int x = molPosR + 1; x < width; x++ ) {
				a = index(x, y, z);
				indices.push_back(a);
				atoms[a] = spins.at(0);
				n++;
			}
		}
	
	setParameters(parameters); //calculate initial state (results)
}


MSD::MSD(unsigned int width, unsigned int height, unsigned int depth, unsigned int molPosL, unsigned int molPosR)
: width(width), height(height), depth(depth), molPosL(molPosL), molPosR(molPosR) {
	init();
}


MSD::MSD(unsigned int width, unsigned int height, unsigned int depth)
: width(width), height(height), depth(depth), molPosL(width / 2), molPosR(width / 2) {
	init();
}


MSD::Parameters MSD::getParameters() const {
	return parameters;
}

void MSD::setParameters(const MSD::Parameters &p) {
	parameters = p;
	
	//Magnetization
	results.ML = results.MR = results.Mm = Vector::ZERO;
	for( auto iter = atoms.begin(); iter != atoms.end(); iter++ ) {
		unsigned int x = MSD::x(iter->first);
		if( x < molPosL )
			results.ML += iter->second;
		else if( x > molPosR )
			results.MR += iter->second;
		else
			results.Mm += iter->second;
	}
	results.M = results.ML + results.MR + results.Mm;
	

	//Internal Energy
	double anisotropy_L = 0, anisotropy_R = 0, anisotropy_m = 0;
	if( parameters.AL != 0 || parameters.AR != 0 || parameters.Am != 0 )
		for( auto iter = atoms.begin(); iter != atoms.end(); iter++ ) {
			unsigned int x = MSD::x(iter->first);
			if( x < molPosL )
				anisotropy_L += iter->second.x * iter->second.x;
			else if( x > molPosR )
				anisotropy_R += iter->second.x * iter->second.x;
			else
				anisotropy_m += iter->second.x * iter->second.x;
		}

	results.UL = 0;
	if( parameters.JL != 0 ) {
		for( unsigned int z = 0; z < depth; z++ )
			for( unsigned int y = 0; y < height; y++ )
				for( unsigned int x = 0; x < molPosL; x++ ) {
					Vector s = atoms[index(x, y, z)];
					if( x + 1 < molPosL )
						results.UL += s * atoms[index(x + 1, y, z)];
					if( y + 1 < height )
						results.UL += s * atoms[index(x, y + 1, z)];
					if( z + 1 < depth )
						results.UL += s * atoms[index(x, y, z + 1)];
				}
	
		results.UL *= -parameters.JL;
	}
	results.UL -= parameters.B * results.ML;
	results.UL -= parameters.AL * anisotropy_L;
	
	results.UR = 0;
	if( parameters.JR != 0 ) {
		for( unsigned int z = 0; z < depth; z++ )
			for( unsigned int y = 0; y < height; y++ )
				for( unsigned int x = molPosR + 1; x < width; x++ ) {
					Vector s = atoms[index(x, y, z)];
					if( x + 1 < width )
						results.UR += s * atoms[index(x + 1, y, z)];
					if( y + 1 < height )
						results.UR += s * atoms[index(x, y + 1, z)];
					if( z + 1 < depth )
						results.UR += s * atoms[index(x, y, z + 1)];
				}
		
		results.UR *= -parameters.JR;
	}
	results.UR -= parameters.B * results.MR;
	results.UR -= parameters.AR * anisotropy_R;
	
	results.Um = 0;
	if( parameters.Jm != 0 ) {
		for( unsigned int x = molPosL; x < molPosR; x++ ) {
			unsigned int y = 0;
			unsigned int z = 0;
			for( ; y < height - 1; y++ )
				results.Um += atoms[index(x, y, z)] * atoms[index(x + 1, y, z)];
			for( ; z < depth - 1; z++ )
				results.Um += atoms[index(x, y, z)] * atoms[index(x + 1, y, z)];
			for( ; y > 0; y-- )
				results.Um += atoms[index(x, y, z)] * atoms[index(x + 1, y, z)];
			for( ; z > 0; z-- )
				results.Um += atoms[index(x, y, z)] * atoms[index(x + 1, y, z)];
		}
		
		results.Um *= -parameters.Jm;
	}
	results.Um -= parameters.B * results.Mm;
	results.Um -= parameters.Am * anisotropy_m;
	
	results.UmL = 0;
	unsigned int x1 = molPosL - 1;
	if( parameters.JmL != 0 ) {
		unsigned int y = 0;
		unsigned int z = 0;
		for( ; y < height - 1; y++ )
			results.UmL += atoms[index(x1, y, z)] * atoms[index(molPosL, y, z)];
		for( ; z < depth - 1; z++ )
			results.UmL += atoms[index(x1, y, z)] * atoms[index(molPosL, y, z)];
		for( ; y > 0; y-- )
			results.UmL += atoms[index(x1, y, z)] * atoms[index(molPosL, y, z)];
		for( ; z > 0; z-- )
			results.UmL += atoms[index(x1, y, z)] * atoms[index(molPosL, y, z)];
		
		results.UmL *= -parameters.JmL;
	}
	
	results.UmR = 0;
	unsigned int x2 = molPosR + 1;
	if( parameters.JmR != 0 ) {
		unsigned int y = 0;
		unsigned int z = 0;
		for( ; y < height - 1; y++ )
			results.UmR += atoms[index(molPosR, y, z)] * atoms[index(x2, y, z)];
		for( ; z < depth - 1; z++ )
			results.UmR += atoms[index(molPosR, y, z)] * atoms[index(x2, y, z)];
		for( ; y > 0; y-- )
			results.UmR += atoms[index(molPosR, y, z)] * atoms[index(x2, y, z)];
		for( ; z > 0; z-- )
			results.UmR += atoms[index(molPosR, y, z)] * atoms[index(x2, y, z)];
		
		results.UmR *= -parameters.JmR;
	}
	
	results.ULR = 0;
	if( parameters.JLR != 0 ) {
		for( unsigned int z = 0; z < depth; z++ )
			for( unsigned int y = 0; y < height; y++ )
				results.ULR += atoms[index(x1, y, z)] * atoms[index(x2, y, z)];
		
		results.ULR *= -parameters.JLR;
	}
	
	results.U = results.UL + results.UR + results.Um + results.UmL + results.UmR + results.ULR;
}

MSD::Results MSD::getResults() const {
	return results;
}


Vector MSD::getSpin(unsigned int a) const {
	return atoms.at(a);
}

Vector MSD::getSpin(unsigned int x, unsigned int y, unsigned int z) const {
	if( x >= width || y >= height || z >= depth )
		throw out_of_range("(x,y,z) coordinate not in range");
	return getSpin( index(x, y, z) );
}

void MSD::setSpin(unsigned int a, const Vector &spin) {
	Vector &s = atoms.at(a);
	
	if( s == spin )
		return;
	
	unsigned int x = MSD::x(a);
	unsigned int y = MSD::y(a);
	unsigned int z = MSD::z(a);

	
	Vector deltaM = spin - s;
	results.M += deltaM;
	
	double deltaU_B = 0;
	if( parameters.B != Vector::ZERO ) {
		deltaU_B = parameters.B * (s - spin);
		results.U += deltaU_B;
	}
	
	if( x < molPosL ) {
	
		results.ML += deltaM;
		results.UL += deltaU_B;
		
		if( parameters.AL != 0 ) {
			double deltaU = parameters.AL * (s.x * s.x - spin.x * spin.x);
			results.U += deltaU;
			results.UL += deltaU;
		}
		
		if( parameters.JL != 0 ) {
			if( x != 0 ) {
				double deltaU = parameters.JL * ( atoms.at(index(x - 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.UL += deltaU;
			} // else, x - 1 neighbor doesn't exist
			if( y != 0 ) {
				double deltaU = parameters.JL * ( atoms.at(index(x, y - 1, z)) * (s - spin) );
				results.U += deltaU;
				results.UL += deltaU;
			} // else, y - 1 neighbor doesn't exist
			if( y + 1 != height ) {
				double deltaU = parameters.JL * ( atoms.at(index(x, y + 1, z)) * (s - spin) );
				results.U += deltaU;
				results.UL += deltaU;
			} // else, y + 1 neighbor doesn't exist
			if( z != 0 ) {
				double deltaU = parameters.JL * ( atoms.at(index(x, y, z - 1)) * (s - spin) );
				results.U += deltaU;
				results.UL += deltaU;
			} // else, z - 1 neighbor doesn't exist
			if( z + 1 != depth ) {
				double deltaU = parameters.JL * ( atoms.at(index(x, y, z + 1)) * (s - spin) );
				results.U += deltaU;
				results.UL += deltaU;
			} // else, z + 1 neighbor doesn't exist
		}
		if( x + 1 == molPosL ) {
			if( parameters.JmL != 0 ) {
				try {
					double deltaU = parameters.JmL * ( atoms.at(index(x + 1, y, z)) * (s - spin) );
					results.U += deltaU;
					results.UmL += deltaU;
				} catch(const out_of_range &e) {} // x + 1 neighbor doesn't exist because it's in the buffer zone
			}
			if( parameters.JLR != 0 ) {
				double deltaU = parameters.JLR * ( atoms.at(index(molPosR + 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.ULR += deltaU;
			}
		} else {
			if( parameters.JL != 0 ) {
				double deltaU = parameters.JL * ( atoms.at(index(x + 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.UL += deltaU;
			}
		}
		
	} else if( x > molPosR ) {
	
		results.MR += deltaM;
		results.UR += deltaU_B;
		
		if( parameters.AR != 0 ) {
			double deltaU = parameters.AR * (s.x * s.x - spin.x * spin.x);
			results.U += deltaU;
			results.UR += deltaU;
		}
		
		if( parameters.JR != 0 ) {
			if( x + 1 != width ) {
				double deltaU = parameters.JR * ( atoms.at(index(x + 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.UR += deltaU;
			} // else, x + 1 neighbor doesn't exist
			if( y != 0 ) {
				double deltaU = parameters.JR * ( atoms.at(index(x, y - 1, z)) * (s - spin) );
				results.U += deltaU;
				results.UR += deltaU;
			} // else, y - 1 neighbor doesn't exist
			if( y + 1 != height ) {
				double deltaU = parameters.JR * ( atoms.at(index(x, y + 1, z)) * (s - spin) );
				results.U += deltaU;
				results.UR += deltaU;
			} // else, y + 1 neighbor doesn't exist
			if( z != 0 ) {
				double deltaU = parameters.JR * ( atoms.at(index(x, y, z - 1)) * (s - spin) );
				results.U += deltaU;
				results.UR += deltaU;
			} // else, z - 1 neighbor doesn't exist
			if( z + 1 != depth ) {
				double deltaU = parameters.JR * ( atoms.at(index(x, y, z + 1)) * (s - spin) );
				results.U += deltaU;
				results.UR += deltaU;
			} // else, z + 1 neighbor doesn't exist
		}
		if( x - 1 == molPosR ) {
			if( parameters.JmR != 0 ) {
				try {
					double deltaU = parameters.JmR * ( atoms.at(index(x - 1, y, z)) * (s - spin) );
					results.U += deltaU;
					results.UmR += deltaU;
				} catch(const out_of_range &e) {} // x - 1 neighbor doesn't exist because it's in the buffer zone
			}
			if( parameters.JLR != 0 ) {
				double deltaU = parameters.JLR * ( atoms.at(index(molPosL - 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.ULR += deltaU;
			}
		} else {
			if( parameters.JR != 0 ) {
				double deltaU = parameters.JR * ( atoms.at(index(x - 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.UR += deltaU;
			}
		}
		
	} else { // molPosL <= x <= molPosR
	
		results.Mm += deltaM;
		results.Um += deltaU_B;
		
		if( parameters.Am != 0 ) {
			double deltaU = parameters.Am * (s.x * s.x - spin.x * spin.x);
			results.U += deltaU;
			results.Um += deltaU;
		}
		
		if( x == molPosL )
			if( parameters.JmL != 0 ) {
				double deltaU = parameters.JmL * ( atoms.at(index(x - 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.UmL += deltaU;
			}
		else
			if( parameters.Jm != 0 ) {
				double deltaU = parameters.Jm * ( atoms.at(index(x - 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.Um += deltaU;
			}
		
		if( x == molPosR )
			if( parameters.JmR != 0 ) {
				double deltaU = parameters.JmR * ( atoms.at(index(x + 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.UmR += deltaU;
			}
		else
			if( parameters.Jm != 0 ) {
				double deltaU = parameters.Jm * ( atoms.at(index(x + 1, y, z)) * (s - spin) );
				results.U += deltaU;
				results.Um += deltaU;
			}
		
	}
	
	s = spin;
	// setParameters(parameters); //recalculate results (the long way!!!)
}

void MSD::setSpin(unsigned int x, unsigned int y, unsigned int z, const Vector &spin) {
	if( x >= width || y >= height || z >= depth )
		throw out_of_range("(x,y,z) coordinate not in range");
	setSpin( index(x, y, z), spin );
}


unsigned int MSD::getN() const {
	return n;
}

unsigned int MSD::getWidth() const {
	return width;
}

unsigned int MSD::getHeight() const {
	return height;
}

unsigned int MSD::getDepth() const {
	return depth;
}

void MSD::getDimensions(unsigned int &width, unsigned int &height, unsigned int &depth) const {
	width = this->width;
	height = this->height;
	depth = this->depth;
}

unsigned int MSD::getMolPosL() const {
	return molPosL;
}

unsigned int MSD::getMolPosR() const {
	return molPosR;
}

void MSD::getMolPos(unsigned int &molPosL, unsigned int &molPosR) const {
	molPosL = this->molPosL;
	molPosR = this->molPosR;
}


void MSD::reinitialize(bool reseed) {
	if( reseed )
		seed = genSeed();
	prng.seed(seed);
	for( auto i = atoms.begin(); i != atoms.end(); i++ )
		i->second = spins.at(0);
	record.clear();
	setParameters(parameters);
	results.t = 0;
}

void MSD::randomize(bool reseed) {
	if( reseed )
		seed = genSeed();
	prng.seed(seed);
	for( auto i = atoms.begin(); i != atoms.end(); i++ )
		i->second = spins.at( prng.randInt(spins.size() - 1) );
	record.clear();
	setParameters(parameters);
	results.t = 0;
}

void MSD::metropolis(unsigned long long N) {
	Results r = getResults(); //get the energy of the system
	//start loop (will iterate N times)
	for( unsigned long long i = 0; i < N; i++ ) {
		unsigned int a = indices[ prng.randInt(indices.size() - 1) ]; //pick an atom (pseudo) randomly
		Vector s = getSpin(a);
		setSpin( a, spins[ prng.randInt(spins.size() - 1) ] ); //flip that atom
		Results r2 = getResults(); //get the energy of the system (for the new state)
		if( r2.U <= r.U || prng.randExc() < pow( E, (r.U - r2.U) / parameters.kT ) ) {
			//either the new system requires less energy or external energy (kT) is disrupting it
			r = r2; //in either case we keep the new system
		} else {
			//neither thing (above) happened so we revert the system
			atoms[a] = s; //revert the system by flipping the atom back
			results = r;
		}
	}
	results.t += N;
}

void MSD::metropolis(unsigned long long N, unsigned long long freq) {
	if( freq == 0 ) {
		metropolis(N);
		return;
	}
	while(true) {
		record.push_back( getResults() );
		if( N >= freq ) {
			metropolis(freq);
			N -= freq;
		} else {
			metropolis(N);
			break;
		}
	}
}


double MSD::specificHeat() const {
	double avg = 0, avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->U;
		avgSq += iter->U * iter->U;
	}
	avg /= record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::specificHeat_L() const {
double avg = 0, avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->UL;
		avgSq += iter->UL * iter->UL;
	}
	avg /= record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::specificHeat_R() const {
	double avg = 0, avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->UR;
		avgSq += iter->UR * iter->UR;
	}
	avg /= record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::specificHeat_m() const {
	double avg = 0, avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->Um;
		avgSq += iter->Um * iter->Um;
	}
	avg /= record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::specificHeat_mL() const {
	double avg = 0, avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->UmL;
		avgSq += iter->UmL * iter->UmL;
	}
	avg /= record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::specificHeat_mR() const {
	double avg = 0, avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->UmR;
		avgSq += iter->UmR * iter->UmR;
	}
	avg /= record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::specificHeat_LR() const {
	double avg = 0, avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->ULR;
		avgSq += iter->ULR * iter->ULR;
	}
	avg /= record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::magneticSusceptibility() const {
	Vector avg = Vector::ZERO;
	double avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->M;
		avgSq += iter->M * iter->M;
	}
	avg *= 1.0 / record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::magneticSusceptibility_L() const {
	Vector avg = Vector::ZERO;
	double avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->ML;
		avgSq += iter->ML * iter->ML;
	}
	avg *= 1.0 / record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::magneticSusceptibility_R() const {
	Vector avg = Vector::ZERO;
	double avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->MR;
		avgSq += iter->MR * iter->MR;
	}
	avg *= 1.0 / record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

double MSD::magneticSusceptibility_m() const {
	Vector avg = Vector::ZERO;
	double avgSq = 0;
	for( auto iter = record.begin(); iter != record.end(); iter++ ) {
		avg += iter->Mm;
		avgSq += iter->Mm * iter->Mm;
	}
	avg *= 1.0 / record.size();
	avgSq /= record.size();
	return avgSq - avg * avg;
}

} //end of namespace

#endif
